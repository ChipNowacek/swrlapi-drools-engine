Protege 3.5 Build 663, JVM 1.7.0_51-b13, memory=3817M, Mac OS X, encoding=UTF-8, language=en, country=US
Loaded plugin edu.stanford.smi.protegex.owl - OWL Plugin
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.conditions.ConditionsWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.ResourceListWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.properties.domain.OWLDomainWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.database.OWLDatabaseKnowledgeBaseFactory -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.cls.ClassAnnotationsAndDescriptionWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.storage.ProtegeFromOWLFilesCreateProjectPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.metadatatab.OWLMetadataTab -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.MultiResourceWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.metadatatab.OntologyURIWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.OWLDateTimeWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.metadatatab.OWLNamespacesWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.MultiLiteralWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.swrl.ui.SWRLProjectPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.SingleLiteralWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.jena.export.JenaTurtleFileExportPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.properties.OWLPropertiesTab -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.cls.OWLClassesTab -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.jena.JenaKnowledgeBaseFactory -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.jena.importer.JenaImportPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.properties.range.OWLRangeWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.conditions.AssertedConditionsWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.jena.export.JenaExportPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.conditions.InferredConditionsWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.properties.types.OWLDatatypePropertyTypesWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.properties.types.RDFPropertyTypesWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.clsdesc.DisjointClassesWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.jena.export.JenaN3FileExportPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.SingleResourceWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.jena.export.JenaNTripleFileExportPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.metadata.AnnotationsWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.OWLTimeWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.properties.OWLInversePropertyWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.database.CreateOWLDatabaseProjectPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.cls.ClassTypeConverterWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.ClassFormWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.metadata.OWLMetadataWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.swrl.ui.tab.SWRLTab -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.RDFSSubClassOfWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.RDFListWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.metadata.RDFSNamedClassMetadataWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.individuals.OWLIndividualsTab -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.OWLDateWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.cls.SwitchableClassDefinitionWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.DataRangeFieldWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.RDFPropertiesWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.properties.types.OWLObjectPropertyTypesWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.OWLFormsTab -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.swrl.ui.widget.SWRLRuleSlotWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.database.CreateOWLDatabaseFromFileProjectPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.InferredSuperClassesWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.SingleLiteralAreaWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.menu.OWLMenuProjectPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.clsproperties.PropertyRestrictionsTreeWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.HeaderWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.jena.OWLFilesCreateProjectPlugin -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.OWLFormWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.metadatatab.alldifferent.AllDifferentWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.metadata.NameDocumentationWidget -- PluginUtilities.checkPlugin()
WARNING: Duplicate plugin: edu.stanford.smi.protegex.owl.ui.widget.ExternalResourceURLWidget -- PluginUtilities.checkPlugin()
Loaded plugin ca.uvic.cs.chisel.jambalaya - Jambalaya
Loaded plugin dfki.protege.ontoviz
Loaded plugin edu.stanford.smi.protegex.standard_extensions - Graph Widget, Table Widget
Loaded plugin edu.stanford.bmir.protegex.bp.ref - BioPortal Reference Plugin, BioPortal Import Plugin
Loaded plugin edu.stanford.smi.protegex.rdf_backend - RDF Backend
Loaded plugin edu.stanford.smi.protegex.changes - Changes tab
Loaded plugin edu.stanford.smi.protegex.chatPlugin - Chat
Loaded plugin edu.stanford.smi.protege.collab - Collaborative Protege
Loaded plugin edu.stanford.smi.protege.script - Script Plugin
Loaded plugin edu.stanford.smi.protege.stringsearch - String Search Tab
Loaded plugin edu.stanford.smi.protegex.changeanalysis - Change Analysis Tab
Loaded plugin edu.stanford.smi.protegex.datamaster - DataMaster Tab
Loaded plugin edu.stanford.smi.protegex.pal_tabs - PAL Tabs
Loaded plugin edu.stanford.smi.protegex.ezpal - EZPal Tab
Loaded plugin edu.stanford.smi.protegex.facets_tab
Loaded plugin edu.stanford.smi.protegex.instance_tree
Loaded plugin edu.stanford.smi.protegex.prompt - PROMPT Tab
Loaded plugin edu.stanford.smi.protegex.metaanalysis - MetaAnalysis Tab
Loaded plugin edu.stanford.smi.protegex.owl.inference.pellet - Protege Pellet Reasoner
Loaded plugin edu.stanford.smi.protegex.query.lucene - LuceneQueryTab
Loaded plugin edu.stanford.smi.protegex.xml_tab - XML Tab
Loaded plugin org.protege.owl.axiome - Axiome Plugin
Loaded plugin org.protege.owl.mappingmaster - MappingMaster Plugin
Loaded plugin se.liu.ida.JessTab - JessTab Plugin
Loaded plugin uk.ac.iam.soton.akt.tgviztab - TGVizTab
Loaded plugin uk.ac.man.cs.mig.coode.debugger
Loaded plugin uk.ac.man.cs.mig.coode.manchesterowlsyntaxeditor
Loaded plugin uk.ac.man.cs.mig.coode.owldoc
Loaded plugin uk.ac.man.cs.mig.coode.owlindividualstab
Loaded plugin uk.ac.man.cs.mig.coode.owlviz
Loaded plugin uk.ac.man.cs.mig.coode.protege.wizard - Basic Wizards
Loaded plugin uk.ac.man.cs.mig.coode.protege.wizard.owl - OWL Wizards
Loading triples for: file:/Users/martin/workspace/protege/protege-3.5.1/swrl-api/junit/projects/SWRLInferenceTests.owl
    Completed triple loading after 378 ms
Importing http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl from location: /Applications/Protege_3.5/plugins/edu.stanford.smi.protegex.owl/sqwrl.owl
Loading triples for: http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl
    Completed triple loading after 12 ms
http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl already imported as triple store http://sqwrl.stanford.edu/ontologies/built-ins/3.4/sqwrl.owl
Importing http://swrl.stanford.edu/ontologies/3.3/swrla.owl from location: /Applications/Protege_3.5/plugins/edu.stanford.smi.protegex.owl/swrla.owl
Loading triples for: http://swrl.stanford.edu/ontologies/3.3/swrla.owl
    Completed triple loading after 25 ms
http://swrl.stanford.edu/ontologies/3.3/swrla.owl already imported as triple store http://swrl.stanford.edu/ontologies/3.3/swrla.owl
Importing http://swrl.stanford.edu/ontologies/built-ins/3.3/tbox.owl from location: /Applications/Protege_3.5/plugins/edu.stanford.smi.protegex.owl/tbox.owl
Loading triples for: http://swrl.stanford.edu/ontologies/built-ins/3.3/tbox.owl
    Completed triple loading after 13 ms
http://swrl.stanford.edu/ontologies/built-ins/3.3/tbox.owl already imported as triple store http://swrl.stanford.edu/ontologies/built-ins/3.3/tbox.owl
Postprocess: Process entities with incorrect Java type (2 entities) ... 1 ms
Postprocess: Process metaclasses (3 metaclasses) ... 0 ms
Postprocess: Process subclasses of rdf:List (1 classes) ... 0 ms
Postprocess: Instances with multiple types (21 instances) ... 4 ms
Postprocess: Add inferred superclasses ... 4 ms
Postprocess: Process orphan classes (15 classes) ... 1 ms
Postprocess: Generalized Concept Inclusion (0 axioms) ... 0 ms
Postprocess: Abstract classes... 0 ms
Postprocess: Domain and range of properties... 5 ms
Postprocess: Possibly typed entities (0 resources) ... 0 ms
Updating underlying frames model in 0 ms
Rule engine 'Jess' registered with the SWRLTab rule engine manager.
Plugin 'SWRLJessTab' registered with the SWRLTab plugin manager.
Rule engine 'Drools' registered with the SWRLTab rule engine manager.
Plugin 'SWRLDroolsTab' registered with the SWRLTab plugin manager.
Plugin 'SQWRLQueryTab' registered with the SWRLTab plugin manager.
Rule name: cls_int2
rule cls_int2 when OIOCE($c:ceid, $c1:c1) CAA(c==$c, $y:i) then CAA caa1=new CAA($c1, $y); inferrer.infer(caa1); end
Rule name: scm_cls
rule scm_cls when CDA($c:c) then SCA sca1=new SCA($c, $c); ECA eca=new ECA($c, $c); SCA sca2=new SCA($c, "owl:Thing"); SCA sca3=new SCA("owl:Nothing", $c); inferrer.infer(sca1, eca, sca2, sca3); end
Rule name: prp_fp
rule prp_fp when FOPA($p:p) OPAA($x:s, p==$p, $y1:o) OPAA(s==$x, p==$p, $y2:o) then SIA sia=new SIA($y1, $y2); inferrer.infer(sia); end
Rule name: scm_spo_dp
rule scm_spo_dp when SDPA($p1:sub, $p2:sup) SDPA(sub==$p2, $p3:sup) then SDPA sdpa=new SDPA($p1, $p3); inferrer.infer(sdpa); end
Rule name: scm_spo_op
rule scm_spo_op when SOPA($p1:sub, $p2:sup) SOPA(sub==$p2, $p3:sup) then SOPA sopa=new SOPA($p1, $p3); inferrer.infer(sopa); end
Rule name: cls_thing
rule cls_thing when then CDA cda = new CDA("owl:Thing"); inferrer.infer(cda); end
Rule name: prp_rng
rule prp_rng_op when ROPA($p:p, $c:r) OPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $y); inferrer.infer(caa); end
Rule name: prp_spo1_dp
rule prp_spo1_dp when SDPA($p1:sub, $p2:sup) DPAA($x:s, p==$p1, $y:o) then DPAA dpaa=new DPAA($x, $p2, $y); inferrer.infer(dpaa); end
Rule name: prp_trp
rule prp_trp when TPA($p:p) OPAA($x:s, p==$p, $y:o) OPAA(s==$y, p==$p, $z:o) then OPAA opaa=new OPAA($x, $p.id, $z); inferrer.infer(opaa); end
Rule name: cls_uni
rule cls_uni when OUOCE($c:ceid, $c1:c1) CAA(c==$c1, $y:i) then CAA caa=new CAA($c, $y); inferrer.infer(caa); end
Rule name: scm_dom1_dp
rule scm_dom1_dp when DDPA($p:p, $c1:d) SCA(sub==$c1, $c2:sup) then DDPA ddpa=new DDPA($p, $c2); inferrer.infer(ddpa); end
Rule name: scm_dom2_dp
rule scm_dom2_dp when DDPA($p2:p, $c:d) SDPA($p1:sub, sup==$p2) then DDPA ddpa=new DDPA($p1, $c); inferrer.infer(ddpa); end
Rule name: prp_eqp1_op
rule prp_eqp1_op when EOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($x, $p2.id, $y); inferrer.infer(opaa); end
Rule name: scm_avf2_dop
rule scm_avf2_dp when DAVFCE($c1:ceid, $p1:p, $y:v) DAVFCE($c2:ceid, $p2:p, v==$y) SDPA(sub==$p1, sup==$p2)  then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: eq_ref_c
rule eq_ref_c when CAA($s:c, $o:i) then SIA sia=new SIA($o, $o); inferrer.infer(sia); end
Rule name: eq_ref_op
rule eq_ref_op when OPAA($s:s, $p:p, $o:o) then SIA sia1=new SIA($s, $s); SIA sia2=new SIA($o, $o); inferrer.infer(sia1, sia2); end
Rule name: eq_diff1
rule eq_diff1 when SIA($x:i1, $y:i2) DIA(i1==$x, i2==$y) then inferrer.inferFalse("EQ_DIFF1", $x.id, $y.id); end
Rule name: eq_rep_s_op
rule eq_rep_s_op when SIA($s:i1, $sp:i2) OPAA(s==$s, $p:p, $o:o) then OPAA opaa=new OPAA($sp, $p, $o); inferrer.infer(opaa); end
Rule name: prp_symp
rule prp_symp when SPA($p:p) OPAA($x:s, p==$p, $y:o) then OPAA opaa=new OPAA($y, $p.id, $x); inferrer.infer(opaa); end
Rule name: scm_avf2_op
rule scm_avf2_op when OAVFCE($c1:ceid, $p1:p, $y:v) OAVFCE($c2:ceid, $p2:p, v==$y) SOPA(sub==$p1, sup==$p2)  then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_eqp2_dp
rule prp_eqp2_dp when EDPA($p1:p1, $p2:p2) DPAA($x:s, p==$p2, $y:o) then DPAA dpaa=new DPAA($x, $p1.id, $y); inferrer.infer(dpaa); end
Rule name: cax_sco
rule cax_sco  when SCA($c1:sub, $c2:sup) CAA(c==$c1, $x:i) then CAA caa=new CAA($c2, $x); inferrer.infer(caa); end
Rule name: eq_rep_o
rule eq_rep_o when SIA($o:i1, $op:i2) OPAA($s:s, $p:p, o==$o) then OPAA opaa=new OPAA($s, $p, $op); inferrer.infer(opaa); end
Rule name: cls_avf
rule cls_avf_op when OAVFCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $v:o) then CAA caa=new CAA($y, $v); inferrer.infer(caa); end
Rule name: scm_svf2_op
rule scm_svf2_op when OSVFCE($c1:ceid, $p1:p, $y:v) OSVFCE($c2:ceid, $p2:p, v==$y) SOPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_ifp
rule prp_ifp_op when IPA($p:p) OPAA($x1:s, p==$p, $y:o) OPAA($x2:s, p==$p, o==$y) then SIA sia=new SIA($x1, $x2); inferrer.infer(sia); end
Rule name: scm_rng2_op
rule scm_rng1_op when ROPA($p:p, $c1:r) SCA(sub==$c1, $c2:sup) then ROPA ropa=new ROPA($p, $c2); inferrer.infer(ropa); end
Rule name: scm_sco
rule scm_sco when SCA($c1:sub, $c2:sup) SCA(sub==$c2, $c3:sup) then SCA sca=new SCA($c1, $c3); inferrer.infer(sca); end
Rule name: scm_afv1
rule scm_avf1 when OAVFCE($c1:ceid, $p:p, $y1:v) OAVFCE($c2:ceid, p==$p, $y2:v) SCA(sub==$y1, sup==$y2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: scm_int
rule scm_int when OIOCE($c:ceid, $c1:c1) then SCA sca1=new SCA($c, $c1); inferrer.infer(sca1); end
Rule name: cls_nothing1
rule cls_nothing1 when then CDA cda=new CDA("owl:Nothing"); inferrer.infer(cda); end
Rule name: scm_svf1
rule scm_svf1 when OSVFCE($c1:ceid, $p:p, $y1:v) OSVFCE($c2:ceid, p==$p, $y2:v) SCA(sub==$y1, sup==$y2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: cls_com
rule cls_com when OCOCE($c1:ceid, $c2:c) CAA(c==$c1, $x:i) CAA(c==$c2, i==$x) then inferrer.inferFalse("CLS_COM", $c2, $c2); end
Rule name: eq_rep_s_c
rule eq_rep_s_c when SIA($s:i1, $sp:i2) CAA($c:c, i==$s) then CAA caa=new CAA($c, $sp); inferrer.infer(caa); end
Rule name: prp_asyp
rule prp_asyp when APA($p:p) OPAA($x:s, p==$p, $y:o) OPAA(s==$y, p==$p, o==$x) then inferrer.inferFalse("PRP_ASYP", $x.id, $y.id, $p.id); end
Rule name: cls_maxc1_dp
rule cls_maxc1_dp when DMaxCCE($x:ceid, $p:p, card==0) CAA(c==$x, $u:i) DPAA(s==$u, p==$p, $y:o) then inferrer.inferFalse("CLS_MAXC1", $x, $p.id, $u.id, $y.value); end
Rule name: scm_eqp2_op
rule scm_eqp2_op when SOPA($p1:sub, $p2:sup) SOPA(sub==$p2, sup==$p1) then EOPA eopa=new EOPA($p1, $p2); inferrer.infer(eopa); end
Rule name: eq_trans
rule eq_trans when SIA($s1:i1, $s2:i2) SIA(i1==$s2, $s3:i2) then SIA sia=new SIA($s1, $s3); inferrer.infer(sia); end
Rule name: scm_eqp1_op
rule scm_eqp1_op when EOPA($p1:p1, $p2:p2) then SOPA sopa1=new SOPA($p1.id, $p2.id); SOPA sopa2=new SOPA($p2.id, $p1.id); inferrer.infer(sopa1, sopa2); end
Rule name: scm_eqp2_dp
rule scm_eqp2_dp when SDPA($p1:sub, $p2:sup) SDPA(sub==$p2, sup==$p1) then EDPA edpa=new EDPA($p1, $p2); inferrer.infer(edpa); end
Rule name: cls_int1
rule cls_int1 when OIOCE($x:ceid, $c1:c1) CAA(c==$c1, $y:i) forall ( OIOCE(ceid==$x, $cc:c1) CAA(c==$cc, i==$y)  ) then CAA caa=new CAA($x, $y); inferrer.infer(caa); end
Rule name: cls_hv1_dp
rule cls_hv1_dp when DHVCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) then DPAA dpaa=new DPAA($u, $p.id, $y); inferrer.infer(dpaa); end
Rule name: scm_hv_dp
rule scm_hv_dp when DHVCE($c1:ceid, $p1:p, $i:v) DHVCE($c2:ceid, $p2:p, v==$i) SDPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_dom_dp
rule prp_dom_dp when DDPA($p:p, $c:d) DPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $x); inferrer.infer(caa); end
Rule name: eq_ref_dp
rule eq_ref_dp when DPAA($s:s, $p:p, $o:o) then SIA sia=new SIA($s, $s); inferrer.infer(sia); end
Rule name: cls_hv1_op
rule cls_hv1_op when OHVCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) then OPAA opaa=new OPAA($u, $p.id, $y); inferrer.infer(opaa); end
Rule name: cax_eqc2
rule cax_eqc2 when ECA($c1:c1, $c2:c2) CAA(c==$c2, $x:i) then CAA caa=new CAA($c1, $x); inferrer.infer(caa); end
Rule name: cls_sfv2
rule cls_sfv2 when OSVFCE($x:ceid, $p:p, v=="owl:Thing") OPAA($u:s, p==$p, $v:o) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: scm_op
rule scm_op when OPDA($p:p) then SOPA sopa=new SOPA($p, $p); EOPA eopa=new EOPA($p, $p); inferrer.infer(sopa, eopa); end
Rule name: prp_inv2
rule prp_inv2 when IOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p2, $y:o) then OPAA opaa=new OPAA($y, $p1.id, $x); inferrer.infer(opaa); end
Rule name: scm_dom2_op
rule scm_dom2_op when DOPA($p2:p, $c:d) SOPA($p1:sub, sup==$p2) then DOPA dopa=new DOPA($p1, $c); inferrer.infer(dopa); end
Rule name: rule cls_hv2_op when OHVCE($x:ceid, $p:p, $y:v) OPAA($u:s, p==$p, o==$y) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
rule cls_hv2_dp when DHVCE($x:ceid, $p:p, $y:v) DPAA($u:s, p==$p, o==$y) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: cls_sfv1
rule cls_sfv1_op when OSVFCE($x:ceid, $p:p, $y:v) OPAA($u:s, p==$p, $v:o) CAA(c==$y, i==$v) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: prp_inv1
rule prp_inv1 when IOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($y, $p2.id, $x); inferrer.infer(opaa); end
Rule name: eq_sym
rule eq_sym when SIA($x:i1, $y:i2) then SIA sia=new SIA($y, $x); inferrer.infer(sia); end
Rule name: scm_eqc2
rule scm_eqc2 when SCA($c1:sub, $c2:sup) SCA(sub==$c2, sup==$c1) then ECA eca=new ECA($c1, $c2); inferrer.infer(eca); end
Rule name: scm_rng2_op
rule scm_rng2_op when ROPA($p2:p, $c:r) SOPA($p1:sub, sup==$p2) then ROPA ropa=new ROPA($p1, $c); inferrer.infer(ropa); end
Rule name: scm_eqc1
rule scm_eqc1 when ECA($c1:c1, $c2:c2) then SCA sca1=new SCA($c1, $c2); SCA sca2=new SCA($c2, $c1); inferrer.infer(sca1, sca2); end
Rule name: eq_rep_s_dp
rule eq_rep_s_dp when SIA($s:i1, $sp:i2) DPAA(s==$s, $p:p, $o:o) then DPAA dpaa=new DPAA($sp, $p, $o); inferrer.infer(dpaa); end
Rule name: scm_uni
rule scm_uni when OUOCE($c:ceid, $c1:c1) then SCA sca1=new SCA($c1, $c); inferrer.infer(sca1); end
Rule name: prp_pdw
rule prp_pdw when DJOPA($p1:p1, $p2:p2) OPAA($u:s, p==$p1, $v:o) OPAA($u==s, p==$p2, o==$v)  then inferrer.inferFalse("PRP_PDW", $u.id, $v.id, $p1.id, $p2.id); end
Rule name: prp_eqp1_dp
rule prp_eqp1_dp when EDPA($p1:p1, $p2:p2) DPAA($x:s, p==$p1, $y:o) then DPAA dpaa=new DPAA($x, $p2.id, $y); inferrer.infer(dpaa); end
Rule name: cls_nothing2
rule cls_nothing2 when CAA(c=="owl:Nothing", $i:i) then inferrer.inferFalse("CLS_NOTHING2", $i.id); end
Rule name: cax_dw
rule cax_dw when DCA($c1:c1, $c2:c2) CAA(c==$c1, $x:i) CAA(c==$c2, i==$x) then inferrer.inferFalse("CAX_DW", $c1, $c2, $x.id); end
Rule name: cls_maxc2
rule cls_maxc2 when OMaxCCE($x:ceid, $p:p, card==1) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $y1:o) OPAA(s==$u, p==$p, $y2:o) then SIA sia=new SIA($y1, $y2); inferrer.infer(sia); end
Rule name: prp_eqp2_op
rule prp_eqp2_op when EOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p2, $y:o) then OPAA opaa=new OPAA($x, $p1.id, $y); inferrer.infer(opaa); end
Rule name: scm_eqp1_dp
rule scm_eqp1_dp when EDPA($p1:p1, $p2:p2) then SDPA sdpa1=new SDPA($p1.id, $p2.id); SDPA sdpa2=new SDPA($p2.id, $p1.id); inferrer.infer(sdpa1, sdpa2); end
Rule name: scm_dp
rule scm_dp when DPDA($p:p) then SDPA sdpa=new SDPA($p, $p); EDPA edpa=new EDPA($p, $p); inferrer.infer(sdpa, edpa); end
Rule name: scm_svf2_dp
rule scm_svf2_dp when DSVFCE($c1:ceid, $p1:p, $y:v) DSVFCE($c2:ceid, $p2:p, v==$y) SDPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: cls_maxc1_op
rule cls_maxc1_op when OMaxCCE($x:ceid, $p:p, card==0) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $y:o) then inferrer.inferFalse("CLS_MAXC1", $x, $p.id, $u.id, $y.id); end
Rule name: prp_spo1_op
rule prp_spo1_op when SOPA($p1:sub, $p2:sup) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($x, $p2, $y); inferrer.infer(opaa); end
Rule name: cls_oo
rule cls_oo when OOOCE($c:ceid, $y1:i1, $y2:i2) then CAA caa1=new CAA($c, $y1); CAA caa2=new CAA($c, $y2); inferrer.infer(caa1, caa2); end
Rule name: scm_hv_op
rule scm_hv_op when OHVCE($c1:ceid, $p1:p, $i:v) OHVCE($c2:ceid, $p2:p, v==$i) SOPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_dom_op
rule prp_dom_op when DOPA($p:p, $c:d) OPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $x); inferrer.infer(caa); end
Rule name: cax_eqc1
rule cax_eqc1 when ECA($c1:c1, $c2:c2) CAA(c==$c1, $x:i) then CAA caa=new CAA($c2, $x); inferrer.infer(caa); end
Rule name: prp_irp
rule prp_irp when IRPA($p:p) OPAA($s:s, p==$p, $x:o) then inferrer.inferFalse("PRP_IRP", $x.id, $p.id); end
Rule name: scm_dom1_op
rule scm_dom1_op when DOPA($p:p, $c1:d) SCA(sub==$c1, $c2:sup) then DOPA dopa=new DOPA($p, $c2); inferrer.infer(dopa); end
Rule name: cls_int2
rule cls_int2 when OIOCE($c:ceid, $c1:c1) CAA(c==$c, $y:i) then CAA caa1=new CAA($c1, $y); inferrer.infer(caa1); end
Rule name: scm_cls
rule scm_cls when CDA($c:c) then SCA sca1=new SCA($c, $c); ECA eca=new ECA($c, $c); SCA sca2=new SCA($c, "owl:Thing"); SCA sca3=new SCA("owl:Nothing", $c); inferrer.infer(sca1, eca, sca2, sca3); end
Rule name: prp_fp
rule prp_fp when FOPA($p:p) OPAA($x:s, p==$p, $y1:o) OPAA(s==$x, p==$p, $y2:o) then SIA sia=new SIA($y1, $y2); inferrer.infer(sia); end
Rule name: scm_spo_dp
rule scm_spo_dp when SDPA($p1:sub, $p2:sup) SDPA(sub==$p2, $p3:sup) then SDPA sdpa=new SDPA($p1, $p3); inferrer.infer(sdpa); end
Rule name: scm_spo_op
rule scm_spo_op when SOPA($p1:sub, $p2:sup) SOPA(sub==$p2, $p3:sup) then SOPA sopa=new SOPA($p1, $p3); inferrer.infer(sopa); end
Rule name: prp_rng
rule prp_rng_op when ROPA($p:p, $c:r) OPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $y); inferrer.infer(caa); end
Rule name: prp_spo1_dp
rule prp_spo1_dp when SDPA($p1:sub, $p2:sup) DPAA($x:s, p==$p1, $y:o) then DPAA dpaa=new DPAA($x, $p2, $y); inferrer.infer(dpaa); end
Rule name: prp_trp
rule prp_trp when TPA($p:p) OPAA($x:s, p==$p, $y:o) OPAA(s==$y, p==$p, $z:o) then OPAA opaa=new OPAA($x, $p.id, $z); inferrer.infer(opaa); end
Rule name: cls_uni
rule cls_uni when OUOCE($c:ceid, $c1:c1) CAA(c==$c1, $y:i) then CAA caa=new CAA($c, $y); inferrer.infer(caa); end
Rule name: scm_dom1_dp
rule scm_dom1_dp when DDPA($p:p, $c1:d) SCA(sub==$c1, $c2:sup) then DDPA ddpa=new DDPA($p, $c2); inferrer.infer(ddpa); end
Rule name: scm_dom2_dp
rule scm_dom2_dp when DDPA($p2:p, $c:d) SDPA($p1:sub, sup==$p2) then DDPA ddpa=new DDPA($p1, $c); inferrer.infer(ddpa); end
Rule name: prp_eqp1_op
rule prp_eqp1_op when EOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($x, $p2.id, $y); inferrer.infer(opaa); end
Rule name: scm_avf2_dop
rule scm_avf2_dp when DAVFCE($c1:ceid, $p1:p, $y:v) DAVFCE($c2:ceid, $p2:p, v==$y) SDPA(sub==$p1, sup==$p2)  then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: eq_ref_c
rule eq_ref_c when CAA($s:c, $o:i) then SIA sia=new SIA($o, $o); inferrer.infer(sia); end
Rule name: eq_ref_op
rule eq_ref_op when OPAA($s:s, $p:p, $o:o) then SIA sia1=new SIA($s, $s); SIA sia2=new SIA($o, $o); inferrer.infer(sia1, sia2); end
Rule name: eq_diff1
rule eq_diff1 when SIA($x:i1, $y:i2) DIA(i1==$x, i2==$y) then inferrer.inferFalse("EQ_DIFF1", $x.id, $y.id); end
Rule name: eq_rep_s_op
rule eq_rep_s_op when SIA($s:i1, $sp:i2) OPAA(s==$s, $p:p, $o:o) then OPAA opaa=new OPAA($sp, $p, $o); inferrer.infer(opaa); end
Rule name: prp_symp
rule prp_symp when SPA($p:p) OPAA($x:s, p==$p, $y:o) then OPAA opaa=new OPAA($y, $p.id, $x); inferrer.infer(opaa); end
Rule name: scm_avf2_op
rule scm_avf2_op when OAVFCE($c1:ceid, $p1:p, $y:v) OAVFCE($c2:ceid, $p2:p, v==$y) SOPA(sub==$p1, sup==$p2)  then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_eqp2_dp
rule prp_eqp2_dp when EDPA($p1:p1, $p2:p2) DPAA($x:s, p==$p2, $y:o) then DPAA dpaa=new DPAA($x, $p1.id, $y); inferrer.infer(dpaa); end
Rule name: cax_sco
rule cax_sco  when SCA($c1:sub, $c2:sup) CAA(c==$c1, $x:i) then CAA caa=new CAA($c2, $x); inferrer.infer(caa); end
Rule name: eq_rep_o
rule eq_rep_o when SIA($o:i1, $op:i2) OPAA($s:s, $p:p, o==$o) then OPAA opaa=new OPAA($s, $p, $op); inferrer.infer(opaa); end
Rule name: cls_avf
rule cls_avf_op when OAVFCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $v:o) then CAA caa=new CAA($y, $v); inferrer.infer(caa); end
Rule name: scm_svf2_op
rule scm_svf2_op when OSVFCE($c1:ceid, $p1:p, $y:v) OSVFCE($c2:ceid, $p2:p, v==$y) SOPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_ifp
rule prp_ifp_op when IPA($p:p) OPAA($x1:s, p==$p, $y:o) OPAA($x2:s, p==$p, o==$y) then SIA sia=new SIA($x1, $x2); inferrer.infer(sia); end
Rule name: scm_rng2_op
rule scm_rng1_op when ROPA($p:p, $c1:r) SCA(sub==$c1, $c2:sup) then ROPA ropa=new ROPA($p, $c2); inferrer.infer(ropa); end
Rule name: scm_afv1
rule scm_avf1 when OAVFCE($c1:ceid, $p:p, $y1:v) OAVFCE($c2:ceid, p==$p, $y2:v) SCA(sub==$y1, sup==$y2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: scm_int
rule scm_int when OIOCE($c:ceid, $c1:c1) then SCA sca1=new SCA($c, $c1); inferrer.infer(sca1); end
Rule name: scm_sco
rule scm_sco when SCA($c1:sub, $c2:sup) SCA(sub==$c2, $c3:sup) then SCA sca=new SCA($c1, $c3); inferrer.infer(sca); end
Rule name: scm_svf1
rule scm_svf1 when OSVFCE($c1:ceid, $p:p, $y1:v) OSVFCE($c2:ceid, p==$p, $y2:v) SCA(sub==$y1, sup==$y2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: cls_com
rule cls_com when OCOCE($c1:ceid, $c2:c) CAA(c==$c1, $x:i) CAA(c==$c2, i==$x) then inferrer.inferFalse("CLS_COM", $c2, $c2); end
Rule name: eq_rep_s_c
rule eq_rep_s_c when SIA($s:i1, $sp:i2) CAA($c:c, i==$s) then CAA caa=new CAA($c, $sp); inferrer.infer(caa); end
Rule name: prp_asyp
rule prp_asyp when APA($p:p) OPAA($x:s, p==$p, $y:o) OPAA(s==$y, p==$p, o==$x) then inferrer.inferFalse("PRP_ASYP", $x.id, $y.id, $p.id); end
Rule name: cls_maxc1_dp
rule cls_maxc1_dp when DMaxCCE($x:ceid, $p:p, card==0) CAA(c==$x, $u:i) DPAA(s==$u, p==$p, $y:o) then inferrer.inferFalse("CLS_MAXC1", $x, $p.id, $u.id, $y.value); end
Rule name: scm_eqp2_op
rule scm_eqp2_op when SOPA($p1:sub, $p2:sup) SOPA(sub==$p2, sup==$p1) then EOPA eopa=new EOPA($p1, $p2); inferrer.infer(eopa); end
Rule name: eq_trans
rule eq_trans when SIA($s1:i1, $s2:i2) SIA(i1==$s2, $s3:i2) then SIA sia=new SIA($s1, $s3); inferrer.infer(sia); end
Rule name: scm_eqp1_op
rule scm_eqp1_op when EOPA($p1:p1, $p2:p2) then SOPA sopa1=new SOPA($p1.id, $p2.id); SOPA sopa2=new SOPA($p2.id, $p1.id); inferrer.infer(sopa1, sopa2); end
Rule name: scm_eqp2_dp
rule scm_eqp2_dp when SDPA($p1:sub, $p2:sup) SDPA(sub==$p2, sup==$p1) then EDPA edpa=new EDPA($p1, $p2); inferrer.infer(edpa); end
Rule name: cls_int1
rule cls_int1 when OIOCE($x:ceid, $c1:c1) CAA(c==$c1, $y:i) forall ( OIOCE(ceid==$x, $cc:c1) CAA(c==$cc, i==$y)  ) then CAA caa=new CAA($x, $y); inferrer.infer(caa); end
Rule name: cls_hv1_dp
rule cls_hv1_dp when DHVCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) then DPAA dpaa=new DPAA($u, $p.id, $y); inferrer.infer(dpaa); end
Rule name: scm_hv_dp
rule scm_hv_dp when DHVCE($c1:ceid, $p1:p, $i:v) DHVCE($c2:ceid, $p2:p, v==$i) SDPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_dom_dp
rule prp_dom_dp when DDPA($p:p, $c:d) DPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $x); inferrer.infer(caa); end
Rule name: eq_ref_dp
rule eq_ref_dp when DPAA($s:s, $p:p, $o:o) then SIA sia=new SIA($s, $s); inferrer.infer(sia); end
Rule name: cls_hv1_op
rule cls_hv1_op when OHVCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) then OPAA opaa=new OPAA($u, $p.id, $y); inferrer.infer(opaa); end
Rule name: cax_eqc2
rule cax_eqc2 when ECA($c1:c1, $c2:c2) CAA(c==$c2, $x:i) then CAA caa=new CAA($c1, $x); inferrer.infer(caa); end
Rule name: cls_sfv2
rule cls_sfv2 when OSVFCE($x:ceid, $p:p, v=="owl:Thing") OPAA($u:s, p==$p, $v:o) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: scm_op
rule scm_op when OPDA($p:p) then SOPA sopa=new SOPA($p, $p); EOPA eopa=new EOPA($p, $p); inferrer.infer(sopa, eopa); end
Rule name: prp_inv2
rule prp_inv2 when IOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p2, $y:o) then OPAA opaa=new OPAA($y, $p1.id, $x); inferrer.infer(opaa); end
Rule name: scm_dom2_op
rule scm_dom2_op when DOPA($p2:p, $c:d) SOPA($p1:sub, sup==$p2) then DOPA dopa=new DOPA($p1, $c); inferrer.infer(dopa); end
Rule name: rule cls_hv2_op when OHVCE($x:ceid, $p:p, $y:v) OPAA($u:s, p==$p, o==$y) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
rule cls_hv2_dp when DHVCE($x:ceid, $p:p, $y:v) DPAA($u:s, p==$p, o==$y) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: cls_sfv1
rule cls_sfv1_op when OSVFCE($x:ceid, $p:p, $y:v) OPAA($u:s, p==$p, $v:o) CAA(c==$y, i==$v) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: prp_inv1
rule prp_inv1 when IOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($y, $p2.id, $x); inferrer.infer(opaa); end
Rule name: eq_sym
rule eq_sym when SIA($x:i1, $y:i2) then SIA sia=new SIA($y, $x); inferrer.infer(sia); end
Rule name: scm_eqc2
rule scm_eqc2 when SCA($c1:sub, $c2:sup) SCA(sub==$c2, sup==$c1) then ECA eca=new ECA($c1, $c2); inferrer.infer(eca); end
Rule name: scm_rng2_op
rule scm_rng2_op when ROPA($p2:p, $c:r) SOPA($p1:sub, sup==$p2) then ROPA ropa=new ROPA($p1, $c); inferrer.infer(ropa); end
Rule name: scm_eqc1
rule scm_eqc1 when ECA($c1:c1, $c2:c2) then SCA sca1=new SCA($c1, $c2); SCA sca2=new SCA($c2, $c1); inferrer.infer(sca1, sca2); end
Rule name: eq_rep_s_dp
rule eq_rep_s_dp when SIA($s:i1, $sp:i2) DPAA(s==$s, $p:p, $o:o) then DPAA dpaa=new DPAA($sp, $p, $o); inferrer.infer(dpaa); end
Rule name: scm_uni
rule scm_uni when OUOCE($c:ceid, $c1:c1) then SCA sca1=new SCA($c1, $c); inferrer.infer(sca1); end
Rule name: prp_pdw
rule prp_pdw when DJOPA($p1:p1, $p2:p2) OPAA($u:s, p==$p1, $v:o) OPAA($u==s, p==$p2, o==$v)  then inferrer.inferFalse("PRP_PDW", $u.id, $v.id, $p1.id, $p2.id); end
Rule name: prp_eqp1_dp
rule prp_eqp1_dp when EDPA($p1:p1, $p2:p2) DPAA($x:s, p==$p1, $y:o) then DPAA dpaa=new DPAA($x, $p2.id, $y); inferrer.infer(dpaa); end
Rule name: cax_dw
rule cax_dw when DCA($c1:c1, $c2:c2) CAA(c==$c1, $x:i) CAA(c==$c2, i==$x) then inferrer.inferFalse("CAX_DW", $c1, $c2, $x.id); end
Rule name: cls_maxc2
rule cls_maxc2 when OMaxCCE($x:ceid, $p:p, card==1) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $y1:o) OPAA(s==$u, p==$p, $y2:o) then SIA sia=new SIA($y1, $y2); inferrer.infer(sia); end
Rule name: prp_eqp2_op
rule prp_eqp2_op when EOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p2, $y:o) then OPAA opaa=new OPAA($x, $p1.id, $y); inferrer.infer(opaa); end
Rule name: scm_eqp1_dp
rule scm_eqp1_dp when EDPA($p1:p1, $p2:p2) then SDPA sdpa1=new SDPA($p1.id, $p2.id); SDPA sdpa2=new SDPA($p2.id, $p1.id); inferrer.infer(sdpa1, sdpa2); end
Rule name: scm_dp
rule scm_dp when DPDA($p:p) then SDPA sdpa=new SDPA($p, $p); EDPA edpa=new EDPA($p, $p); inferrer.infer(sdpa, edpa); end
Rule name: scm_svf2_dp
rule scm_svf2_dp when DSVFCE($c1:ceid, $p1:p, $y:v) DSVFCE($c2:ceid, $p2:p, v==$y) SDPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: cls_maxc1_op
rule cls_maxc1_op when OMaxCCE($x:ceid, $p:p, card==0) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $y:o) then inferrer.inferFalse("CLS_MAXC1", $x, $p.id, $u.id, $y.id); end
Rule name: prp_spo1_op
rule prp_spo1_op when SOPA($p1:sub, $p2:sup) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($x, $p2, $y); inferrer.infer(opaa); end
Rule name: cls_oo
rule cls_oo when OOOCE($c:ceid, $y1:i1, $y2:i2) then CAA caa1=new CAA($c, $y1); CAA caa2=new CAA($c, $y2); inferrer.infer(caa1, caa2); end
Rule name: scm_hv_op
rule scm_hv_op when OHVCE($c1:ceid, $p1:p, $i:v) OHVCE($c2:ceid, $p2:p, v==$i) SOPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_dom_op
rule prp_dom_op when DOPA($p:p, $c:d) OPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $x); inferrer.infer(caa); end
Rule name: cax_eqc1
rule cax_eqc1 when ECA($c1:c1, $c2:c2) CAA(c==$c1, $x:i) then CAA caa=new CAA($c2, $x); inferrer.infer(caa); end
Rule name: prp_irp
rule prp_irp when IRPA($p:p) OPAA($s:s, p==$p, $x:o) then inferrer.inferFalse("PRP_IRP", $x.id, $p.id); end
Rule name: scm_dom1_op
rule scm_dom1_op when DOPA($p:p, $c1:d) SCA(sub==$c1, $c2:sup) then DOPA dopa=new DOPA($p, $c2); inferrer.infer(dopa); end
Running tests with rule engine Drools
Running test test-table5-prp-eqp1-dp-query...Rule name: test-table5-eqp1-dp-rule
rule "test-table5-eqp1-dp-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("i53"), "hasBMI", new L(new L("23.4", "xsd:double"))); inferrer.infer(dpaa0);  
end
Rule name: test-table5-prp-rng-op-rule
rule "test-table5-prp-rng-op-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i33"), "hasUncle", new I("i34")); inferrer.infer(opaa0);  
end
Rule name: test-table5-eqp2-dp-rule
rule "test-table5-eqp2-dp-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("i56"), "hasBodyMassIndex", new L(new L("23.0", "xsd:double"))); inferrer.infer(dpaa0);  
end
Rule name: test-table5-prp-trp-rule
rule "test-table5-prp-trp-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i45"), "hasSibling", new I("i46")); inferrer.infer(opaa0);  
   OPAA opaa1=new OPAA(new I("i46"), "hasSibling", new I("i47")); inferrer.infer(opaa1);  
end
Rule name: test-table7-cax-eqc2-rule
rule "test-table7-cax-eqc2-rule" 
when 
then 
   CAA caa0=new CAA("Man", new I("i72")); inferrer.infer(caa0);  
end
Rule name: test-table7-cax-eqc1-rule
rule "test-table7-cax-eqc1-rule" 
when 
then 
   CAA caa0=new CAA("Male", new I("i71")); inferrer.infer(caa0);  
end
Rule name: test-table5-prp-eqp1-dp-rule
rule "test-table5-prp-eqp1-dp-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("i51"), "hasBMI", new L(new L("34.0", "xsd:double"))); inferrer.infer(dpaa0);  
end
Rule name: test-table5-pro-spo1-op-rule
rule "test-table5-pro-spo1-op-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i48"), "hasBrother", new I("i49")); inferrer.infer(opaa0);  
end
Rule name: test-table7-cax-dw-rule
rule "test-table7-cax-dw-rule" 
when 
then 
   CAA caa0=new CAA("Male", new I("i73")); inferrer.infer(caa0);  
   CAA caa1=new CAA("Female", new I("i73")); inferrer.infer(caa1);  
end
Rule name: test-table5-spo1-dp-rule
rule "test-table5-spo1-dp-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("i50"), "hasAge", new L(new L("45", "xsd:integer"))); inferrer.infer(dpaa0);  
end
Rule name: test-table5-spo1-op-rule
rule "test-table5-spo1-op-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i50"), "hasBrother", new I("i51")); inferrer.infer(opaa0);  
end
Rule name: test-table5-prp-inv2-rule
rule "test-table5-prp-inv2-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i61"), "drives", new I("i62")); inferrer.infer(opaa0);  
end
Rule name: test-table6-cls-int1-rule
rule "test-table6-cls-int1-rule" 
when 
then 
   CAA caa0=new CAA("TallThing", new I("b1")); inferrer.infer(caa0);  
   CAA caa1=new CAA("SolidThing", new I("b1")); inferrer.infer(caa1);  
end
Rule name: test-table5-prp-irp-rule
rule "test-table5-prp-irp-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i40"), "flowsInto", new I("i40")); inferrer.infer(opaa0);  
end
Rule name: test-table5-prp-inv1-rule
rule "test-table5-prp-inv1-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i59"), "hasDriver", new I("i60")); inferrer.infer(opaa0);  
end
Rule name: test-table6-cls-int2-rule
rule "test-table6-cls-int2-rule" 
when 
then 
   CAA caa0=new CAA("TallSolidBuilding", new I("b2")); inferrer.infer(caa0);  
end
Rule name: test-table4-eq-rep-s-dp-rule
rule "test-table4-eq-rep-s-dp-rule" 
when 
then 
   SIA sia0=new SIA(new I("i14"), new I("i15")); inferrer.infer(sia0);  
   DPAA dpaa1=new DPAA(new I("i14"), "hasAge", new L(new L("44", "xsd:integer"))); inferrer.infer(dpaa1);  
end
Rule name: test-table4-eq-ref-op-rule
rule "test-table4-eq-ref-op-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i2"), "hasSibling", new I("i3")); inferrer.infer(opaa0);  
end
Rule name: test-table7-cax-sco-rule
rule "test-table7-cax-sco-rule" 
when 
then 
   CAA caa0=new CAA("Male", new I("i70")); inferrer.infer(caa0);  
end
Rule name: test-table4-eq-rep-s-c-rule
rule "test-table4-eq-rep-s-c-rule" 
when 
then 
   SIA sia0=new SIA(new I("i9"), new I("i10")); inferrer.infer(sia0);  
   CAA caa1=new CAA("Person", new I("i10")); inferrer.infer(caa1);  
end
Rule name: test-table5-prp-dom-dp-rule
rule "test-table5-prp-dom-dp-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("i32"), "hasBMI", new L(new L("23.4", "xsd:double"))); inferrer.infer(dpaa0);  
end
Rule name: test-table4-eq-sym-rule
rule "test-table4-eq-sym-rule" 
when 
then 
   SIA sia0=new SIA(new I("i4"), new I("i5")); inferrer.infer(sia0);  
end
Rule name: test-table5-eqp2-op-rule
rule "test-table5-eqp2-op-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i54"), "hasPart", new I("i55")); inferrer.infer(opaa0);  
end
Rule name: test-table4-eq-rep-o-op-rule
rule "test-table4-eq-rep-o-op-rule" 
when 
then 
   SIA sia0=new SIA(new I("i17"), new I("i18")); inferrer.infer(sia0);  
   OPAA opaa1=new OPAA(new I("i16"), "hasSibling", new I("i17")); inferrer.infer(opaa1);  
end
Rule name: test-table4-eq-ref-c-rule
rule "test-table4-eq-ref-c-rule" 
when 
then 
   CAA caa0=new CAA("Person", new I("i1")); inferrer.infer(caa0);  
end
Rule name: test-table5-prp-eqp1-op-rule
rule "test-table5-prp-eqp1-op-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i51"), "partOf", new I("i52")); inferrer.infer(opaa0);  
end
Rule name: test-table5-prp-fp-rule
rule "test-table5-prp-fp-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i35"), "hasFather", new I("i36")); inferrer.infer(opaa0);  
   OPAA opaa1=new OPAA(new I("i35"), "hasFather", new I("i37")); inferrer.infer(opaa1);  
end
Rule name: test-table5-prp-ifp-rule
rule "test-table5-prp-ifp-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i38"), "hasPrescription", new I("prescription1")); inferrer.infer(opaa0);  
   OPAA opaa1=new OPAA(new I("i39"), "hasPrescription", new I("prescription1")); inferrer.infer(opaa1);  
end
Rule name: test-table4-eq-trans-rule
rule "test-table4-eq-trans-rule" 
when 
then 
   SIA sia0=new SIA(new I("i6"), new I("i7")); inferrer.infer(sia0);  
   SIA sia1=new SIA(new I("i7"), new I("i8")); inferrer.infer(sia1);  
end
Rule name: test-table4-eq-rep-s-op-rule
rule "test-table4-eq-rep-s-op-rule" 
when 
then 
   SIA sia0=new SIA(new I("i11"), new I("i12")); inferrer.infer(sia0);  
   OPAA opaa1=new OPAA(new I("i11"), "hasSibling", new I("i13")); inferrer.infer(opaa1);  
end
Rule name: test-table5-prp-dom-op-rule
rule "test-table5-prp-dom-op-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i30"), "hasUncle", new I("i31")); inferrer.infer(opaa0);  
end
Rule name: test-table4-eq-ref-dp-rule
rule "test-table4-eq-ref-dp-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("i4"), "hasAge", new L(new L("33", "xsd:integer"))); inferrer.infer(dpaa0);  
end
Rule name: test-table5-prp-symp-rule
rule "test-table5-prp-symp-rule" 
when 
then 
   OPAA opaa0=new OPAA(new I("i41"), "hasSibling", new I("i42")); inferrer.infer(opaa0);  
end
Rule name: test-table6-cls-thing-query
rule "test-table6-cls-thing-query" 
when 
   BAP() from invoker.invoke("test-table6-cls-thing-query", "tbox:isClass", 0, false, new VPATH(), new BAVNs(""), new C("owl:Thing")) 
then 
   invoker.invoke("test-table6-cls-thing-query", "sqwrl:select", 0, true, new C("owl:Thing"));  
end
Rule name: test-table6-cls-int1-query
rule "test-table6-cls-int1-query" 
when 
   CAA(c=="TallSolidBuilding", i.id=="b1") 
then 
   invoker.invoke("test-table6-cls-int1-query", "sqwrl:select", 0, true, new I("b1"));  
end
Rule name: test-table4-eq-ref-op-query
rule "test-table4-eq-ref-op-query" 
when 
   SIA(i1.id=="i2", i2.id=="i2") 
   SIA(i1.id=="i3", i2.id=="i3") 
then 
   invoker.invoke("test-table4-eq-ref-op-query", "sqwrl:select", 0, true, new I("i2"), new I("i3"));  
end
Rule name: test-table6-cls-uni-query
rule "test-table6-cls-uni-query" 
when 
   CAA(c=="Fruit", i.id=="sf") 
then 
   invoker.invoke("test-table6-cls-uni-query", "sqwrl:select", 0, true, new I("sf"));  
end
Rule name: test-table4-eq-ref-dp-query
rule "test-table4-eq-ref-dp-query" 
when 
   SIA(i1.id=="i4", i2.id=="i4") 
then 
   invoker.invoke("test-table4-eq-ref-dp-query", "sqwrl:select", 0, true, new I("i4"));  
end
Rule name: test-table5-prp-inv2-query
rule "test-table5-prp-inv2-query" 
when 
   OPAA(s.id=="i62", p.id=="hasDriver", o.id=="i61") 
then 
   invoker.invoke("test-table5-prp-inv2-query", "sqwrl:select", 0, true, new I("i62"), new I("i61"));  
end
Rule name: test-table4-eq-rep-s-op-query
rule "test-table4-eq-rep-s-op-query" 
when 
   OPAA(s.id=="i12", p.id=="hasSibling", o.id=="i13") 
then 
   invoker.invoke("test-table4-eq-rep-s-op-query", "sqwrl:select", 0, true, new I("i12"), new I("i13"));  
end
Rule name: test-table7-cax-sco-query
rule "test-table7-cax-sco-query" 
when 
   CAA(c=="Person", i.id=="i70") 
then 
   invoker.invoke("test-table7-cax-sco-query", "sqwrl:select", 0, true, new I("i70"));  
end
Rule name: test-table5-prp-dom-op-query
rule "test-table5-prp-dom-op-query" 
when 
   CAA(c=="Person", i.id=="i30") 
then 
   invoker.invoke("test-table5-prp-dom-op-query", "sqwrl:select", 0, true, new I("i30"));  
end
Rule name: test-table4-eq-rep-s-c-query
rule "test-table4-eq-rep-s-c-query" 
when 
   CAA(c=="Person", i.id=="i9") 
then 
   invoker.invoke("test-table4-eq-rep-s-c-query", "sqwrl:select", 0, true, new I("i9"));  
end
Rule name: test-table5-prp-fp-query
rule "test-table5-prp-fp-query" 
when 
   SIA(i1.id=="i36", i2.id=="i37") 
then 
   invoker.invoke("test-table5-prp-fp-query", "sqwrl:select", 0, true, new I("i36"), new I("i37"));  
end
Rule name: test-table4-eq-rep-s-dp-query
rule "test-table4-eq-rep-s-dp-query" 
when 
   DPAA(s.id=="i15", p.id=="hasAge", o==new L("44", "xsd:integer")) 
then 
   invoker.invoke("test-table4-eq-rep-s-dp-query", "sqwrl:select", 0, true, new I("i15"), new L("44", "xsd:integer"));  
end
Rule name: test-table4-eq-trans-query
rule "test-table4-eq-trans-query" 
when 
   SIA(i1.id=="i6", i2.id=="i8") 
then 
   invoker.invoke("test-table4-eq-trans-query", "sqwrl:select", 0, true, new I("i6"), new I("i8"));  
end
Rule name: test-table5-eqp1-dp-query
rule "test-table5-eqp1-dp-query" 
when 
   DPAA(s.id=="i53", p.id=="hasBodyMassIndex", o==new L("23.4", "xsd:double")) 
then 
   invoker.invoke("test-table5-eqp1-dp-query", "sqwrl:select", 0, true, new I("i53"), new L("23.0", "xsd:double"));  
end
Rule name: test-table7-cax-eqc1-query
rule "test-table7-cax-eqc1-query" 
when 
   CAA(c=="Man", i.id=="i71") 
then 
   invoker.invoke("test-table7-cax-eqc1-query", "sqwrl:select", 0, true, new I("i71"));  
end
Rule name: test-table4-eq-sym-query
rule "test-table4-eq-sym-query" 
when 
   SIA(i1.id=="i5", i2.id=="i4") 
then 
   invoker.invoke("test-table4-eq-sym-query", "sqwrl:select", 0, true, new I("i5"), new I("i4"));  
end
Rule name: test-table5-prp-ifp-query
rule "test-table5-prp-ifp-query" 
when 
   SIA(i1.id=="i38", i2.id=="i39") 
then 
   invoker.invoke("test-table5-prp-ifp-query", "sqwrl:select", 0, true, new I("i38"), new I("i39"));  
end
Rule name: test-table6-cls-nothing-query
rule "test-table6-cls-nothing-query" 
when 
   BAP() from invoker.invoke("test-table6-cls-nothing-query", "tbox:isClass", 0, false, new VPATH(), new BAVNs(""), new C("owl:Nothing")) 
then 
   invoker.invoke("test-table6-cls-nothing-query", "sqwrl:select", 0, true, new C("owl:Nothing"));  
end
Rule name: test-table4-eq-ref-c-query
rule "test-table4-eq-ref-c-query" 
when 
   SIA(i1.id=="i1", i2.id=="i1") 
then 
   invoker.invoke("test-table4-eq-ref-c-query", "sqwrl:select", 0, true, new I("i1"));  
end
Rule name: test-table5-prp-symp-query
rule "test-table5-prp-symp-query" 
when 
   OPAA(s.id=="i42", p.id=="hasSibling", o.id=="i41") 
then 
   invoker.invoke("test-table5-prp-symp-query", "sqwrl:select", 0, true, new I("i42"), new I("i41"));  
end
Rule name: test-table5-prp-eqp1-dp-query
rule "test-table5-prp-eqp1-dp-query" 
when 
   DPAA(s.id=="i51", p.id=="hasBodyMassIndex", o==new L("34.0", "xsd:double")) 
then 
   invoker.invoke("test-table5-prp-eqp1-dp-query", "sqwrl:select", 0, true, new I("i51"), new L("34.0", "xsd:double"));  
end
Rule name: test-table5-spo1-op-query
rule "test-table5-spo1-op-query" 
when 
   OPAA(s.id=="i50", p.id=="hasSibling", o.id=="i51") 
then 
   invoker.invoke("test-table5-spo1-op-query", "sqwrl:select", 0, true, new I("i50"), new I("i51"));  
end
Rule name: test-table5-prp-rng-op-query
rule "test-table5-prp-rng-op-query" 
when 
   CAA(c=="Male", i.id=="i34") 
then 
   invoker.invoke("test-table5-prp-rng-op-query", "sqwrl:select", 0, true, new I("i34"));  
end
Rule name: test-table5-prp-trp-query
rule "test-table5-prp-trp-query" 
when 
   OPAA(s.id=="i45", p.id=="hasSibling", o.id=="i47") 
then 
   invoker.invoke("test-table5-prp-trp-query", "sqwrl:select", 0, true, new I("i45"), new I("i47"));  
end
Rule name: test-table4-eq-rep-o-op-query
rule "test-table4-eq-rep-o-op-query" 
when 
   OPAA(s.id=="i16", p.id=="hasSibling", o.id=="i18") 
then 
   invoker.invoke("test-table4-eq-rep-o-op-query", "sqwrl:select", 0, true, new I("i16"), new I("i18"));  
end
Rule name: test-table5-prp-inv1-query
rule "test-table5-prp-inv1-query" 
when 
   OPAA(s.id=="i60", p.id=="drives", o.id=="i59") 
then 
   invoker.invoke("test-table5-prp-inv1-query", "sqwrl:select", 0, true, new I("i60"), new I("i59"));  
end
Rule name: test-table5-spo1-dp-query
rule "test-table5-spo1-dp-query" 
when 
   DPAA(s.id=="i50", p.id=="hasMeasurement", o==new L("45", "xsd:integer")) 
then 
   invoker.invoke("test-table5-spo1-dp-query", "sqwrl:select", 0, true, new I("i50"), new L("45", "xsd:integer"));  
end
Rule name: test-table5-eqp2-op-query
rule "test-table5-eqp2-op-query" 
when 
   OPAA(s.id=="i54", p.id=="partOf", o.id=="i55") 
then 
   invoker.invoke("test-table5-eqp2-op-query", "sqwrl:select", 0, true, new I("i54"), new I("i55"));  
end
Rule name: test-table5-prp-eqp1-op-query
rule "test-table5-prp-eqp1-op-query" 
when 
   OPAA(s.id=="i51", p.id=="hasPart", o.id=="i52") 
then 
   invoker.invoke("test-table5-prp-eqp1-op-query", "sqwrl:select", 0, true, new I("i51"), new I("i52"));  
end
Rule name: test-table5-pro-spo1-op-query
rule "test-table5-pro-spo1-op-query" 
when 
   OPAA(s.id=="i48", p.id=="hasSibling", o.id=="i49") 
then 
   invoker.invoke("test-table5-pro-spo1-op-query", "sqwrl:select", 0, true, new I("i48"), new I("i49"));  
end
Rule name: test-table5-prp-dom-dp-query
rule "test-table5-prp-dom-dp-query" 
when 
   CAA(c=="Person", i.id=="i32") 
then 
   invoker.invoke("test-table5-prp-dom-dp-query", "sqwrl:select", 0, true, new I("i32"));  
end
Rule name: test-table5-eqp2-dp-query
rule "test-table5-eqp2-dp-query" 
when 
   DPAA(s.id=="i56", p.id=="hasBMI", o==new L("23.0", "xsd:double")) 
then 
   invoker.invoke("test-table5-eqp2-dp-query", "sqwrl:select", 0, true, new I("i56"), new L("23.0", "xsd:double"));  
end
Rule name: test-table6-cls-int2-query
rule "test-table6-cls-int2-query" 
when 
   CAA(c=="Building", i.id=="b2") 
then 
   invoker.invoke("test-table6-cls-int2-query", "sqwrl:select", 0, true, new I("b2"));  
end
Rule name: test-table7-cax-eqc2-query
rule "test-table7-cax-eqc2-query" 
when 
   CAA(c=="Male", i.id=="i72") 
then 
   invoker.invoke("test-table7-cax-eqc2-query", "sqwrl:select", 0, true, new I("i72"));  
end
PASSED
Running test test-table5-prp-dom-op-query...PASSED
Running test test-table5-prp-dom-dp-query...PASSED
Running test test-table5-prp-fp-query...PASSED
Running test test-table7-cax-eqc2-query...PASSED
Running test test-table4-eq-ref-op-query...PASSED
Running test test-table6-cls-int2-query...PASSED
Running test test-table4-eq-rep-s-c-query...PASSED
Running test test-table5-prp-inv1-query...PASSED
Running test test-table4-eq-ref-dp-query...PASSED
Running test test-table6-cls-int1-query...PASSED
Running test test-table5-prp-rng-op-query...PASSED
Running test test-table5-spo1-op-query...PASSED
Running test test-table6-cls-nothing-query...PASSED
Running test test-table5-pro-spo1-op-query...PASSED
Running test test-table5-prp-symp-query...PASSED
Running test test-table5-prp-ifp-query...PASSED
Running test test-table5-eqp2-op-query...PASSED
Running test test-table6-cls-uni-query...PASSED
Running test test-table4-eq-sym-query...PASSED
Running test test-table5-prp-inv2-query...PASSED
Running test test-table5-eqp2-dp-query...PASSED
Running test test-table5-prp-eqp1-op-query...PASSED
Running test test-table5-prp-trp-query...PASSED
Running test test-table4-eq-rep-s-op-query...PASSED
Running test test-table4-eq-trans-query...PASSED
Running test test-table7-cax-sco-query...PASSED
Running test test-table7-cax-eqc1-query...PASSED
Running test test-table5-spo1-dp-query...PASSED
Running test test-table4-eq-ref-c-query...PASSED
Running test test-table5-eqp1-dp-query...PASSED
Running test test-table4-eq-rep-o-op-query...PASSED
Running test test-table4-eq-rep-s-dp-query...PASSED
Running test test-table6-cls-thing-query...PASSED
Number of tests: 34
Passed 34 test(s)!
