Running tests with rule engine Drools
Running test AlphabeticallySecondAndThirdNamesWithSetSlice...Axiom: DDPA(hasManufactureDate, CEID0)
Axiom: CDA(swrlxml:XMLElement2PropertyValueMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_SCO)
Axiom: OPAA(F1, hasCar, BMW)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_INV2)
Axiom: DPDA(hasAmount)
Axiom: RDPA(swrlxml:hasSuperClassName, xsd:string)
Axiom: DPAA(t3, temporal:hasFinishTime, L("2009-08-20T00:00:00.0", xsd:dateTime))
Axiom: OPAA(sale2, temporal:hasGranularity, temporal:Days)
Axiom: DDPA(temporal:hasCount, temporal:Duration)
Axiom: CAA(temporal:Granularity, temporal:Milliseconds)
Axiom: DPAA(F1, hasManufactureDate, L("1999-12-12", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXC2)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_FP)
Axiom: OPAA(t5, temporal:hasGranularity, temporal:Hours)
Axiom: DPDA(swrlxml:hasDefiningClassName)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_THING)
Axiom: DOPA(swrlxml:hasMappedIndividuals, swrlxml:XMLElement)
Axiom: OPDA(swrlxml:hasSubElements)
Axiom: DDPA(swrlxml:hasName, CEID1)
Axiom: OPAA(F1, hasTreatment, t6)
Axiom: SCA(swrlxml:XMLElementDataPropertyMap, swrlxml:XMLElement2PropertyMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_HV)
Axiom: SCA(Square, Shape)
Axiom: DOPA(protege:FROM, protege:DIRECTED-BINARY-RELATION)
Axiom: DOPA(swrlxml:hasRootElement, swrlxml:XMLDocument)
Axiom: CDA(swrlxml:XMLElementObjectPropertyMap)
Axiom: OPAA(F2, hasCar, BMW)
Axiom: OPAA(F2, hasTreatment, t2)
Axiom: FDPA(hasDescription)
Axiom: CDA(swrlxml:XMLElement2ClassMap)
Axiom: FOPA(swrlxml:hasRootElement)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_TRP)
Axiom: FDPA(swrla:isRuleEnabled)
Axiom: CAA(temporal:ValidPeriod, vp1)
Axiom: CDA(temporal:ValidTime)
Axiom: RDPA(swrlxml:hasPropertyName, xsd:string)
Axiom: FDPA(temporal:hasTime)
Axiom: CDA(Sale)
Axiom: DPDA(hasManufactureDatetime)
Axiom: OPAA(t5, hasDrug, DDI)
Axiom: DPDA(swrlxml:hasSuperClassName)
Axiom: SCA(swrlxml:XMLAttribute2InstanceMap, swrlxml:XMLAttributeMap)
Axiom: CDA(http://swrl.stanford.edu/3.4.4/SQWRLExamples.owl#Triangle)
Axiom: OPDA(swrlxml:hasElements)
Axiom: ROPA(swrlxml:hasAttributes, swrlxml:XMLAttribute)
Axiom: DPAA(t2, temporal:hasStartTime, L("2008-02-25T00:00:00.0", xsd:dateTime))
Axiom: OPDA(hasCar)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_REP_O)
Axiom: DIA(F3, F2)
Axiom: DIA(F3, F1)
Axiom: DIA(F2, F3)
Axiom: DIA(F2, F1)
Axiom: DIA(F1, F3)
Axiom: DIA(F1, F2)
Axiom: SCA(swrlxml:XMLAttribute2ObjectPropertyPropertyValueMap, swrlxml:XMLAttribute2ObjectPropertyValueMap)
Axiom: DPDA(swrlxml:hasKeyAttributePrefix)
Axiom: DDPA(swrla:isRuleEnabled, swrl:Imp)
Axiom: DDPA(swrlxml:hasNamespace, swrlxml:XMLDocumentMap)
Axiom: DPAA(vi2, temporal:hasTime, L("2007-10-15T00:00:00.0", xsd:dateTime))
Axiom: CDA(http://swrl.stanford.edu/3.4.4/SQWRLExamples.owl#Person)
Axiom: FDPA(swrlxml:hasSuperPropertyName)
Axiom: DPAA(BMW, hasManufactureDate, L("2000-06-08", xsd:date))
Axiom: FDPA(swrla:isRuleGroupEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_OP)
Axiom: FDPA(hasName)
Axiom: OPAA(sale1, hasProduct, Honda)
Axiom: OPAA(sale1, hasState, NV)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_KEY)
Axiom: CDA(swrlxml:XMLElement2DataPropertyValueMap)
Axiom: DPDA(rdfs:comment)
Axiom: DPAA(t2, temporal:hasFinishTime, L("2008-04-28T00:00:00.0", xsd:dateTime))
Axiom: DDPA(hasDescription, Car)
Axiom: CDA(swrlxml:XMLDocumentMap)
Axiom: CAA(temporal:Granularity, temporal:Months)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_HV1)
Axiom: DPAA(t3, temporal:hasStartTime, L("2008-12-19T00:00:00.0", xsd:dateTime))
Axiom: DPAA(Treatment_2, hasDose, L(33.0, xsd:double))
Axiom: DOPA(hasProduct, Sale)
Axiom: SCA(swrlxml:XMLElementMap, swrlxml:XMLMap)
Axiom: DDPA(hasManufactureTime, CEID0)
Axiom: RDPA(hasManufactureDate, xsd:date)
Axiom: SCA(swrlxml:XMLElementObjectPropertyMap, swrlxml:XMLElement2PropertyMap)
Axiom: DPAA(F2, hasName, L("Batty", xsd:string))
Axiom: DPAA(sale3, hasAmount, L(67675.0, xsd:double))
Axiom: OPDA(temporal:hasGranularity)
Axiom: DPDA(protege:PAL-DESCRIPTION)
Axiom: CAA(temporal:Granularity, temporal:Minutes)
Axiom: SCA(Person, owl:Thing)
Axiom: OPAA(F1, hasSales, sale3)
Axiom: FOPA(hasState)
Axiom: CDA(Female)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_SVF2)
Axiom: DDPA(swrlxml:hasPropertyName, CEID2)
Axiom: FDPA(swrla:isOWL2RLRuleEnabled)
Axiom: DPAA(F3, hasManufactureDate, L("1999-12-12", xsd:string))
Axiom: ROPA(swrlxml:hasElement2PropertyValueMaps, swrlxml:XMLElement2PropertyValueMap)
Axiom: DPDA(hasManufactureTime)
Axiom: DDPA(swrla:isRuleGroupEnabled, swrla:RuleGroup)
Axiom: CAA(Sale, sale2)
Axiom: CDA(temporal:Entity)
Axiom: SCA(temporal:Duration, temporal:Entity)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_REF)
Axiom: FDPA(swrlxml:hasNamespace)
Axiom: DPAA(t1, temporal:hasStartTime, L("2007-05-15T00:00:00.0", xsd:dateTime))
Axiom: RDPA(swrlxml:hasDefiningClassName, xsd:string)
Axiom: OPAA(F1, hasCar, Porsche)
Axiom: CAA(Treatment, t6)
Axiom: CDA(Square)
Axiom: CAA(Treatment, Treatment_1)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_EQ)
Axiom: CDA(swrlxml:XMLAttribute2ObjectPropertyInstanceValueMap)
Axiom: SCA(swrlxml:XMLDocumentMap, swrlxml:XMLMap)
Axiom: CDA(Product)
Axiom: CDA(swrlxml:XMLElement2ObjectPropertyInstanceValueMap)
Axiom: RDPA(swrlxml:hasNamespace, xsd:string)
Axiom: DPAA(F1, hasName, L("Anne", xsd:string))
Axiom: CAA(State, FL)
Axiom: FOPA(hasDrug)
Axiom: ROPA(swrlxml:hasAttribute2PropertyValueMaps, swrlxml:XMLAttribute2PropertyValueMap)
Axiom: DPDA(swrlxml:hasName)
Axiom: SCA(swrlxml:XMLAttribute2ObjectPropertyMap, swrlxml:XMLAttribute2PropertyMap)
Axiom: DPDA(hasAnyTypeProperty)
Axiom: DOPA(hasCar, Person)
Axiom: CAA(temporal:ValidInstant, vi1)
Axiom: CAA(temporal:Granularity, temporal:Hours)
Axiom: DPDA(swrlxml:hasContent)
Axiom: SCA(swrlxml:XMLElement2ObjectPropertyValueMap, swrlxml:XMLElement2PropertyValueMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXQC3)
Axiom: CAA(Female, F1)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_AVF2)
Axiom: DPDA(swrlxml:hasClassName)
Axiom: RDPA(swrlxml:hasClassName, xsd:string)
Axiom: DOPA(swrlxml:hasElementMaps, swrlxml:XMLDocumentMap)
Axiom: FDPA(swrlxml:hasElementName)
Axiom: FDPA(swrlxml:hasAttributeName)
Axiom: CAA(Car, Suzuki)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_INT1)
Axiom: FDPA(swrlxml:hasPropertyName)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_UNI)
Axiom: RDPA(temporal:hasTime, xsd:dateTime)
Axiom: ROPA(swrlxml:hasSubElements, swrlxml:XMLElement)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXC1)
Axiom: SCA(Circle, Shape)
Axiom: DDPA(swrlxml:hasClassName, CEID3)
Axiom: FDPA(swrlxml:hasXSDType)
Axiom: SCA(swrlxml:XMLElement2ObjectPropertyInstanceValueMap, swrlxml:XMLElement2ObjectPropertyValueMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_COM)
Axiom: CDA(Shape)
Axiom: RDPA(swrla:isRuleEnabled, xsd:boolean)
Axiom: OPAA(Treatment_1, hasDrug, AZT)
Axiom: CAA(Sale, sale4)
Axiom: CDA(swrlxml:XMLAttribute2InstanceMap)
Axiom: RDPA(swrlxml:hasTargetClassPrefix, xsd:string)
Axiom: DPAA(Treatment_1, hasDose, L(7.4, xsd:double))
Axiom: CDA(swrlxml:XMLAttribute2ObjectPropertyValueMap)
Axiom: DDPA(swrlxml:hasKeyAttributePrefix, swrlxml:XMLElement2ObjectPropertyInstanceValueMap)
Axiom: DPAA(t5, temporal:hasFinishTime, L("2009-12-30T00:00:00.0", xsd:dateTime))
Axiom: CAA(temporal:Granularity, temporal:Days)
Axiom: FDPA(hasManufactureTime)
Axiom: DDPA(swrlxml:hasXSDType, CEID4)
Axiom: SCA(Sale, owl:Thing)
Axiom: DPDA(swrla:hasBuiltInPhrase)
Axiom: DPDA(swrla:hasBuiltInPhrase)
Axiom: DOPA(swrlxml:hasSubElements, swrlxml:XMLElement)
Axiom: CDA(swrlxml:XMLElement2PropertyMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_DIFF1)
Axiom: RDPA(hasNumberOfTreatments, xsd:int)
Axiom: DPDA(swrla:hasPropertyPhrase)
Axiom: DPDA(swrla:hasPropertyPhrase)
Axiom: FDPA(hasAge)
Axiom: SCA(Car, Product)
Axiom: RDPA(hasManufactureTime, xsd:time)
Axiom: SCA(swrlxml:XMLAttribute2ClassMap, swrlxml:XMLAttributeMap)
Axiom: SCA(http://swrl.stanford.edu/3.4.4/SQWRLExamples.owl#Triangle, http://swrl.stanford.edu/3.4.4/SQWRLExamples.owl#Shape)
Axiom: FDPA(swrlxml:hasName)
Axiom: OPAA(t3, temporal:hasGranularity, temporal:Minutes)
Axiom: CDA(swrlxml:XMLAttribute2ClassMap)
Axiom: RDPA(swrlxml:hasName, xsd:string)
Axiom: RDPA(hasRadius, xsd:double)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_DOM2)
Axiom: OPAA(Treatment_1, temporal:hasGranularity, temporal:Seconds)
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_DW)
Axiom: DPAA(F3, hasDOB, L("1992-06-25", xsd:date))
Axiom: CDA(Drug)
Axiom: RDPA(swrla:isOWL2RLRuleEnabled, xsd:boolean)
Axiom: RDPA(rdfs:comment, xsd:string)
Axiom: SCA(http://swrl.stanford.edu/3.4.4/SQWRLExamples.owl#Male, http://swrl.stanford.edu/3.4.4/SQWRLExamples.owl#Person)
Axiom: CDA(swrlxml:XMLAttribute2ObjectPropertyMap)
Axiom: SCA(swrlxml:XMLAttribute2ObjectPropertyValueMap, swrlxml:XMLAttribute2PropertyValueMap)
Axiom: FDPA(swrlxml:hasKeyAttributeName)
Axiom: ROPA(hasSales, Sale)
Axiom: CDA(swrlxml:XMLElement2ObjectPropertyPropertyValueMap)
Axiom: FDPA(swrlxml:hasClassName)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_AP)
Axiom: CDA(swrlxml:XMLAttribute)
Axiom: SCA(temporal:Proposition, temporal:Entity)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_IFP)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_NOTHING2)
Axiom: FDPA(swrlxml:hasContent)
Axiom: DPAA(sale2, temporal:hasTime, L("2009-10-21T00:00:00.0", xsd:dateTime))
Axiom: OPAA(F2, hasTreatment, Treatment_1)
Axiom: CDA(swrlxml:XMLAttribute2PropertyMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_SPO)
Axiom: OPAA(t1, hasDrug, DDI)
Axiom: OPAA(t4, temporal:hasGranularity, temporal:Days)
Axiom: OPDA(swrlxml:hasAttribute2PropertyValueMaps)
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_EQC1)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_NOT_TYPE)
Axiom: DDPA(protege:PAL-RANGE, protege:PAL-CONSTRAINT)
Axiom: DPAA(F2, hasManufactureDate, L("1999-12-12", xsd:string))
Axiom: OPAA(t6, hasDrug, DDI)
Axiom: DDPA(swrlxml:hasNamespaceURI, CEID1)
Axiom: FDPA(swrlxml:hasNamespacePrefix)
Axiom: FDPA(hasManufactureDate)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_AVF)
Axiom: RDPA(hasDescription, xsd:string)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_SFV2)
Axiom: DPDA(swrlxml:hasValue)
Axiom: SCA(Adult, Person)
Axiom: DPDA(protege:PAL-NAME)
Axiom: CDA(temporal:ExtendedProposition)
Axiom: OPDA(swrlxml:hasAttributeMaps)
Axiom: CDA(swrlxml:Entity)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_EQC1)
Axiom: OPAA(vp1, temporal:hasGranularity, temporal:Seconds)
Axiom: DPDA(swrlxml:hasAttributePrefix)
Axiom: OPDA(hasProduct)
Axiom: DPAA(F3, hasAge, L(7, xsd:integer))
Axiom: DDPA(hasAnyTypeProperty, Shape)
Axiom: CDA(swrl:Imp)
Axiom: SCA(Sale, temporal:ValidInstant)
Axiom: OPDA(protege:TO)
Axiom: OPAA(F3, hasCar, Suzuki)
Axiom: OPDA(swrlxml:hasRootElement)
Axiom: OPDA(hasDrug)
Axiom: CAA(Car, Porsche)
Axiom: RDPA(temporal:hasStartTime, xsd:dateTime)
Axiom: SCA(temporal:ValidPeriod, temporal:ValidTime)
Axiom: DOPA(hasState, Sale)
Axiom: RDPA(swrlxml:hasNamespaceURI, xsd:string)
Axiom: CAA(Drug, DDI)
Axiom: DDPA(swrlxml:hasValue, swrlxml:XMLAttribute)
Axiom: FDPA(temporal:hasStartTime)
Axiom: DPAA(Honda, hasManufactureTime, L("09:09:09", xsd:time))
Axiom: DPAA(sale4, temporal:hasTime, L("2009-09-21T00:00:00.0", xsd:dateTime))
Axiom: DDPA(swrlxml:hasAttributePrefix, swrlxml:XMLAttributeMap)
Axiom: DPAA(t6, temporal:hasFinishTime, L("2009-11-28T00:00:00.0", xsd:dateTime))
Axiom: CAA(Treatment, t3)
Axiom: ROPA(temporal:hasValidTime, temporal:ValidTime)
Axiom: DPAA(vp1, temporal:hasStartTime, L("2007-08-15T00:00:00.0", xsd:dateTime))
Axiom: SCA(swrlxml:XMLElement, swrlxml:Entity)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_SCO)
Axiom: RDPA(swrlxml:hasElementName, xsd:string)
Axiom: OPDA(swrlxml:hasAttributes)
Axiom: DDPA(hasDose, Treatment)
Axiom: OPAA(sale2, hasState, NY)
Axiom: CDA(owl:Thing)
Axiom: DOPA(hasTreatment, Person)
Axiom: CAA(Treatment, Treatment_2)
Axiom: OPAA(vi2, temporal:hasGranularity, temporal:Minutes)
Axiom: FDPA(swrlxml:hasSuperClassName)
Axiom: DPAA(BMW, hasDescription, L("This is a fast car.", xsd:string))
Axiom: DPAA(sale2, hasAmount, L(786868.0, xsd:double))
Axiom: CAA(Sale, sale1)
Axiom: DPDA(temporal:hasCount)
Axiom: DDPA(protege:PAL-NAME, protege:PAL-CONSTRAINT)
Axiom: DPDA(swrla:hasRuleCategory)
Axiom: SCA(swrlxml:XMLAttribute2ObjectPropertyInstanceValueMap, swrlxml:XMLAttribute2ObjectPropertyValueMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_NPA2)
Axiom: CAA(temporal:Granularity, temporal:Seconds)
Axiom: DPAA(t5, temporal:hasStartTime, L("2009-01-30T00:00:00.0", xsd:dateTime))
Axiom: CAA(Car, Honda)
Axiom: FDPA(hasRadius)
Axiom: DPDA(hasName)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_UNI)
Axiom: CDA(temporal:Proposition)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_TRANS)
Axiom: DDPA(swrlxml:hasSuperPropertyName, CEID5)
Axiom: CDA(temporal:Duration)
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_ADC)
Axiom: CDA(swrlxml:XMLAttribute2PropertyValueMap)
Axiom: SCA(swrla:RuleGroup, swrla:Entity)
Axiom: DPDA(swrlxml:hasSuperPropertyName)
Axiom: DPAA(t1, temporal:hasFinishTime, L("2007-06-15T00:00:00.0", xsd:dateTime))
Axiom: OPDA(swrla:hasRuleGroup)
Axiom: DPDA(swrla:hasRuleGroup)
Axiom: DPDA(temporal:hasStartTime)
Axiom: OPDA(hasState)
Axiom: DPAA(t4, temporal:hasStartTime, L("2009-10-29T00:00:00.0", xsd:dateTime))
Axiom: OPAA(sale3, hasProduct, BMW)
Axiom: CAA(Car, Beemer)
Axiom: SCA(temporal:ValidTime, temporal:Entity)
Axiom: CDA(swrlxml:XMLElement2ObjectPropertyValueMap)
Axiom: OPAA(t3, hasDrug, DDI)
Axiom: DPAA(F1, hasAge, L(77, xsd:integer))
Axiom: RDPA(temporal:hasFinishTime, xsd:dateTime)
Axiom: RDPA(swrlxml:hasAttributeName, xsd:string)
Axiom: SCA(swrlxml:XMLAttribute2DataPropertyMap, swrlxml:XMLAttribute2PropertyMap)
Axiom: FDPA(swrlxml:hasAttributePrefix)
Axiom: RDPA(hasDOB, xsd:date)
Axiom: CDA(swrlxml:XMLAttribute2DataPropertyMap)
Axiom: DDPA(protege:PAL-DESCRIPTION, protege:PAL-CONSTRAINT)
Axiom: DPAA(t4, hasDose, L(7.4, xsd:double))
Axiom: RDPA(hasCode, xsd:string)
Axiom: DDPA(hasRadius, Circle)
Axiom: OPAA(t1, temporal:hasGranularity, temporal:Days)
Axiom: SCA(Treatment, owl:Thing)
Axiom: RDPA(swrlxml:hasAttributePrefix, xsd:string)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_IRP)
Axiom: ROPA(swrlxml:hasElements, swrlxml:XMLElement)
Axiom: ROPA(swrlxml:hasAttributeMaps, swrlxml:XMLAttributeMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_SVF1)
Axiom: FDPA(swrlxml:hasKeyAttributePrefix)
Axiom: CDA(Adult)
Axiom: CDA(protege:PAL-CONSTRAINT)
Axiom: RDPA(hasAge, xsd:int)
Axiom: OPDA(swrlxml:hasElementMaps)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXQC4)
Axiom: CAA(temporal:ValidInstant, vi2)
Axiom: DPAA(t5, hasDose, L(9.0, xsd:double))
Axiom: OPDA(hasTreatment)
Axiom: SCA(swrlxml:XMLAttribute2DataPropertyValueMap, swrlxml:XMLAttribute2PropertyValueMap)
Axiom: DPDA(swrlxml:hasKeyPropertyName)
Axiom: FOPA(temporal:hasGranularity)
Axiom: OPDA(temporal:hasValidTime)
Axiom: CAA(Female, F3)
Axiom: DDPA(temporal:hasStartTime, temporal:ValidPeriod)
Axiom: DPAA(t6, temporal:hasStartTime, L("2009-01-28T00:00:00.0", xsd:dateTime))
Axiom: OPAA(F3, hasCar, Honda)
Axiom: CAA(State, SD)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_REP_P)
Axiom: SCA(swrlxml:XMLElement2ObjectPropertyPropertyValueMap, swrlxml:XMLElement2ObjectPropertyValueMap)
Axiom: DPDA(hasDescription)
Axiom: CDA(swrlxml:XMLAttribute2ObjectPropertyPropertyValueMap)
Axiom: OPDA(hasSales)
Axiom: RDPA(swrlxml:hasKeyAttributeName, xsd:string)
Axiom: DDPA(swrlxml:hasKeyPropertyName, swrlxml:XMLElement2ObjectPropertyInstanceValueMap)
Axiom: DPAA(Honda, hasManufactureDate, L("2004-11-08", xsd:date))
Axiom: DPDA(swrlxml:hasNamespaceURI)
Axiom: OPAA(t6, temporal:hasGranularity, temporal:Seconds)
Axiom: DOPA(hasDrug, Treatment)
Axiom: CDA(temporal:ValidPeriod)
Axiom: DOPA(protege:SLOT-CONSTRAINTS, owl:Thing)
Axiom: OPAA(sale3, hasState, FL)
Axiom: OPDA(swrlxml:hasMappedIndividuals)
Axiom: DPDA(swrla:hasClassPhrase)
Axiom: SCA(swrla:OWL2RLRule, swrla:Entity)
Axiom: DPDA(swrla:hasClassPhrase)
Axiom: CDA(swrlxml:XMLMap)
Axiom: CDA(Car)
Axiom: DPAA(F2, hasDOB, L("1977-03-25", xsd:date))
Axiom: DPDA(swrlxml:hasNamespace)
Axiom: CAA(Treatment, t5)
Axiom: DOPA(temporal:hasGranularity, CEID6)
Axiom: DPDA(swrlxml:hasNamespacePrefix)
Axiom: DOPA(hasSales, Person)
Axiom: DPAA(t1, hasDose, L(3.0, xsd:double))
Axiom: RDPA(swrlxml:hasNamespacePrefix, xsd:string)
Axiom: SCA(temporal:ValidInstant, temporal:ValidTime)
Axiom: OPAA(F1, hasTreatment, t5)
Axiom: OPAA(F2, hasTreatment, t4)
Axiom: SCA(temporal:Granularity, temporal:Entity)
Axiom: SCA(swrlxml:XMLElement2ObjectPropertyClassValueMap, swrlxml:XMLElement2ObjectPropertyValueMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_CLS)
Axiom: DOPA(swrla:hasRuleGroup, swrl:Imp)
Axiom: SCA(Female, Person)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_RNG2)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_ADP)
Axiom: CAA(State, NY)
Axiom: DPAA(t4, temporal:hasFinishTime, L("2009-11-28T00:00:00.0", xsd:dateTime))
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_ASYP)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_DIFF3)
Axiom: OPAA(sale4, hasProduct, Honda)
Axiom: OPAA(F2, hasSales, sale4)
Axiom: DPAA(BMW, hasManufactureTime, L("09:09:09", xsd:time))
Axiom: DPDA(swrla:isRuleEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_NPA1)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_EQP2)
Axiom: DPDA(swrla:isRuleEnabled)
Axiom: ROPA(hasDrug, Drug)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_DOM)
Axiom: SCA(swrlxml:XMLAttribute2PropertyMap, swrlxml:XMLAttributeMap)
Axiom: ROPA(swrlxml:hasRootElement, swrlxml:XMLElement)
Axiom: OPDA(protege:SLOT-CONSTRAINTS)
Axiom: RDPA(hasManufactureDatetime, xsd:dateTime)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_INV1)
Axiom: OPAA(sale2, hasProduct, Suzuki)
Axiom: DDPA(swrlxml:hasElementName, swrlxml:XMLElementMap)
Axiom: SCA(swrlxml:XMLAttribute2PropertyValueMap, swrlxml:XMLAttributeMap)
Axiom: SCA(swrlxml:XMLAttributeMap, swrlxml:XMLMap)
Axiom: CDA(temporal:Granularity)
Axiom: FDPA(temporal:hasCount)
Axiom: CAA(Treatment, t1)
Axiom: RDPA(swrlxml:hasContent, xsd:string)
Axiom: OPAA(sale4, temporal:hasGranularity, temporal:Days)
Axiom: RDPA(swrlxml:hasKeyPropertyName, xsd:string)
Axiom: SCA(Convertible, Car)
Axiom: RDPA(swrla:hasPropertyPhrase, xsd:string)
Axiom: CAA(Drug, AZT)
Axiom: DPAA(Treatment_1, temporal:hasStartTime, L("2010-03-10T00:00:00.0", xsd:dateTime))
Axiom: DPAA(sale1, hasAmount, L(3443.0, xsd:double))
Axiom: DPDA(swrlxml:hasTargetClassPrefix)
Axiom: SCA(swrlxml:XMLAttribute2ObjectPropertyClassValueMap, swrlxml:XMLAttribute2ObjectPropertyValueMap)
Axiom: DDPA(hasAmount, Sale)
Axiom: FDPA(hasDose)
Axiom: DPAA(sale3, temporal:hasTime, L("2009-07-21T00:00:00.0", xsd:dateTime))
Axiom: CAA(Treatment, t2)
Axiom: DPDA(swrla:isRuleGroupEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_DIFF2)
Axiom: RDPA(swrlxml:hasSuperPropertyName, xsd:string)
Axiom: FDPA(hasNumberOfTreatments)
Axiom: SCA(Person, CEID7)
Axiom: CAA(Sale, sale3)
Axiom: DPDA(temporal:hasTime)
Axiom: CAA(Car, BMW)
Axiom: DPDA(temporal:hasFinishTime)
Axiom: OPAA(F1, hasSales, sale1)
Axiom: OPAA(sale3, temporal:hasGranularity, temporal:Days)
Axiom: CDA(temporal:ValidInstant)
Axiom: FDPA(swrlxml:hasDefiningClassName)
Axiom: DDPA(hasManufactureDatetime, Shape)
Axiom: FOPA(hasProduct)
Axiom: OPAA(Treatment_2, hasDrug, AZT)
Axiom: DPAA(Treatment_1, temporal:hasFinishTime, L("2010-02-10T00:00:00.0", xsd:dateTime))
Axiom: DDPA(temporal:hasTime, temporal:ValidInstant)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_NOTHING1)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_DIFF)
Axiom: SCA(swrlxml:XMLElement2PropertyMap, swrlxml:XMLElementMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXQC2)
Axiom: CDA(swrlxml:XMLAttribute2ObjectPropertyClassValueMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_TYPE1)
Axiom: RDPA(hasDose, xsd:double)
Axiom: OPAA(F2, hasCar, Honda)
Axiom: CAA(State, CA)
Axiom: DPDA(swrla:isOWL2RLRuleEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_RNG1)
Axiom: DPDA(swrla:isOWL2RLRuleEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_EQC2)
Axiom: OPDA(protege:FROM)
Axiom: CAA(State, NV)
Axiom: SCA(swrlxml:XMLElement2ClassMap, swrlxml:XMLElementMap)
Axiom: DPAA(vp1, temporal:hasFinishTime, L("2008-05-15T00:00:00.0", xsd:dateTime))
Axiom: DPAA(Beemer, hasManufactureDate, L("2006-07-25", xsd:date))
Axiom: DDPA(temporal:hasFinishTime, temporal:ValidPeriod)
Rule name: AdultRule
rule "AdultRule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasAge", $age:o) 
   BAP(a1==$age) from invoker.invoke("AdultRule", "swrlb:greaterThan", 0, false, new VPATH(), new BAVNs("age", ""), $age, new L("17", "xsd:integer")) 
then 
   CAA caa0=new CAA("Adult", new I($p)); inferrer.infer(caa0);  
end
Axiom: DDPA(swrlxml:hasAttributeName, swrlxml:XMLAttributeMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_RNG)
Axiom: DPDA(hasManufactureDate)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_OO)
Axiom: RDPA(hasAmount, xsd:double)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_EQP1)
Axiom: RDPA(temporal:hasCount, xsd:int)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_SFV1)
Axiom: DDPA(swrlxml:hasTargetClassPrefix, CEID8)
Axiom: DOPA(swrlxml:hasAttribute2PropertyValueMaps, CEID9)
Axiom: OPAA(t2, hasDrug, AZT)
Axiom: FDPA(swrlxml:hasValue)
Axiom: DOPA(swrlxml:hasElement2PropertyValueMaps, CEID9)
Axiom: CDA(swrlxml:XMLElement2InstanceMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_INT2)
Axiom: CAA(Treatment, t4)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_PDW)
Axiom: DPAA(vi1, temporal:hasTime, L("2007-05-25T00:00:00.0", xsd:dateTime))
Axiom: RDPA(swrla:isRuleGroupEnabled, xsd:boolean)
Axiom: CDA(swrla:RuleGroup)
Axiom: CAA(Circle, circle1)
Axiom: DPDA(hasDose)
Axiom: DDPA(swrlxml:hasKeyAttributeName, swrlxml:XMLElement2ObjectPropertyInstanceValueMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_TYPE2)
Axiom: SCA(swrlxml:XMLElement2DataPropertyValueMap, swrlxml:XMLElement2PropertyValueMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_EQC2)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_EQP1)
Axiom: CDA(swrla:OWL2RLRule)
Axiom: FDPA(swrlxml:hasTargetClassPrefix)
Axiom: DPAA(sale1, temporal:hasTime, L("2009-06-21T00:00:00.0", xsd:dateTime))
Axiom: DDPA(protege:PAL-STATEMENT, protege:PAL-CONSTRAINT)
Axiom: CDA(swrlxml:XMLDocument)
Axiom: ROPA(hasState, State)
Axiom: CDA(swrlxml:XMLElement)
Axiom: DPDA(swrlxml:hasXSDType)
Axiom: OPAA(F1, hasSales, sale2)
Axiom: CDA(swrla:Entity)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_SPO2)
Axiom: ROPA(temporal:hasGranularity, temporal:Granularity)
Axiom: CDA(State)
Axiom: CDA(Treatment)
Axiom: CDA(swrlxml:XMLElement2ObjectPropertyClassValueMap)
Axiom: SIA(Beemer, Beemer)
Axiom: SIA(Beemer, BMW)
Axiom: SIA(BMW, BMW)
Axiom: SIA(BMW, Beemer)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_SPO1)
Axiom: OPAA(F2, hasTreatment, t3)
Axiom: DPAA(Suzuki, hasManufactureDate, L("2008-01-25", xsd:date))
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_INT)
Axiom: DDPA(swrlxml:hasDefiningClassName, CEID10)
Axiom: DPDA(protege:PAL-RANGE)
Axiom: CDA(swrlxml:XMLElementMap)
Axiom: CAA(temporal:Granularity, temporal:Years)
Axiom: DIA(F2, F1)
Axiom: DIA(F1, F2)
Axiom: ROPA(swrla:hasRuleGroup, swrla:RuleGroup)
Axiom: SCA(temporal:ExtendedProposition, temporal:Proposition)
Axiom: OPAA(sale1, temporal:hasGranularity, temporal:Days)
Axiom: DPDA(hasNumberOfTreatments)
Axiom: SCA(swrlxml:XMLMap, swrlxml:Entity)
Axiom: SCA(swrlxml:XMLElement2InstanceMap, swrlxml:XMLElementMap)
Axiom: SCA(Treatment, temporal:ValidPeriod)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_EQP2)
Axiom: CDA(swrlxml:XMLAttributeMap)
Axiom: DPDA(swrlxml:hasKeyAttributeName)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_SYMP)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_REP_S)
Axiom: RDPA(swrlxml:hasXSDType, xsd:string)
Axiom: DPDA(hasDOB)
Axiom: DOPA(temporal:hasValidTime, temporal:ExtendedProposition)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXQC1)
Axiom: DPAA(t2, hasDose, L(4.3, xsd:double))
Axiom: FDPA(hasDOB)
Axiom: DDPA(swrlxml:hasNamespacePrefix, CEID1)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_DOM1)
Axiom: DDPA(hasName, CEID11)
Axiom: DPDA(hasCode)
Axiom: RDPA(swrlxml:hasKeyAttributePrefix, xsd:string)
Axiom: DPAA(Porsche, hasManufactureDate, L("2006-04-25", xsd:date))
Axiom: SCA(swrlxml:XMLDocument, swrlxml:Entity)
Axiom: DPAA(F3, hasName, L("Claudi", xsd:string))
Axiom: DDPA(hasNumberOfTreatments, Person)
Axiom: CAA(State, ND)
Axiom: DDPA(hasDOB, Person)
Axiom: SCA(Drug, owl:Thing)
Axiom: OPAA(t4, hasDrug, DDI)
Axiom: SCA(Drug, temporal:ValidPeriod)
Axiom: DPAA(sale4, hasAmount, L(8989.0, xsd:double))
Axiom: DPDA(swrlxml:hasPropertyName)
Axiom: FDPA(swrlxml:hasKeyPropertyName)
Axiom: ROPA(hasTreatment, Treatment)
Axiom: DPDA(protege:PAL-STATEMENT)
Axiom: CDA(Circle)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_AVF1)
Axiom: SCA(swrlxml:XMLElement2PropertyValueMap, swrlxml:XMLElementMap)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_DP)
Axiom: DPDA(swrlxml:hasElementName)
Axiom: FDPA(swrla:hasPropertyPhrase)
Axiom: DOPA(swrlxml:hasAttributes, swrlxml:XMLElement)
Axiom: DPDA(hasRadius)
Axiom: ROPA(swrlxml:hasElementMaps, swrlxml:XMLElementMap)
Axiom: ROPA(hasProduct, Product)
Axiom: RDPA(swrla:hasClassPhrase, xsd:string)
Axiom: CDA(protege:DIRECTED-BINARY-RELATION)
Axiom: OPAA(F3, hasTreatment, Treatment_2)
Axiom: CDA(Convertible)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_HV2)
Axiom: CDA(http://swrl.stanford.edu/3.4.4/SQWRLExamples.owl#Male)
Axiom: OPAA(t2, temporal:hasGranularity, temporal:Minutes)
Axiom: FDPA(swrlxml:hasNamespaceURI)
Axiom: RDPA(hasName, xsd:string)
Axiom: OPAA(F3, hasCar, BMW)
Axiom: CAA(Female, F2)
Axiom: FDPA(swrla:hasBuiltInPhrase)
Axiom: DDPA(hasAge, Person)
Axiom: CDA(swrlxml:XMLElementDataPropertyMap)
Axiom: FDPA(swrla:hasClassPhrase)
Axiom: OPAA(sale4, hasState, ND)
Axiom: DPDA(swrlxml:hasAttributeName)
Axiom: DOPA(protege:TO, protege:DIRECTED-BINARY-RELATION)
Axiom: CDA(swrlxml:XMLAttribute2DataPropertyValueMap)
Axiom: CDA(Person)
Axiom: RDPA(swrla:hasBuiltInPhrase, xsd:string)
Axiom: CDA(owl:Nothing)
Axiom: DPDA(hasAge)
Axiom: DDPA(swrlxml:hasContent, swrlxml:XMLElement)
Axiom: DPAA(t3, hasDose, L(4.3, xsd:double))
Axiom: SCA(swrlxml:XMLAttribute, swrlxml:Entity)
Axiom: OPAA(F1, hasTreatment, t1)
Axiom: DOPA(swrlxml:hasElements, swrlxml:XMLDocument)
Axiom: FDPA(temporal:hasFinishTime)
Axiom: FDPA(hasAmount)
Axiom: DPAA(circle1, hasRadius, L(12.5, xsd:double))
Axiom: DPAA(t6, hasDose, L(33.0, xsd:double))
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_SYM)
Axiom: CDA(http://swrl.stanford.edu/3.4.4/SQWRLExamples.owl#Shape)
Axiom: OPDA(swrlxml:hasElement2PropertyValueMaps)
Rule name: PersonsWithFirstTreatment-makeCollection
rule "PersonsWithFirstTreatment-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="temporal:hasStartTime", $start:o) 
  BAP($s:a1, a2==$start) from invoker.invoke("PersonsWithFirstTreatment", "sqwrl:makeSet", 0, false, new VPATH($t, $p), new BAVNs("s", "start"), new UBA("s"), $start) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithFirstTreatment-operateCollection
rule "PersonsWithFirstTreatment-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithFirstTreatment", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="temporal:hasStartTime", $start:o) 
  BAP($min:a1, a2==$s) from invoker.invoke("PersonsWithFirstTreatment", "sqwrl:min", 1, false, new VPATH(), new BAVNs("min", "s"), new UBA("min"), $s) 
  BAP(a1==$min, a2==$start) from invoker.invoke("PersonsWithFirstTreatment", "swrlb:equal", 2, false, new VPATH(), new BAVNs("min", "start"), $min, $start) 
then 
  invoker.invoke("PersonsWithFirstTreatment", "sqwrl:select", 0, true, $p); 
  invoker.invoke("PersonsWithFirstTreatment", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithLeastDoseGreaterThan3.0-makeCollection
rule "PersonsWithLeastDoseGreaterThan3.0-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$tr, p.id=="hasDose", $dose:o) 
  BAP($b:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithLeastDoseGreaterThan3.0", "sqwrl:makeBag", 0, false, new VPATH($tr, $p), new BAVNs("b", "dose", "p"), new UBA("b"), $dose, $p) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: PersonsWithLeastDoseGreaterThan3.0-operateCollection
rule "PersonsWithLeastDoseGreaterThan3.0-operateCollection" 
when 
  $b:SQWRLC(queryName=="PersonsWithLeastDoseGreaterThan3.0", collectionName=="b")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$tr, p.id=="hasDose", $dose:o) 
  BAP($l:a1, a2==$b, a3==$p) from invoker.invoke("PersonsWithLeastDoseGreaterThan3.0", "sqwrl:least", 1, false, new VPATH(), new BAVNs("l", "b", "p"), new UBA("l"), $b, $p) 
  BAP(a1==$l) from invoker.invoke("PersonsWithLeastDoseGreaterThan3.0", "swrlb:greaterThan", 2, false, new VPATH(), new BAVNs("l", ""), $l, new L("3.0", "xsd:double")) 
then 
  invoker.invoke("PersonsWithLeastDoseGreaterThan3.0", "sqwrl:select", 0, true, $p, $l); 
  invoker.invoke("PersonsWithLeastDoseGreaterThan3.0", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithDDIAndAZTTreatments-makeCollection
rule "PersonsWithDDIAndAZTTreatments-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", $d:o) 
  BAP($pds:a1, a2==$d, a3==$p) from invoker.invoke("PersonsWithDDIAndAZTTreatments", "sqwrl:makeSet", 0, false, new VPATH($tr, $p), new BAVNs("pds", "d", "p"), new UBA("pds"), $d, $p) 
  BAP($ds:a1) from invoker.invoke("PersonsWithDDIAndAZTTreatments", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("ds", ""), new UBA("ds"), new I("DDI")) 
  BAP(a1==$ds) from invoker.invoke("PersonsWithDDIAndAZTTreatments", "sqwrl:makeSet", 2, false, new VPATH(), new BAVNs("ds", ""), $ds, new I("AZT")) 
then 
  sqwrlInferrer.infer($pds); 
  sqwrlInferrer.infer($ds); 
  sqwrlInferrer.infer($ds); 
end
Rule name: PersonsWithDDIAndAZTTreatments-operateCollection
rule "PersonsWithDDIAndAZTTreatments-operateCollection" 
when 
  $pds:SQWRLC(queryName=="PersonsWithDDIAndAZTTreatments", collectionName=="pds")
  $ds:SQWRLC(queryName=="PersonsWithDDIAndAZTTreatments", collectionName=="ds")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", $d:o) 
  BAP(a1==$pds, a2==$ds, a3==$p) from invoker.invoke("PersonsWithDDIAndAZTTreatments", "sqwrl:contains", 3, false, new VPATH(), new BAVNs("pds", "ds", "p"), $pds, $ds, $p) 
then 
  invoker.invoke("PersonsWithDDIAndAZTTreatments", "sqwrl:select", 0, true, $p); 
  invoker.invoke("PersonsWithDDIAndAZTTreatments", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: NumberOfCarsPerPerson-makeCollection
rule "NumberOfCarsPerPerson-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasCar", $c:o) 
  BAP($s:a1, a2==$c, a3==$p) from invoker.invoke("NumberOfCarsPerPerson", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "c", "p"), new UBA("s"), $c, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: NumberOfCarsPerPerson-operateCollection
rule "NumberOfCarsPerPerson-operateCollection" 
when 
  $s:SQWRLC(queryName=="NumberOfCarsPerPerson", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasCar", $c:o) 
  BAP($size:a1, a2==$s, a3==$p) from invoker.invoke("NumberOfCarsPerPerson", "sqwrl:size", 1, false, new VPATH(), new BAVNs("size", "s", "p"), new UBA("size"), $s, $p) 
then 
  invoker.invoke("NumberOfCarsPerPerson", "sqwrl:select", 0, true, $p, $size); 
  invoker.invoke("NumberOfCarsPerPerson", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsOnMoreThan1Drug-makeCollection
rule "PersonsOnMoreThan1Drug-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP($s:a1, a2==$d, a3==$p) from invoker.invoke("PersonsOnMoreThan1Drug", "sqwrl:makeSet", 0, false, new VPATH($t, $p), new BAVNs("s", "d", "p"), new UBA("s"), $d, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsOnMoreThan1Drug-operateCollection
rule "PersonsOnMoreThan1Drug-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsOnMoreThan1Drug", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP($size:a1, a2==$s, a3==$p) from invoker.invoke("PersonsOnMoreThan1Drug", "sqwrl:size", 1, false, new VPATH(), new BAVNs("size", "s", "p"), new UBA("size"), $s, $p) 
  BAP(a1==$size) from invoker.invoke("PersonsOnMoreThan1Drug", "swrlb:greaterThan", 2, false, new VPATH(), new BAVNs("size", ""), $size, new L("1", "xsd:integer")) 
then 
  invoker.invoke("PersonsOnMoreThan1Drug", "sqwrl:select", 0, true, $p, $size); 
  invoker.invoke("PersonsOnMoreThan1Drug", "sqwrl:orderBy", 1, true, $p, $size); 
end
Rule name: AlphabeticallyLastNameWithSets-makeCollection
rule "AlphabeticallyLastNameWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallyLastNameWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallyLastNameWithSets-operateCollection
rule "AlphabeticallyLastNameWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallyLastNameWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($last:a1, a2==$s) from invoker.invoke("AlphabeticallyLastNameWithSets", "sqwrl:last", 1, false, new VPATH(), new BAVNs("last", "s"), new UBA("last"), $s) 
then 
  invoker.invoke("AlphabeticallyLastNameWithSets", "sqwrl:select", 0, true, $last); 
end
Rule name: PersonsWithAverageOfLowestTwoDDITreatmentDoses-makeCollection
rule "PersonsWithAverageOfLowestTwoDDITreatmentDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($s:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithAverageOfLowestTwoDDITreatmentDoses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("s", "dose", "p"), new UBA("s"), $dose, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithAverageOfLowestTwoDDITreatmentDoses-operateCollection
rule "PersonsWithAverageOfLowestTwoDDITreatmentDoses-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithAverageOfLowestTwoDDITreatmentDoses", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($lowest2L:a1, a2==$s, a5==$p) from invoker.invoke("PersonsWithAverageOfLowestTwoDDITreatmentDoses", "sqwrl:nthSlice", 1, false, new VPATH(), new BAVNs("lowest2L", "s", "", "", "p"), new UBA("lowest2L"), $s, new L("1", "xsd:integer"), new L("2", "xsd:integer"), $p) 
  BAP($avg:a1, a2==$lowest2L, a3==$p) from invoker.invoke("PersonsWithAverageOfLowestTwoDDITreatmentDoses", "sqwrl:avg", 2, false, new VPATH(), new BAVNs("avg", "lowest2L", "p"), new UBA("avg"), $lowest2L, $p) 
then 
  invoker.invoke("PersonsWithAverageOfLowestTwoDDITreatmentDoses", "sqwrl:select", 0, true, $p, $avg); 
  invoker.invoke("PersonsWithAverageOfLowestTwoDDITreatmentDoses", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithMinimumAge-makeCollection
rule "PersonsWithMinimumAge-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP($s:a1, a2==$age) from invoker.invoke("PersonsWithMinimumAge", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "age"), new UBA("s"), $age) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithMinimumAge-operateCollection
rule "PersonsWithMinimumAge-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithMinimumAge", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP($min:a1, a2==$s) from invoker.invoke("PersonsWithMinimumAge", "sqwrl:min", 1, false, new VPATH(), new BAVNs("min", "s"), new UBA("min"), $s) 
  BAP(a1==$age, a2==$min) from invoker.invoke("PersonsWithMinimumAge", "swrlb:equal", 2, false, new VPATH(), new BAVNs("age", "min"), $age, $min) 
then 
  invoker.invoke("PersonsWithMinimumAge", "sqwrl:select", 0, true, $p, $min); 
end
Rule name: PersonsAndTreatmentDurations
rule "PersonsAndTreatmentDurations" 
when 
   CAA(c=="Person", $p:i) 
   OPAA(s==$p, p.id=="hasTreatment", $t:o) 
   OPAA(s==$t, p.id=="hasDrug", $d:o) 
   DPAA(s==$t, p.id=="temporal:hasStartTime", $start:o) 
   DPAA(s==$t, p.id=="temporal:hasFinishTime", $finish:o) 
   BAP($duration:a1, a2==$start, a3==$finish) from invoker.invoke("PersonsAndTreatmentDurations", "temporal:duration", 0, false, new VPATH($d, $t, $p), new BAVNs("duration", "start", "finish", ""), new UBA("duration"), $start, $finish, new I("temporal:Days")) 
then 
   invoker.invoke("PersonsAndTreatmentDurations", "sqwrl:select", 0, true, $p, $d, $duration);  
   invoker.invoke("PersonsAndTreatmentDurations", "sqwrl:orderBy", 1, true, $p, $d, $duration);  
end
Rule name: Lowest2DDIDosesPerPatientWithSets-makeCollection
rule "Lowest2DDIDosesPerPatientWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$tr, p.id=="hasDose", $dose:o) 
  BAP($b:a1, a2==$dose, a3==$p) from invoker.invoke("Lowest2DDIDosesPerPatientWithSets", "sqwrl:makeSet", 0, false, new VPATH($tr, $p), new BAVNs("b", "dose", "p"), new UBA("b"), $dose, $p) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: Lowest2DDIDosesPerPatientWithSets-operateCollection
rule "Lowest2DDIDosesPerPatientWithSets-operateCollection" 
when 
  $b:SQWRLC(queryName=="Lowest2DDIDosesPerPatientWithSets", collectionName=="b")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$tr, p.id=="hasDose", $dose:o) 
  BAP($least2DosesC:a1, a2==$b, a4==$p) from invoker.invoke("Lowest2DDIDosesPerPatientWithSets", "sqwrl:leastN", 1, false, new VPATH(), new BAVNs("least2DosesC", "b", "", "p"), new UBA("least2DosesC"), $b, new L("2", "xsd:integer"), $p) 
  BAP($e:a1, a2==$least2DosesC, a3==$p) from invoker.invoke("Lowest2DDIDosesPerPatientWithSets", "sqwrl:element", 2, false, new VPATH(), new BAVNs("e", "least2DosesC", "p"), new UBA("e"), $least2DosesC, $p) 
then 
  invoker.invoke("Lowest2DDIDosesPerPatientWithSets", "sqwrl:select", 0, true, $p, new I("DDI"), $e); 
  invoker.invoke("Lowest2DDIDosesPerPatientWithSets", "sqwrl:orderBy", 1, true, $p, $e); 
end
Rule name: AlphabeticallySecondAndThirdNamesWithSetSlice-makeCollection
rule "AlphabeticallySecondAndThirdNamesWithSetSlice-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallySecondAndThirdNamesWithSetSlice", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallySecondAndThirdNamesWithSetSlice-operateCollection
rule "AlphabeticallySecondAndThirdNamesWithSetSlice-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallySecondAndThirdNamesWithSetSlice", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($secondAndThirdL:a1, a2==$s) from invoker.invoke("AlphabeticallySecondAndThirdNamesWithSetSlice", "sqwrl:nthSlice", 1, false, new VPATH(), new BAVNs("secondAndThirdL", "s", "", ""), new UBA("secondAndThirdL"), $s, new L("2", "xsd:integer"), new L("2", "xsd:integer")) 
  BAP($e:a1, a2==$secondAndThirdL) from invoker.invoke("AlphabeticallySecondAndThirdNamesWithSetSlice", "sqwrl:element", 2, false, new VPATH(), new BAVNs("e", "secondAndThirdL"), new UBA("e"), $secondAndThirdL) 
then 
  invoker.invoke("AlphabeticallySecondAndThirdNamesWithSetSlice", "sqwrl:select", 0, true, $e); 
end
Rule name: PersonsWithEqualLowest2DDIAndAZTDoses-makeCollection
rule "PersonsWithEqualLowest2DDIAndAZTDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $trDDI:o) 
  OPAA(s==$trDDI, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$trDDI, p.id=="hasDose", $doseDDI:o) 
  OPAA(s==$p, p.id=="hasTreatment", $trAZT:o) 
  OPAA(s==$trAZT, p.id=="hasDrug", o.id=="AZT") 
  DPAA(s==$trAZT, p.id=="hasDose", $doseAZT:o) 
  BAP($bDDI:a1, a2==$doseDDI, a3==$p) from invoker.invoke("PersonsWithEqualLowest2DDIAndAZTDoses", "sqwrl:makeBag", 0, false, new VPATH($trDDI, $p), new BAVNs("bDDI", "doseDDI", "p"), new UBA("bDDI"), $doseDDI, $p) 
  BAP($bAZT:a1, a2==$doseAZT, a3==$p) from invoker.invoke("PersonsWithEqualLowest2DDIAndAZTDoses", "sqwrl:makeBag", 1, false, new VPATH($trAZT, $p), new BAVNs("bAZT", "doseAZT", "p"), new UBA("bAZT"), $doseAZT, $p) 
then 
  sqwrlInferrer.infer($bDDI); 
  sqwrlInferrer.infer($bAZT); 
end
Rule name: PersonsWithEqualLowest2DDIAndAZTDoses-operateCollection
rule "PersonsWithEqualLowest2DDIAndAZTDoses-operateCollection" 
when 
  $bDDI:SQWRLC(queryName=="PersonsWithEqualLowest2DDIAndAZTDoses", collectionName=="bDDI")
  $bAZT:SQWRLC(queryName=="PersonsWithEqualLowest2DDIAndAZTDoses", collectionName=="bAZT")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $trDDI:o) 
  OPAA(s==$trDDI, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$trDDI, p.id=="hasDose", $doseDDI:o) 
  OPAA(s==$p, p.id=="hasTreatment", $trAZT:o) 
  OPAA(s==$trAZT, p.id=="hasDrug", o.id=="AZT") 
  DPAA(s==$trAZT, p.id=="hasDose", $doseAZT:o) 
  BAP($lowest2DosesBoth:a1, a2==$bDDI, a4==$p) from invoker.invoke("PersonsWithEqualLowest2DDIAndAZTDoses", "sqwrl:leastN", 2, false, new VPATH(), new BAVNs("lowest2DosesBoth", "bDDI", "", "p"), new UBA("lowest2DosesBoth"), $bDDI, new L("2", "xsd:integer"), $p) 
  BAP(a1==$lowest2DosesBoth, a2==$bAZT, a4==$p) from invoker.invoke("PersonsWithEqualLowest2DDIAndAZTDoses", "sqwrl:leastN", 3, false, new VPATH(), new BAVNs("lowest2DosesBoth", "bAZT", "", "p"), $lowest2DosesBoth, $bAZT, new L("2", "xsd:integer"), $p) 
  BAP($e:a1, a2==$lowest2DosesBoth, a3==$p) from invoker.invoke("PersonsWithEqualLowest2DDIAndAZTDoses", "sqwrl:element", 4, false, new VPATH(), new BAVNs("e", "lowest2DosesBoth", "p"), new UBA("e"), $lowest2DosesBoth, $p) 
then 
  invoker.invoke("PersonsWithEqualLowest2DDIAndAZTDoses", "sqwrl:select", 0, true, $p, $e); 
  invoker.invoke("PersonsWithEqualLowest2DDIAndAZTDoses", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithAgesGreaterThanTheAverage-makeCollection
rule "PersonsWithAgesGreaterThanTheAverage-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP($b:a1, a2==$age) from invoker.invoke("PersonsWithAgesGreaterThanTheAverage", "sqwrl:makeBag", 0, false, new VPATH($p), new BAVNs("b", "age"), new UBA("b"), $age) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: PersonsWithAgesGreaterThanTheAverage-operateCollection
rule "PersonsWithAgesGreaterThanTheAverage-operateCollection" 
when 
  $b:SQWRLC(queryName=="PersonsWithAgesGreaterThanTheAverage", collectionName=="b")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP($avg:a1, a2==$b) from invoker.invoke("PersonsWithAgesGreaterThanTheAverage", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avg", "b"), new UBA("avg"), $b) 
  BAP(a1==$age, a2==$avg) from invoker.invoke("PersonsWithAgesGreaterThanTheAverage", "swrlb:greaterThan", 2, false, new VPATH(), new BAVNs("age", "avg"), $age, $avg) 
then 
  invoker.invoke("PersonsWithAgesGreaterThanTheAverage", "sqwrl:select", 0, true, $p, $age, $avg); 
  invoker.invoke("PersonsWithAgesGreaterThanTheAverage", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: SameCollectionEqualTest-makeCollection
rule "SameCollectionEqualTest-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($s:a1, a2==$dose, a3==$p) from invoker.invoke("SameCollectionEqualTest", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("s", "dose", "p"), new UBA("s"), $dose, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: SameCollectionEqualTest-operateCollection
rule "SameCollectionEqualTest-operateCollection" 
when 
  $s:SQWRLC(queryName=="SameCollectionEqualTest", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($lowest2L:a1, a2==$s, a4==$p) from invoker.invoke("SameCollectionEqualTest", "sqwrl:leastN", 1, false, new VPATH(), new BAVNs("lowest2L", "s", "", "p"), new UBA("lowest2L"), $s, new L("2", "xsd:integer"), $p) 
  BAP($greatest2L:a1, a2==$s, a4==$p) from invoker.invoke("SameCollectionEqualTest", "sqwrl:greatestN", 2, false, new VPATH(), new BAVNs("greatest2L", "s", "", "p"), new UBA("greatest2L"), $s, new L("2", "xsd:integer"), $p) 
  BAP(a1==$lowest2L, a2==$lowest2L, a3==$p, a4==$p) from invoker.invoke("SameCollectionEqualTest", "sqwrl:equal", 3, false, new VPATH(), new BAVNs("lowest2L", "lowest2L", "p", "p"), $lowest2L, $lowest2L, $p, $p) 
then 
  invoker.invoke("SameCollectionEqualTest", "sqwrl:select", 0, true, $p); 
  invoker.invoke("SameCollectionEqualTest", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithMoreThan2Cars-makeCollection
rule "PersonsWithMoreThan2Cars-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasCar", $c:o) 
  BAP($s:a1, a2==$c, a3==$p) from invoker.invoke("PersonsWithMoreThan2Cars", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "c", "p"), new UBA("s"), $c, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithMoreThan2Cars-operateCollection
rule "PersonsWithMoreThan2Cars-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithMoreThan2Cars", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasCar", $c:o) 
  BAP($size:a1, a2==$s, a3==$p) from invoker.invoke("PersonsWithMoreThan2Cars", "sqwrl:size", 1, false, new VPATH(), new BAVNs("size", "s", "p"), new UBA("size"), $s, $p) 
  BAP(a1==$size) from invoker.invoke("PersonsWithMoreThan2Cars", "swrlb:greaterThan", 2, false, new VPATH(), new BAVNs("size", ""), $size, new L("2", "xsd:integer")) 
then 
  invoker.invoke("PersonsWithMoreThan2Cars", "sqwrl:select", 0, true, $p, $size); 
  invoker.invoke("PersonsWithMoreThan2Cars", "sqwrl:orderBy", 1, true, $p, $size); 
end
Rule name: PersonsWithEqualLowestDDIAndAZTDoses-makeCollection
rule "PersonsWithEqualLowestDDIAndAZTDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $trDDI:o) 
  OPAA(s==$trDDI, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$trDDI, p.id=="hasDose", $doseDDI:o) 
  OPAA(s==$p, p.id=="hasTreatment", $trAZT:o) 
  OPAA(s==$trAZT, p.id=="hasDrug", o.id=="AZT") 
  DPAA(s==$trAZT, p.id=="hasDose", $doseAZT:o) 
  BAP($bDDI:a1, a2==$doseDDI, a3==$p) from invoker.invoke("PersonsWithEqualLowestDDIAndAZTDoses", "sqwrl:makeBag", 0, false, new VPATH($trDDI, $p), new BAVNs("bDDI", "doseDDI", "p"), new UBA("bDDI"), $doseDDI, $p) 
  BAP($bAZT:a1, a2==$doseAZT, a3==$p) from invoker.invoke("PersonsWithEqualLowestDDIAndAZTDoses", "sqwrl:makeBag", 1, false, new VPATH($trAZT, $p), new BAVNs("bAZT", "doseAZT", "p"), new UBA("bAZT"), $doseAZT, $p) 
then 
  sqwrlInferrer.infer($bDDI); 
  sqwrlInferrer.infer($bAZT); 
end
Rule name: PersonsWithEqualLowestDDIAndAZTDoses-operateCollection
rule "PersonsWithEqualLowestDDIAndAZTDoses-operateCollection" 
when 
  $bDDI:SQWRLC(queryName=="PersonsWithEqualLowestDDIAndAZTDoses", collectionName=="bDDI")
  $bAZT:SQWRLC(queryName=="PersonsWithEqualLowestDDIAndAZTDoses", collectionName=="bAZT")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $trDDI:o) 
  OPAA(s==$trDDI, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$trDDI, p.id=="hasDose", $doseDDI:o) 
  OPAA(s==$p, p.id=="hasTreatment", $trAZT:o) 
  OPAA(s==$trAZT, p.id=="hasDrug", o.id=="AZT") 
  DPAA(s==$trAZT, p.id=="hasDose", $doseAZT:o) 
  BAP($lowestDose:a1, a2==$bDDI, a3==$p) from invoker.invoke("PersonsWithEqualLowestDDIAndAZTDoses", "sqwrl:least", 2, false, new VPATH(), new BAVNs("lowestDose", "bDDI", "p"), new UBA("lowestDose"), $bDDI, $p) 
  BAP(a1==$lowestDose, a2==$bAZT, a3==$p) from invoker.invoke("PersonsWithEqualLowestDDIAndAZTDoses", "sqwrl:least", 3, false, new VPATH(), new BAVNs("lowestDose", "bAZT", "p"), $lowestDose, $bAZT, $p) 
then 
  invoker.invoke("PersonsWithEqualLowestDDIAndAZTDoses", "sqwrl:select", 0, true, $p, $lowestDose); 
  invoker.invoke("PersonsWithEqualLowestDDIAndAZTDoses", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: AlphabeticallyFirstNameWithSets-makeCollection
rule "AlphabeticallyFirstNameWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallyFirstNameWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallyFirstNameWithSets-operateCollection
rule "AlphabeticallyFirstNameWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallyFirstNameWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($first:a1, a2==$s) from invoker.invoke("AlphabeticallyFirstNameWithSets", "sqwrl:first", 1, false, new VPATH(), new BAVNs("first", "s"), new UBA("first"), $s) 
then 
  invoker.invoke("AlphabeticallyFirstNameWithSets", "sqwrl:select", 0, true, $first); 
end
Rule name: AlphabeticallyThirdLastNameWithSets-makeCollection
rule "AlphabeticallyThirdLastNameWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallyThirdLastNameWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallyThirdLastNameWithSets-operateCollection
rule "AlphabeticallyThirdLastNameWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallyThirdLastNameWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($thirdLast:a1, a2==$s) from invoker.invoke("AlphabeticallyThirdLastNameWithSets", "sqwrl:nthLast", 1, false, new VPATH(), new BAVNs("thirdLast", "s", ""), new UBA("thirdLast"), $s, new L("3", "xsd:integer")) 
then 
  invoker.invoke("AlphabeticallyThirdLastNameWithSets", "sqwrl:select", 0, true, $thirdLast); 
end
Rule name: PersonsWithLessThanAverageDDIDoses-makeCollection
rule "PersonsWithLessThanAverageDDIDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($sp:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithLessThanAverageDDIDoses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("sp", "dose", "p"), new UBA("sp"), $dose, $p) 
  BAP($sddi:a1, a2==$dose) from invoker.invoke("PersonsWithLessThanAverageDDIDoses", "sqwrl:makeBag", 1, false, new VPATH($t, $sp, $p), new BAVNs("sddi", "dose"), new UBA("sddi"), $dose) 
then 
  sqwrlInferrer.infer($sp); 
  sqwrlInferrer.infer($sddi); 
end
Rule name: PersonsWithLessThanAverageDDIDoses-operateCollection
rule "PersonsWithLessThanAverageDDIDoses-operateCollection" 
when 
  $sp:SQWRLC(queryName=="PersonsWithLessThanAverageDDIDoses", collectionName=="sp")
  $sddi:SQWRLC(queryName=="PersonsWithLessThanAverageDDIDoses", collectionName=="sddi")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($avgP:a1, a2==$sp, a3==$p) from invoker.invoke("PersonsWithLessThanAverageDDIDoses", "sqwrl:avg", 2, false, new VPATH(), new BAVNs("avgP", "sp", "p"), new UBA("avgP"), $sp, $p) 
  BAP($avgDDI:a1, a2==$sddi) from invoker.invoke("PersonsWithLessThanAverageDDIDoses", "sqwrl:avg", 3, false, new VPATH(), new BAVNs("avgDDI", "sddi"), new UBA("avgDDI"), $sddi) 
  BAP(a1==$avgP, a2==$avgDDI) from invoker.invoke("PersonsWithLessThanAverageDDIDoses", "swrlb:lessThan", 4, false, new VPATH(), new BAVNs("avgP", "avgDDI"), $avgP, $avgDDI) 
then 
  invoker.invoke("PersonsWithLessThanAverageDDIDoses", "sqwrl:select", 0, true, $p, $avgP, $avgDDI); 
  invoker.invoke("PersonsWithLessThanAverageDDIDoses", "sqwrl:orderBy", 1, true, $p, $avgP, $avgDDI); 
  invoker.invoke("PersonsWithLessThanAverageDDIDoses", "sqwrl:columnNames", 2, true, new L("Patient", "xsd:string"), new L("Average DDI Dose", "xsd:string"), new L("Average All DDI Doses", "xsd:string")); 
end
Rule name: UnionTest-makeCollection
rule "UnionTest-makeCollection" 
when 
  BAP($s1:a1) from invoker.invoke("UnionTest", "sqwrl:makeSet", 0, false, new VPATH(), new BAVNs("s1", ""), new UBA("s1"), new I("DDI")) 
  BAP($s2:a1) from invoker.invoke("UnionTest", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("s2", ""), new UBA("s2"), new I("AZT")) 
then 
  sqwrlInferrer.infer($s1); 
  sqwrlInferrer.infer($s2); 
end
Rule name: UnionTest-operateCollection
rule "UnionTest-operateCollection" 
when 
  $s1:SQWRLC(queryName=="UnionTest", collectionName=="s1")
  $s2:SQWRLC(queryName=="UnionTest", collectionName=="s2")
  BAP($u:a1, a2==$s1, a3==$s2) from invoker.invoke("UnionTest", "sqwrl:union", 2, false, new VPATH(), new BAVNs("u", "s1", "s2"), new UBA("u"), $s1, $s2) 
  BAP($e:a1, a2==$u) from invoker.invoke("UnionTest", "sqwrl:element", 3, false, new VPATH(), new BAVNs("e", "u"), new UBA("e"), $u) 
then 
  invoker.invoke("UnionTest", "sqwrl:select", 0, true, $e); 
  invoker.invoke("UnionTest", "sqwrl:orderBy", 1, true, $e); 
end
Rule name: AlphabeticallyAllExceptThirdNameWithSets-makeCollection
rule "AlphabeticallyAllExceptThirdNameWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallyAllExceptThirdNameWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallyAllExceptThirdNameWithSets-operateCollection
rule "AlphabeticallyAllExceptThirdNameWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallyAllExceptThirdNameWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($notThirdL:a1, a2==$s) from invoker.invoke("AlphabeticallyAllExceptThirdNameWithSets", "sqwrl:notNth", 1, false, new VPATH(), new BAVNs("notThirdL", "s", ""), new UBA("notThirdL"), $s, new L("3", "xsd:integer")) 
  BAP($e:a1, a2==$notThirdL) from invoker.invoke("AlphabeticallyAllExceptThirdNameWithSets", "sqwrl:element", 2, false, new VPATH(), new BAVNs("e", "notThirdL"), new UBA("e"), $notThirdL) 
then 
  invoker.invoke("AlphabeticallyAllExceptThirdNameWithSets", "sqwrl:select", 0, true, $e); 
  invoker.invoke("AlphabeticallyAllExceptThirdNameWithSets", "sqwrl:orderBy", 1, true, $e); 
end
Rule name: PersonsWithTreatmentsLastingMoreThan1Month
rule "PersonsWithTreatmentsLastingMoreThan1Month" 
when 
   CAA(c=="Person", $p:i) 
   OPAA(s==$p, p.id=="hasTreatment", $t:o) 
   DPAA(s==$t, p.id=="temporal:hasStartTime", $start:o) 
   DPAA(s==$t, p.id=="temporal:hasFinishTime", $finish:o) 
   BAP($d:a1, a2==$start, a3==$finish) from invoker.invoke("PersonsWithTreatmentsLastingMoreThan1Month", "temporal:duration", 0, false, new VPATH($t, $p), new BAVNs("d", "start", "finish", ""), new UBA("d"), $start, $finish, new I("temporal:Months")) 
   BAP(a1==$d) from invoker.invoke("PersonsWithTreatmentsLastingMoreThan1Month", "swrlb:greaterThan", 1, false, new VPATH($finish, $t, $start, $p), new BAVNs("d", ""), $d, new L("1", "xsd:integer")) 
then 
   invoker.invoke("PersonsWithTreatmentsLastingMoreThan1Month", "sqwrl:select", 0, true, $p, $d);  
   invoker.invoke("PersonsWithTreatmentsLastingMoreThan1Month", "sqwrl:orderBy", 1, true, $p, $d);  
   invoker.invoke("PersonsWithTreatmentsLastingMoreThan1Month", "sqwrl:columnNames", 2, true, new L("Person", "xsd:string"), new L("Months", "xsd:string"));  
end
Rule name: PersonsWithAgesLessThanTheAverageAge-makeCollection
rule "PersonsWithAgesLessThanTheAverageAge-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $ageP:o) 
  BAP($b:a1, a2==$ageP) from invoker.invoke("PersonsWithAgesLessThanTheAverageAge", "sqwrl:makeBag", 0, false, new VPATH($p), new BAVNs("b", "ageP"), new UBA("b"), $ageP) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: PersonsWithAgesLessThanTheAverageAge-operateCollection
rule "PersonsWithAgesLessThanTheAverageAge-operateCollection" 
when 
  $b:SQWRLC(queryName=="PersonsWithAgesLessThanTheAverageAge", collectionName=="b")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $ageP:o) 
  BAP($avgAll:a1, a2==$b) from invoker.invoke("PersonsWithAgesLessThanTheAverageAge", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avgAll", "b"), new UBA("avgAll"), $b) 
  BAP(a1==$ageP, a2==$avgAll) from invoker.invoke("PersonsWithAgesLessThanTheAverageAge", "swrlb:lessThan", 2, false, new VPATH(), new BAVNs("ageP", "avgAll"), $ageP, $avgAll) 
then 
  invoker.invoke("PersonsWithAgesLessThanTheAverageAge", "sqwrl:select", 0, true, $p, $ageP, $avgAll); 
  invoker.invoke("PersonsWithAgesLessThanTheAverageAge", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithMaximumAge-makeCollection
rule "PersonsWithMaximumAge-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP($s:a1, a2==$age) from invoker.invoke("PersonsWithMaximumAge", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "age"), new UBA("s"), $age) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithMaximumAge-operateCollection
rule "PersonsWithMaximumAge-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithMaximumAge", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP($max:a1, a2==$s) from invoker.invoke("PersonsWithMaximumAge", "sqwrl:max", 1, false, new VPATH(), new BAVNs("max", "s"), new UBA("max"), $s) 
  BAP(a1==$age, a2==$max) from invoker.invoke("PersonsWithMaximumAge", "swrlb:equal", 2, false, new VPATH(), new BAVNs("age", "max"), $age, $max) 
then 
  invoker.invoke("PersonsWithMaximumAge", "sqwrl:select", 0, true, $p, $max); 
  invoker.invoke("PersonsWithMaximumAge", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: AlphabeticallyThirdNameWithSets-makeCollection
rule "AlphabeticallyThirdNameWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallyThirdNameWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallyThirdNameWithSets-operateCollection
rule "AlphabeticallyThirdNameWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallyThirdNameWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($third:a1, a2==$s) from invoker.invoke("AlphabeticallyThirdNameWithSets", "sqwrl:nth", 1, false, new VPATH(), new BAVNs("third", "s", ""), new UBA("third"), $s, new L("3", "xsd:integer")) 
then 
  invoker.invoke("AlphabeticallyThirdNameWithSets", "sqwrl:select", 0, true, $third); 
end
Rule name: PersonsWithDrugTreatmentDurations-makeCollection
rule "PersonsWithDrugTreatmentDurations-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  DPAA(s==$t, p.id=="temporal:hasStartTime", $start:o) 
  DPAA(s==$t, p.id=="temporal:hasFinishTime", $finish:o) 
  BAP($duration:a1, a2==$start, a3==$finish) from invoker.invoke("PersonsWithDrugTreatmentDurations", "temporal:duration", 0, false, new VPATH($d, $t, $p), new BAVNs("duration", "start", "finish", ""), new UBA("duration"), $start, $finish, new I("temporal:Days")) 
  BAP($sp:a1, a2==$duration, a3==$p, a4==$d) from invoker.invoke("PersonsWithDrugTreatmentDurations", "sqwrl:makeSet", 1, false, new VPATH($finish, $d, $t, $start, $p), new BAVNs("sp", "duration", "p", "d"), new UBA("sp"), $duration, $p, $d) 
then 
  sqwrlInferrer.infer($sp); 
end
Rule name: PersonsWithDrugTreatmentDurations-operateCollection
rule "PersonsWithDrugTreatmentDurations-operateCollection" 
when 
  $sp:SQWRLC(queryName=="PersonsWithDrugTreatmentDurations", collectionName=="sp")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  DPAA(s==$t, p.id=="temporal:hasStartTime", $start:o) 
  DPAA(s==$t, p.id=="temporal:hasFinishTime", $finish:o) 
  BAP($duration:a1, a2==$start, a3==$finish) from invoker.invoke("PersonsWithDrugTreatmentDurations", "temporal:duration", 2, false, new VPATH($d, $t, $p), new BAVNs("duration", "start", "finish", ""), new UBA("duration"), $start, $finish, new I("temporal:Days")) 
  BAP($minP:a1, a2==$sp, a3==$p, a4==$d) from invoker.invoke("PersonsWithDrugTreatmentDurations", "sqwrl:min", 3, false, new VPATH(), new BAVNs("minP", "sp", "p", "d"), new UBA("minP"), $sp, $p, $d) 
then 
  invoker.invoke("PersonsWithDrugTreatmentDurations", "sqwrl:select", 0, true, $p, $d, $minP); 
  invoker.invoke("PersonsWithDrugTreatmentDurations", "sqwrl:orderBy", 1, true, $p, $d); 
  invoker.invoke("PersonsWithDrugTreatmentDurations", "sqwrl:columnNames", 2, true, new L("Person", "xsd:string"), new L("Drug", "xsd:string"), new L("Duration (Days)", "xsd:string")); 
end
Rule name: AverageSaleAmountPerState-makeCollection
rule "AverageSaleAmountPerState-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasSales", $sale:o) 
  DPAA(s==$sale, p.id=="hasAmount", $amt:o) 
  OPAA(s==$sale, p.id=="hasState", $state:o) 
  BAP($b:a1, a2==$amt, a3==$state) from invoker.invoke("AverageSaleAmountPerState", "sqwrl:makeBag", 0, false, new VPATH($p, $state, $sale), new BAVNs("b", "amt", "state"), new UBA("b"), $amt, $state) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: AverageSaleAmountPerState-operateCollection
rule "AverageSaleAmountPerState-operateCollection" 
when 
  $b:SQWRLC(queryName=="AverageSaleAmountPerState", collectionName=="b")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasSales", $sale:o) 
  DPAA(s==$sale, p.id=="hasAmount", $amt:o) 
  OPAA(s==$sale, p.id=="hasState", $state:o) 
  BAP($avg:a1, a2==$b, a3==$state) from invoker.invoke("AverageSaleAmountPerState", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avg", "b", "state"), new UBA("avg"), $b, $state) 
then 
  invoker.invoke("AverageSaleAmountPerState", "sqwrl:select", 0, true, $state, $avg); 
  invoker.invoke("AverageSaleAmountPerState", "sqwrl:orderBy", 1, true, $state, $avg); 
end
Rule name: PersonsWithAverageDDIDoses-makeCollection
rule "PersonsWithAverageDDIDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($bd:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithAverageDDIDoses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("bd", "dose", "p"), new UBA("bd"), $dose, $p) 
then 
  sqwrlInferrer.infer($bd); 
end
Rule name: PersonsWithAverageDDIDoses-operateCollection
rule "PersonsWithAverageDDIDoses-operateCollection" 
when 
  $bd:SQWRLC(queryName=="PersonsWithAverageDDIDoses", collectionName=="bd")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($avg:a1, a2==$bd, a3==$p) from invoker.invoke("PersonsWithAverageDDIDoses", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avg", "bd", "p"), new UBA("avg"), $bd, $p) 
  BAP($size:a1, a2==$bd, a3==$p) from invoker.invoke("PersonsWithAverageDDIDoses", "sqwrl:size", 2, false, new VPATH(), new BAVNs("size", "bd", "p"), new UBA("size"), $bd, $p) 
then 
  invoker.invoke("PersonsWithAverageDDIDoses", "sqwrl:select", 0, true, $p, $avg, $size); 
  invoker.invoke("PersonsWithAverageDDIDoses", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsOnBothDDIandAZTAndNoOtherDrugs-makeCollection
rule "PersonsOnBothDDIandAZTAndNoOtherDrugs-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", $d:o) 
  BAP($pds:a1, a2==$d, a3==$p) from invoker.invoke("PersonsOnBothDDIandAZTAndNoOtherDrugs", "sqwrl:makeSet", 0, false, new VPATH($tr, $p), new BAVNs("pds", "d", "p"), new UBA("pds"), $d, $p) 
  BAP($ds:a1) from invoker.invoke("PersonsOnBothDDIandAZTAndNoOtherDrugs", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("ds", ""), new UBA("ds"), new I("DDI")) 
  BAP(a1==$ds) from invoker.invoke("PersonsOnBothDDIandAZTAndNoOtherDrugs", "sqwrl:makeSet", 2, false, new VPATH(), new BAVNs("ds", ""), $ds, new I("AZT")) 
then 
  sqwrlInferrer.infer($pds); 
  sqwrlInferrer.infer($ds); 
  sqwrlInferrer.infer($ds); 
end
Rule name: PersonsOnBothDDIandAZTAndNoOtherDrugs-operateCollection
rule "PersonsOnBothDDIandAZTAndNoOtherDrugs-operateCollection" 
when 
  $pds:SQWRLC(queryName=="PersonsOnBothDDIandAZTAndNoOtherDrugs", collectionName=="pds")
  $ds:SQWRLC(queryName=="PersonsOnBothDDIandAZTAndNoOtherDrugs", collectionName=="ds")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", $d:o) 
  BAP(a1==$pds, a2==$ds, a3==$p) from invoker.invoke("PersonsOnBothDDIandAZTAndNoOtherDrugs", "sqwrl:equal", 3, false, new VPATH(), new BAVNs("pds", "ds", "p"), $pds, $ds, $p) 
then 
  invoker.invoke("PersonsOnBothDDIandAZTAndNoOtherDrugs", "sqwrl:select", 0, true, $p); 
  invoker.invoke("PersonsOnBothDDIandAZTAndNoOtherDrugs", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses-makeCollection
rule "PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($s:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("s", "dose", "p"), new UBA("s"), $dose, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses-operateCollection
rule "PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($lowest2L:a1, a2==$s, a4==$p) from invoker.invoke("PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:leastN", 1, false, new VPATH(), new BAVNs("lowest2L", "s", "", "p"), new UBA("lowest2L"), $s, new L("2", "xsd:integer"), $p) 
  BAP($greatest2L:a1, a2==$s, a4==$p) from invoker.invoke("PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:greatestN", 2, false, new VPATH(), new BAVNs("greatest2L", "s", "", "p"), new UBA("greatest2L"), $s, new L("2", "xsd:integer"), $p) 
  BAP($rL:a1, a2==$lowest2L, a3==$greatest2L, a4==$p, a5==$p) from invoker.invoke("PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:append", 3, false, new VPATH(), new BAVNs("rL", "lowest2L", "greatest2L", "p", "p"), new UBA("rL"), $lowest2L, $greatest2L, $p, $p) 
  BAP($avg:a1, a2==$rL, a3==$p, a4==$p) from invoker.invoke("PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:avg", 4, false, new VPATH(), new BAVNs("avg", "rL", "p", "p"), new UBA("avg"), $rL, $p, $p) 
then 
  invoker.invoke("PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:select", 0, true, $p, $avg); 
  invoker.invoke("PersonsWithAverageOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:orderBy", 1, true, $p, $avg); 
end
Rule name: PersonWithAverageDosePerDrugIn2007-makeCollection
rule "PersonWithAverageDosePerDrugIn2007-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="temporal:hasStartTime", $start:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP(a1==$start) from invoker.invoke("PersonWithAverageDosePerDrugIn2007", "temporal:equals", 0, false, new VPATH($d, $t, $p, $dose), new BAVNs("start", "", ""), $start, new L("2007", "xsd:string"), new I("temporal:Years")) 
  BAP($s:a1, a2==$dose, a3==$p, a4==$d) from invoker.invoke("PersonWithAverageDosePerDrugIn2007", "sqwrl:makeBag", 1, false, new VPATH($d, $t, $start, $p), new BAVNs("s", "dose", "p", "d"), new UBA("s"), $dose, $p, $d) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonWithAverageDosePerDrugIn2007-operateCollection
rule "PersonWithAverageDosePerDrugIn2007-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonWithAverageDosePerDrugIn2007", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="temporal:hasStartTime", $start:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP(a1==$start) from invoker.invoke("PersonWithAverageDosePerDrugIn2007", "temporal:equals", 2, false, new VPATH($d, $t, $p, $dose), new BAVNs("start", "", ""), $start, new L("2007", "xsd:string"), new I("temporal:Years")) 
  BAP($avg:a1, a2==$s, a3==$p, a4==$d) from invoker.invoke("PersonWithAverageDosePerDrugIn2007", "sqwrl:avg", 3, false, new VPATH(), new BAVNs("avg", "s", "p", "d"), new UBA("avg"), $s, $p, $d) 
then 
  invoker.invoke("PersonWithAverageDosePerDrugIn2007", "sqwrl:select", 0, true, $p, $d, $avg); 
end
Rule name: NumberOfCarsUsingSets-makeCollection
rule "NumberOfCarsUsingSets-makeCollection" 
when 
  CAA(c=="Car", $c:i) 
  BAP($s:a1, a2==$c) from invoker.invoke("NumberOfCarsUsingSets", "sqwrl:makeSet", 0, false, new VPATH(), new BAVNs("s", "c"), new UBA("s"), $c) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: NumberOfCarsUsingSets-operateCollection
rule "NumberOfCarsUsingSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="NumberOfCarsUsingSets", collectionName=="s")
  CAA(c=="Car", $c:i) 
  BAP($size:a1, a2==$s) from invoker.invoke("NumberOfCarsUsingSets", "sqwrl:size", 1, false, new VPATH(), new BAVNs("size", "s"), new UBA("size"), $s) 
then 
  invoker.invoke("NumberOfCarsUsingSets", "sqwrl:select", 0, true, $size); 
end
Rule name: AverageBag-makeCollection
rule "AverageBag-makeCollection" 
when 
  BAP($b:a1) from invoker.invoke("AverageBag", "sqwrl:makeBag", 0, false, new VPATH(), new BAVNs("b", ""), new UBA("b"), new L("1", "xsd:integer")) 
  BAP(a1==$b) from invoker.invoke("AverageBag", "sqwrl:makeBag", 1, false, new VPATH(), new BAVNs("b", ""), $b, new L("2", "xsd:integer")) 
  BAP(a1==$b) from invoker.invoke("AverageBag", "sqwrl:makeBag", 2, false, new VPATH(), new BAVNs("b", ""), $b, new L("3", "xsd:integer")) 
then 
  sqwrlInferrer.infer($b); 
  sqwrlInferrer.infer($b); 
  sqwrlInferrer.infer($b); 
end
Rule name: AverageBag-operateCollection
rule "AverageBag-operateCollection" 
when 
  $b:SQWRLC(queryName=="AverageBag", collectionName=="b")
  BAP($size:a1, a2==$b) from invoker.invoke("AverageBag", "sqwrl:avg", 3, false, new VPATH(), new BAVNs("size", "b"), new UBA("size"), $b) 
then 
  invoker.invoke("AverageBag", "sqwrl:select", 0, true, $size); 
end
Rule name: AverageSalesAmountPerPerson-makeCollection
rule "AverageSalesAmountPerPerson-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasSales", $sale:o) 
  DPAA(s==$sale, p.id=="hasAmount", $amt:o) 
  BAP($b:a1, a2==$amt, a3==$p) from invoker.invoke("AverageSalesAmountPerPerson", "sqwrl:makeBag", 0, false, new VPATH($p, $sale), new BAVNs("b", "amt", "p"), new UBA("b"), $amt, $p) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: AverageSalesAmountPerPerson-operateCollection
rule "AverageSalesAmountPerPerson-operateCollection" 
when 
  $b:SQWRLC(queryName=="AverageSalesAmountPerPerson", collectionName=="b")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasSales", $sale:o) 
  DPAA(s==$sale, p.id=="hasAmount", $amt:o) 
  BAP($avg:a1, a2==$b, a3==$p) from invoker.invoke("AverageSalesAmountPerPerson", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avg", "b", "p"), new UBA("avg"), $b, $p) 
then 
  invoker.invoke("AverageSalesAmountPerPerson", "sqwrl:select", 0, true, $p, $avg); 
  invoker.invoke("AverageSalesAmountPerPerson", "sqwrl:orderBy", 1, true, $p, $avg); 
end
Rule name: AlphabeticallyAllExceptFirstNameWithSets-makeCollection
rule "AlphabeticallyAllExceptFirstNameWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallyAllExceptFirstNameWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallyAllExceptFirstNameWithSets-operateCollection
rule "AlphabeticallyAllExceptFirstNameWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallyAllExceptFirstNameWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($notFirstL:a1, a2==$s) from invoker.invoke("AlphabeticallyAllExceptFirstNameWithSets", "sqwrl:notFirst", 1, false, new VPATH(), new BAVNs("notFirstL", "s"), new UBA("notFirstL"), $s) 
  BAP($e:a1, a2==$notFirstL) from invoker.invoke("AlphabeticallyAllExceptFirstNameWithSets", "sqwrl:element", 2, false, new VPATH(), new BAVNs("e", "notFirstL"), new UBA("e"), $notFirstL) 
then 
  invoker.invoke("AlphabeticallyAllExceptFirstNameWithSets", "sqwrl:select", 0, true, $e); 
  invoker.invoke("AlphabeticallyAllExceptFirstNameWithSets", "sqwrl:orderBy", 1, true, $e); 
end
Rule name: PersonsWithNonDDITreatments-makeCollection
rule "PersonsWithNonDDITreatments-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP($s:a1, a2==$d, a3==$p) from invoker.invoke("PersonsWithNonDDITreatments", "sqwrl:makeSet", 0, false, new VPATH($t, $p), new BAVNs("s", "d", "p"), new UBA("s"), $d, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithNonDDITreatments-operateCollection
rule "PersonsWithNonDDITreatments-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithNonDDITreatments", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP(a2==$s, a3==$p) from invoker.invoke("PersonsWithNonDDITreatments", "sqwrl:notElement", 1, false, new VPATH(), new BAVNs("", "s", "p"), new I("DDI"), $s, $p) 
then 
  invoker.invoke("PersonsWithNonDDITreatments", "sqwrl:select", 0, true, $p); 
  invoker.invoke("PersonsWithNonDDITreatments", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithNonAZTTreatments-makeCollection
rule "PersonsWithNonAZTTreatments-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP($sp:a1, a2==$d, a3==$p) from invoker.invoke("PersonsWithNonAZTTreatments", "sqwrl:makeSet", 0, false, new VPATH($t, $p), new BAVNs("sp", "d", "p"), new UBA("sp"), $d, $p) 
  BAP($sazt:a1) from invoker.invoke("PersonsWithNonAZTTreatments", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("sazt", ""), new UBA("sazt"), new I("AZT")) 
then 
  sqwrlInferrer.infer($sp); 
  sqwrlInferrer.infer($sazt); 
end
Rule name: PersonsWithNonAZTTreatments-operateCollection
rule "PersonsWithNonAZTTreatments-operateCollection" 
when 
  $sp:SQWRLC(queryName=="PersonsWithNonAZTTreatments", collectionName=="sp")
  $sazt:SQWRLC(queryName=="PersonsWithNonAZTTreatments", collectionName=="sazt")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP(a1==$sp, a2==$sazt, a3==$p) from invoker.invoke("PersonsWithNonAZTTreatments", "sqwrl:notIntersects", 2, false, new VPATH(), new BAVNs("sp", "sazt", "p"), $sp, $sazt, $p) 
then 
  invoker.invoke("PersonsWithNonAZTTreatments", "sqwrl:select", 0, true, $p); 
end
Rule name: PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses-makeCollection
rule "PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($s:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("s", "dose", "p"), new UBA("s"), $dose, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses-operateCollection
rule "PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($lowest2s:a1, a2==$s, a4==$p) from invoker.invoke("PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:leastN", 1, false, new VPATH(), new BAVNs("lowest2s", "s", "", "p"), new UBA("lowest2s"), $s, new L("2", "xsd:integer"), $p) 
  BAP($greatest2s:a1, a2==$s, a4==$p) from invoker.invoke("PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:greatestN", 2, false, new VPATH(), new BAVNs("greatest2s", "s", "", "p"), new UBA("greatest2s"), $s, new L("2", "xsd:integer"), $p) 
  BAP($avgL2:a1, a2==$lowest2s, a3==$p) from invoker.invoke("PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:avg", 3, false, new VPATH(), new BAVNs("avgL2", "lowest2s", "p"), new UBA("avgL2"), $lowest2s, $p) 
  BAP($avgG2:a1, a2==$greatest2s, a3==$p) from invoker.invoke("PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:avg", 4, false, new VPATH(), new BAVNs("avgG2", "greatest2s", "p"), new UBA("avgG2"), $greatest2s, $p) 
then 
  invoker.invoke("PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:selectDistinct", 0, true, $p, $avgL2, $avgG2); 
  invoker.invoke("PersonsWithAveragesOfLowestAndHighestTwoDDITreatmentDoses", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses-makeCollection
rule "PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($s:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("s", "dose", "p"), new UBA("s"), $dose, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses-operateCollection
rule "PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($lowest2L:a1, a2==$s, a5==$p) from invoker.invoke("PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses", "sqwrl:nthSlice", 1, false, new VPATH(), new BAVNs("lowest2L", "s", "", "", "p"), new UBA("lowest2L"), $s, new L("1", "xsd:integer"), new L("2", "xsd:integer"), $p) 
  BAP($avg:a1, a2==$lowest2L, a3==$p) from invoker.invoke("PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses", "sqwrl:avg", 2, false, new VPATH(), new BAVNs("avg", "lowest2L", "p"), new UBA("avg"), $lowest2L, $p) 
  BAP($min:a1, a2==$lowest2L, a3==$p) from invoker.invoke("PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses", "sqwrl:min", 3, false, new VPATH(), new BAVNs("min", "lowest2L", "p"), new UBA("min"), $lowest2L, $p) 
then 
  invoker.invoke("PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses", "sqwrl:select", 0, true, $p, $avg, $min); 
  invoker.invoke("PersonsWithAverageAndMinOfLowestTwoDDITreatmentDoses", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: PersonsWithLowest2Doses-makeCollection
rule "PersonsWithLowest2Doses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($s:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithLowest2Doses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("s", "dose", "p"), new UBA("s"), $dose, $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithLowest2Doses-operateCollection
rule "PersonsWithLowest2Doses-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithLowest2Doses", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  BAP($lowest2C:a1, a2==$s, a4==$p) from invoker.invoke("PersonsWithLowest2Doses", "sqwrl:leastN", 1, false, new VPATH(), new BAVNs("lowest2C", "s", "", "p"), new UBA("lowest2C"), $s, new L("2", "xsd:integer"), $p) 
  BAP($lowest2:a1, a2==$lowest2C, a3==$p) from invoker.invoke("PersonsWithLowest2Doses", "sqwrl:element", 2, false, new VPATH(), new BAVNs("lowest2", "lowest2C", "p"), new UBA("lowest2"), $lowest2C, $p) 
then 
  invoker.invoke("PersonsWithLowest2Doses", "sqwrl:select", 0, true, $p, $lowest2); 
  invoker.invoke("PersonsWithLowest2Doses", "sqwrl:orderBy", 1, true, $p, $lowest2); 
end
Rule name: NumberOfAdults-makeCollection
rule "NumberOfAdults-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP(a1==$age) from invoker.invoke("NumberOfAdults", "swrlb:greaterThan", 0, false, new VPATH($p), new BAVNs("age", ""), $age, new L("17", "xsd:integer")) 
  BAP($s:a1, a2==$p) from invoker.invoke("NumberOfAdults", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("s", "p"), new UBA("s"), $p) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: NumberOfAdults-operateCollection
rule "NumberOfAdults-operateCollection" 
when 
  $s:SQWRLC(queryName=="NumberOfAdults", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP(a1==$age) from invoker.invoke("NumberOfAdults", "swrlb:greaterThan", 2, false, new VPATH($p), new BAVNs("age", ""), $age, new L("17", "xsd:integer")) 
  BAP($size:a1, a2==$s) from invoker.invoke("NumberOfAdults", "sqwrl:size", 3, false, new VPATH(), new BAVNs("size", "s"), new UBA("size"), $s) 
then 
  invoker.invoke("NumberOfAdults", "sqwrl:select", 0, true, $size); 
end
Rule name: AverageSet-makeCollection
rule "AverageSet-makeCollection" 
when 
  BAP($s:a1) from invoker.invoke("AverageSet", "sqwrl:makeSet", 0, false, new VPATH(), new BAVNs("s", ""), new UBA("s"), new L("1", "xsd:integer")) 
  BAP(a1==$s) from invoker.invoke("AverageSet", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("s", ""), $s, new L("3", "xsd:integer")) 
  BAP(a1==$s) from invoker.invoke("AverageSet", "sqwrl:makeSet", 2, false, new VPATH(), new BAVNs("s", ""), $s, new L("3", "xsd:integer")) 
then 
  sqwrlInferrer.infer($s); 
  sqwrlInferrer.infer($s); 
  sqwrlInferrer.infer($s); 
end
Rule name: AverageSet-operateCollection
rule "AverageSet-operateCollection" 
when 
  $s:SQWRLC(queryName=="AverageSet", collectionName=="s")
  BAP($avg:a1, a2==$s) from invoker.invoke("AverageSet", "sqwrl:avg", 3, false, new VPATH(), new BAVNs("avg", "s"), new UBA("avg"), $s) 
then 
  invoker.invoke("AverageSet", "sqwrl:select", 0, true, $avg); 
end
Rule name: AllAdultsWithCollections-makeCollection
rule "AllAdultsWithCollections-makeCollection" 
when 
  CAA(c=="Adult", $a:i) 
  BAP($s:a1, a2==$a) from invoker.invoke("AllAdultsWithCollections", "sqwrl:makeSet", 0, false, new VPATH(), new BAVNs("s", "a"), new UBA("s"), $a) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AllAdultsWithCollections-operateCollection
rule "AllAdultsWithCollections-operateCollection" 
when 
  $s:SQWRLC(queryName=="AllAdultsWithCollections", collectionName=="s")
  CAA(c=="Adult", $a:i) 
  BAP($e:a1, a2==$s) from invoker.invoke("AllAdultsWithCollections", "sqwrl:element", 1, false, new VPATH(), new BAVNs("e", "s"), new UBA("e"), $s) 
then 
  invoker.invoke("AllAdultsWithCollections", "sqwrl:select", 0, true, $e); 
  invoker.invoke("AllAdultsWithCollections", "sqwrl:orderBy", 1, true, $e); 
end
Rule name: PersonAverageDDIDosesAndAverageAllDDIDoses-makeCollection
rule "PersonAverageDDIDosesAndAverageAllDDIDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($sp:a1, a2==$dose, a3==$p) from invoker.invoke("PersonAverageDDIDosesAndAverageAllDDIDoses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("sp", "dose", "p"), new UBA("sp"), $dose, $p) 
  BAP($sddi:a1, a2==$dose) from invoker.invoke("PersonAverageDDIDosesAndAverageAllDDIDoses", "sqwrl:makeBag", 1, false, new VPATH($t, $sp, $p), new BAVNs("sddi", "dose"), new UBA("sddi"), $dose) 
then 
  sqwrlInferrer.infer($sp); 
  sqwrlInferrer.infer($sddi); 
end
Rule name: PersonAverageDDIDosesAndAverageAllDDIDoses-operateCollection
rule "PersonAverageDDIDosesAndAverageAllDDIDoses-operateCollection" 
when 
  $sp:SQWRLC(queryName=="PersonAverageDDIDosesAndAverageAllDDIDoses", collectionName=="sp")
  $sddi:SQWRLC(queryName=="PersonAverageDDIDosesAndAverageAllDDIDoses", collectionName=="sddi")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($avgP:a1, a2==$sp, a3==$p) from invoker.invoke("PersonAverageDDIDosesAndAverageAllDDIDoses", "sqwrl:avg", 2, false, new VPATH(), new BAVNs("avgP", "sp", "p"), new UBA("avgP"), $sp, $p) 
  BAP($avgDDI:a1, a2==$sddi) from invoker.invoke("PersonAverageDDIDosesAndAverageAllDDIDoses", "sqwrl:avg", 3, false, new VPATH(), new BAVNs("avgDDI", "sddi"), new UBA("avgDDI"), $sddi) 
then 
  invoker.invoke("PersonAverageDDIDosesAndAverageAllDDIDoses", "sqwrl:select", 0, true, $p, $avgP, $avgDDI); 
  invoker.invoke("PersonAverageDDIDosesAndAverageAllDDIDoses", "sqwrl:orderBy", 1, true, $p, $avgP, $avgDDI); 
end
Rule name: AlphabeticallySecondAndThirdNamesWithSets-makeCollection
rule "AlphabeticallySecondAndThirdNamesWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallySecondAndThirdNamesWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallySecondAndThirdNamesWithSets-operateCollection
rule "AlphabeticallySecondAndThirdNamesWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallySecondAndThirdNamesWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($second:a1, a2==$s) from invoker.invoke("AlphabeticallySecondAndThirdNamesWithSets", "sqwrl:nth", 1, false, new VPATH(), new BAVNs("second", "s", ""), new UBA("second"), $s, new L("2", "xsd:integer")) 
  BAP($third:a1, a2==$s) from invoker.invoke("AlphabeticallySecondAndThirdNamesWithSets", "sqwrl:nth", 2, false, new VPATH(), new BAVNs("third", "s", ""), new UBA("third"), $s, new L("3", "xsd:integer")) 
then 
  invoker.invoke("AlphabeticallySecondAndThirdNamesWithSets", "sqwrl:select", 0, true, $second, $third); 
end
Rule name: IntersectionTest-makeCollection
rule "IntersectionTest-makeCollection" 
when 
  BAP($s1:a1) from invoker.invoke("IntersectionTest", "sqwrl:makeSet", 0, false, new VPATH(), new BAVNs("s1", ""), new UBA("s1"), new I("DDI")) 
  BAP(a1==$s1) from invoker.invoke("IntersectionTest", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("s1", ""), $s1, new I("AZT")) 
  BAP($s2:a1) from invoker.invoke("IntersectionTest", "sqwrl:makeSet", 2, false, new VPATH(), new BAVNs("s2", ""), new UBA("s2"), new I("AZT")) 
then 
  sqwrlInferrer.infer($s1); 
  sqwrlInferrer.infer($s1); 
  sqwrlInferrer.infer($s2); 
end
Rule name: IntersectionTest-operateCollection
rule "IntersectionTest-operateCollection" 
when 
  $s1:SQWRLC(queryName=="IntersectionTest", collectionName=="s1")
  $s2:SQWRLC(queryName=="IntersectionTest", collectionName=="s2")
  BAP($i:a1, a2==$s1, a3==$s2) from invoker.invoke("IntersectionTest", "sqwrl:intersection", 3, false, new VPATH(), new BAVNs("i", "s1", "s2"), new UBA("i"), $s1, $s2) 
  BAP($size:a1, a2==$i) from invoker.invoke("IntersectionTest", "sqwrl:size", 4, false, new VPATH(), new BAVNs("size", "i"), new UBA("size"), $i) 
then 
  invoker.invoke("IntersectionTest", "sqwrl:select", 0, true, $size); 
end
Rule name: PersonsWithAboveAverageDDIDoses-makeCollection
rule "PersonsWithAboveAverageDDIDoses-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($sp:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithAboveAverageDDIDoses", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("sp", "dose", "p"), new UBA("sp"), $dose, $p) 
  BAP($sddi:a1, a2==$dose) from invoker.invoke("PersonsWithAboveAverageDDIDoses", "sqwrl:makeBag", 1, false, new VPATH($t, $sp, $p), new BAVNs("sddi", "dose"), new UBA("sddi"), $dose) 
then 
  sqwrlInferrer.infer($sp); 
  sqwrlInferrer.infer($sddi); 
end
Rule name: PersonsWithAboveAverageDDIDoses-operateCollection
rule "PersonsWithAboveAverageDDIDoses-operateCollection" 
when 
  $sp:SQWRLC(queryName=="PersonsWithAboveAverageDDIDoses", collectionName=="sp")
  $sddi:SQWRLC(queryName=="PersonsWithAboveAverageDDIDoses", collectionName=="sddi")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($avgP:a1, a2==$sp, a3==$p) from invoker.invoke("PersonsWithAboveAverageDDIDoses", "sqwrl:avg", 2, false, new VPATH(), new BAVNs("avgP", "sp", "p"), new UBA("avgP"), $sp, $p) 
  BAP($avgDDI:a1, a2==$sddi) from invoker.invoke("PersonsWithAboveAverageDDIDoses", "sqwrl:avg", 3, false, new VPATH(), new BAVNs("avgDDI", "sddi"), new UBA("avgDDI"), $sddi) 
  BAP(a1==$avgP, a2==$avgDDI) from invoker.invoke("PersonsWithAboveAverageDDIDoses", "swrlb:greaterThan", 4, false, new VPATH(), new BAVNs("avgP", "avgDDI"), $avgP, $avgDDI) 
then 
  invoker.invoke("PersonsWithAboveAverageDDIDoses", "sqwrl:select", 0, true, $p, $avgP, $avgDDI); 
  invoker.invoke("PersonsWithAboveAverageDDIDoses", "sqwrl:orderBy", 1, true, $p, $avgP, $avgDDI); 
end
Rule name: PersonsWithMaximumDosePerDrug-makeCollection
rule "PersonsWithMaximumDosePerDrug-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($s:a1, a2==$dose, a3==$p, a4==$d) from invoker.invoke("PersonsWithMaximumDosePerDrug", "sqwrl:makeBag", 0, false, new VPATH($d, $t, $p), new BAVNs("s", "dose", "p", "d"), new UBA("s"), $dose, $p, $d) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithMaximumDosePerDrug-operateCollection
rule "PersonsWithMaximumDosePerDrug-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithMaximumDosePerDrug", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($max:a1, a2==$s, a3==$p, a4==$d) from invoker.invoke("PersonsWithMaximumDosePerDrug", "sqwrl:max", 1, false, new VPATH(), new BAVNs("max", "s", "p", "d"), new UBA("max"), $s, $p, $d) 
then 
  invoker.invoke("PersonsWithMaximumDosePerDrug", "sqwrl:select", 0, true, $p, $d, $max); 
  invoker.invoke("PersonsWithMaximumDosePerDrug", "sqwrl:orderBy", 1, true, $p, $d); 
end
Rule name: AlphabeticallySecondAndThirdLastNamesWithSets-makeCollection
rule "AlphabeticallySecondAndThirdLastNamesWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallySecondAndThirdLastNamesWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallySecondAndThirdLastNamesWithSets-operateCollection
rule "AlphabeticallySecondAndThirdLastNamesWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallySecondAndThirdLastNamesWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($secondAndThirdLastL:a1, a2==$s) from invoker.invoke("AlphabeticallySecondAndThirdLastNamesWithSets", "sqwrl:nthLastSlice", 1, false, new VPATH(), new BAVNs("secondAndThirdLastL", "s", "", ""), new UBA("secondAndThirdLastL"), $s, new L("3", "xsd:integer"), new L("2", "xsd:integer")) 
  BAP($e:a1, a2==$secondAndThirdLastL) from invoker.invoke("AlphabeticallySecondAndThirdLastNamesWithSets", "sqwrl:element", 2, false, new VPATH(), new BAVNs("e", "secondAndThirdLastL"), new UBA("e"), $secondAndThirdLastL) 
then 
  invoker.invoke("AlphabeticallySecondAndThirdLastNamesWithSets", "sqwrl:select", 0, true, $e); 
end
Rule name: PersonsWithDDITreatments-makeCollection
rule "PersonsWithDDITreatments-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP($sp:a1, a2==$d, a3==$p) from invoker.invoke("PersonsWithDDITreatments", "sqwrl:makeSet", 0, false, new VPATH($t, $p), new BAVNs("sp", "d", "p"), new UBA("sp"), $d, $p) 
then 
  sqwrlInferrer.infer($sp); 
end
Rule name: PersonsWithDDITreatments-operateCollection
rule "PersonsWithDDITreatments-operateCollection" 
when 
  $sp:SQWRLC(queryName=="PersonsWithDDITreatments", collectionName=="sp")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP(a2==$sp, a3==$p) from invoker.invoke("PersonsWithDDITreatments", "sqwrl:element", 1, false, new VPATH(), new BAVNs("", "sp", "p"), new I("DDI"), $sp, $p) 
then 
  invoker.invoke("PersonsWithDDITreatments", "sqwrl:select", 0, true, $p); 
  invoker.invoke("PersonsWithDDITreatments", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: DifferenceTest-makeCollection
rule "DifferenceTest-makeCollection" 
when 
  BAP($s1:a1) from invoker.invoke("DifferenceTest", "sqwrl:makeSet", 0, false, new VPATH(), new BAVNs("s1", ""), new UBA("s1"), new I("DDI")) 
  BAP($s2:a1) from invoker.invoke("DifferenceTest", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("s2", ""), new UBA("s2"), new I("AZT")) 
then 
  sqwrlInferrer.infer($s1); 
  sqwrlInferrer.infer($s2); 
end
Rule name: DifferenceTest-operateCollection
rule "DifferenceTest-operateCollection" 
when 
  $s1:SQWRLC(queryName=="DifferenceTest", collectionName=="s1")
  $s2:SQWRLC(queryName=="DifferenceTest", collectionName=="s2")
  BAP($d:a1, a2==$s1, a3==$s2) from invoker.invoke("DifferenceTest", "sqwrl:difference", 2, false, new VPATH(), new BAVNs("d", "s1", "s2"), new UBA("d"), $s1, $s2) 
  BAP($size:a1, a2==$d) from invoker.invoke("DifferenceTest", "sqwrl:size", 3, false, new VPATH(), new BAVNs("size", "d"), new UBA("size"), $d) 
then 
  invoker.invoke("DifferenceTest", "sqwrl:select", 0, true, $size); 
end
Rule name: PersonsWithDDIOrAZTTreatments-makeCollection
rule "PersonsWithDDIOrAZTTreatments-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP($s:a1, a2==$d, a3==$p) from invoker.invoke("PersonsWithDDIOrAZTTreatments", "sqwrl:makeSet", 0, false, new VPATH($t, $p), new BAVNs("s", "d", "p"), new UBA("s"), $d, $p) 
  BAP($sd:a1) from invoker.invoke("PersonsWithDDIOrAZTTreatments", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("sd", ""), new UBA("sd"), new I("DDI")) 
  BAP(a1==$sd) from invoker.invoke("PersonsWithDDIOrAZTTreatments", "sqwrl:makeSet", 2, false, new VPATH(), new BAVNs("sd", ""), $sd, new I("AZT")) 
then 
  sqwrlInferrer.infer($s); 
  sqwrlInferrer.infer($sd); 
  sqwrlInferrer.infer($sd); 
end
Rule name: PersonsWithDDIOrAZTTreatments-operateCollection
rule "PersonsWithDDIOrAZTTreatments-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithDDIOrAZTTreatments", collectionName=="s")
  $sd:SQWRLC(queryName=="PersonsWithDDIOrAZTTreatments", collectionName=="sd")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP(a1==$s, a2==$sd, a3==$p) from invoker.invoke("PersonsWithDDIOrAZTTreatments", "sqwrl:intersects", 3, false, new VPATH(), new BAVNs("s", "sd", "p"), $s, $sd, $p) 
then 
  invoker.invoke("PersonsWithDDIOrAZTTreatments", "sqwrl:select", 0, true, $p); 
  invoker.invoke("PersonsWithDDIOrAZTTreatments", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: AverageSaleAmountPerProduct-makeCollection
rule "AverageSaleAmountPerProduct-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasSales", $sale:o) 
  DPAA(s==$sale, p.id=="hasAmount", $amt:o) 
  OPAA(s==$sale, p.id=="hasProduct", $product:o) 
  BAP($s:a1, a2==$amt, a3==$product) from invoker.invoke("AverageSaleAmountPerProduct", "sqwrl:makeSet", 0, false, new VPATH($product, $p, $sale), new BAVNs("s", "amt", "product"), new UBA("s"), $amt, $product) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AverageSaleAmountPerProduct-operateCollection
rule "AverageSaleAmountPerProduct-operateCollection" 
when 
  $s:SQWRLC(queryName=="AverageSaleAmountPerProduct", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasSales", $sale:o) 
  DPAA(s==$sale, p.id=="hasAmount", $amt:o) 
  OPAA(s==$sale, p.id=="hasProduct", $product:o) 
  BAP($avg:a1, a2==$s, a3==$product) from invoker.invoke("AverageSaleAmountPerProduct", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avg", "s", "product"), new UBA("avg"), $s, $product) 
then 
  invoker.invoke("AverageSaleAmountPerProduct", "sqwrl:select", 0, true, $product, $avg); 
  invoker.invoke("AverageSaleAmountPerProduct", "sqwrl:orderBy", 1, true, $product, $avg); 
end
Rule name: AverageAgeOfPersonsWithBags-makeCollection
rule "AverageAgeOfPersonsWithBags-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP($b:a1, a2==$age) from invoker.invoke("AverageAgeOfPersonsWithBags", "sqwrl:makeBag", 0, false, new VPATH($p), new BAVNs("b", "age"), new UBA("b"), $age) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: AverageAgeOfPersonsWithBags-operateCollection
rule "AverageAgeOfPersonsWithBags-operateCollection" 
when 
  $b:SQWRLC(queryName=="AverageAgeOfPersonsWithBags", collectionName=="b")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasAge", $age:o) 
  BAP($avg:a1, a2==$b) from invoker.invoke("AverageAgeOfPersonsWithBags", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avg", "b"), new UBA("avg"), $b) 
then 
  invoker.invoke("AverageAgeOfPersonsWithBags", "sqwrl:select", 0, true, $avg); 
end
Rule name: PersonsWithAverageDDIDoseMoreThan10PercentOfAverage-makeCollection
rule "PersonsWithAverageDDIDoseMoreThan10PercentOfAverage-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($sp:a1, a2==$dose, a3==$p) from invoker.invoke("PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", "sqwrl:makeBag", 0, false, new VPATH($t, $p), new BAVNs("sp", "dose", "p"), new UBA("sp"), $dose, $p) 
  BAP($sddi:a1, a2==$dose) from invoker.invoke("PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", "sqwrl:makeBag", 1, false, new VPATH($t, $sp, $p), new BAVNs("sddi", "dose"), new UBA("sddi"), $dose) 
then 
  sqwrlInferrer.infer($sp); 
  sqwrlInferrer.infer($sddi); 
end
Rule name: PersonsWithAverageDDIDoseMoreThan10PercentOfAverage-operateCollection
rule "PersonsWithAverageDDIDoseMoreThan10PercentOfAverage-operateCollection" 
when 
  $sp:SQWRLC(queryName=="PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", collectionName=="sp")
  $sddi:SQWRLC(queryName=="PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", collectionName=="sddi")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($avgP:a1, a2==$sp, a3==$p) from invoker.invoke("PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", "sqwrl:avg", 2, false, new VPATH(), new BAVNs("avgP", "sp", "p"), new UBA("avgP"), $sp, $p) 
  BAP($avgDDI:a1, a2==$sddi) from invoker.invoke("PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", "sqwrl:avg", 3, false, new VPATH(), new BAVNs("avgDDI", "sddi"), new UBA("avgDDI"), $sddi) 
  BAP($r:a1, a3==$avgP, a4==$avgDDI) from invoker.invoke("PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", "swrlm:eval", 4, false, new VPATH(), new BAVNs("r", "", "avgP", "avgDDI"), new UBA("r"), new L("(avgP - avgDDI) / avgDDI * 100", "xsd:string"), $avgP, $avgDDI) 
  BAP(a1==$r) from invoker.invoke("PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", "swrlb:greaterThan", 5, false, new VPATH(), new BAVNs("r", ""), $r, new L("10", "xsd:integer")) 
then 
  invoker.invoke("PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", "sqwrl:select", 0, true, $p, $avgP, $avgDDI); 
  invoker.invoke("PersonsWithAverageDDIDoseMoreThan10PercentOfAverage", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: MaximumOfAverageSalePerPerson-makeCollection
rule "MaximumOfAverageSalePerPerson-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasSales", $sale:o) 
  DPAA(s==$sale, p.id=="hasAmount", $amt:o) 
  BAP($b:a1, a2==$amt, a3==$p) from invoker.invoke("MaximumOfAverageSalePerPerson", "sqwrl:makeBag", 0, false, new VPATH($p, $sale), new BAVNs("b", "amt", "p"), new UBA("b"), $amt, $p) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: MaximumOfAverageSalePerPerson-operateCollection
rule "MaximumOfAverageSalePerPerson-operateCollection" 
when 
  $b:SQWRLC(queryName=="MaximumOfAverageSalePerPerson", collectionName=="b")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasSales", $sale:o) 
  DPAA(s==$sale, p.id=="hasAmount", $amt:o) 
  BAP($avg:a1, a2==$b, a3==$p) from invoker.invoke("MaximumOfAverageSalePerPerson", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avg", "b", "p"), new UBA("avg"), $b, $p) 
then 
  invoker.invoke("MaximumOfAverageSalePerPerson", "sqwrl:select", 0, true, $p, $avg); 
  invoker.invoke("MaximumOfAverageSalePerPerson", "sqwrl:orderByDescending", 1, true, $avg); 
  invoker.invoke("MaximumOfAverageSalePerPerson", "sqwrl:firstN", 2, true, new L("1", "xsd:integer")); 
end
Rule name: PersonsWithNumberOfDosesAndAverageDosePerDrug-makeCollection
rule "PersonsWithNumberOfDosesAndAverageDosePerDrug-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($s:a1, a2==$dose, a3==$p, a4==$d) from invoker.invoke("PersonsWithNumberOfDosesAndAverageDosePerDrug", "sqwrl:makeBag", 0, false, new VPATH($d, $t, $p), new BAVNs("s", "dose", "p", "d"), new UBA("s"), $dose, $p, $d) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: PersonsWithNumberOfDosesAndAverageDosePerDrug-operateCollection
rule "PersonsWithNumberOfDosesAndAverageDosePerDrug-operateCollection" 
when 
  $s:SQWRLC(queryName=="PersonsWithNumberOfDosesAndAverageDosePerDrug", collectionName=="s")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  DPAA(s==$t, p.id=="hasDose", $dose:o) 
  BAP($avg:a1, a2==$s, a3==$p, a4==$d) from invoker.invoke("PersonsWithNumberOfDosesAndAverageDosePerDrug", "sqwrl:avg", 1, false, new VPATH(), new BAVNs("avg", "s", "p", "d"), new UBA("avg"), $s, $p, $d) 
  BAP($size:a1, a2==$s, a3==$p, a4==$d) from invoker.invoke("PersonsWithNumberOfDosesAndAverageDosePerDrug", "sqwrl:size", 2, false, new VPATH(), new BAVNs("size", "s", "p", "d"), new UBA("size"), $s, $p, $d) 
then 
  invoker.invoke("PersonsWithNumberOfDosesAndAverageDosePerDrug", "sqwrl:select", 0, true, $p, $d, $size, $avg); 
  invoker.invoke("PersonsWithNumberOfDosesAndAverageDosePerDrug", "sqwrl:orderBy", 1, true, $p, $d); 
end
Rule name: LowestDDIDosePerPatient-makeCollection
rule "LowestDDIDosePerPatient-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$tr, p.id=="hasDose", $dose:o) 
  BAP($b:a1, a2==$dose, a3==$p) from invoker.invoke("LowestDDIDosePerPatient", "sqwrl:makeSet", 0, false, new VPATH($tr, $p), new BAVNs("b", "dose", "p"), new UBA("b"), $dose, $p) 
then 
  sqwrlInferrer.infer($b); 
end
Rule name: LowestDDIDosePerPatient-operateCollection
rule "LowestDDIDosePerPatient-operateCollection" 
when 
  $b:SQWRLC(queryName=="LowestDDIDosePerPatient", collectionName=="b")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $tr:o) 
  OPAA(s==$tr, p.id=="hasDrug", o.id=="DDI") 
  DPAA(s==$tr, p.id=="hasDose", $dose:o) 
  BAP($leastDose:a1, a2==$b, a3==$p) from invoker.invoke("LowestDDIDosePerPatient", "sqwrl:least", 1, false, new VPATH(), new BAVNs("leastDose", "b", "p"), new UBA("leastDose"), $b, $p) 
  BAP(a1==$leastDose, a2==$dose) from invoker.invoke("LowestDDIDosePerPatient", "swrlb:equal", 2, false, new VPATH(), new BAVNs("leastDose", "dose"), $leastDose, $dose) 
then 
  invoker.invoke("LowestDDIDosePerPatient", "sqwrl:select", 0, true, $p, $leastDose); 
  invoker.invoke("LowestDDIDosePerPatient", "sqwrl:orderBy", 1, true, $p, $leastDose); 
end
Rule name: AlphabeticallyAllExceptThirdLastNameWithSets-makeCollection
rule "AlphabeticallyAllExceptThirdLastNameWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallyAllExceptThirdLastNameWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallyAllExceptThirdLastNameWithSets-operateCollection
rule "AlphabeticallyAllExceptThirdLastNameWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallyAllExceptThirdLastNameWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($notThirdLastL:a1, a2==$s) from invoker.invoke("AlphabeticallyAllExceptThirdLastNameWithSets", "sqwrl:notNthLast", 1, false, new VPATH(), new BAVNs("notThirdLastL", "s", ""), new UBA("notThirdLastL"), $s, new L("3", "xsd:integer")) 
  BAP($e:a1, a2==$notThirdLastL) from invoker.invoke("AlphabeticallyAllExceptThirdLastNameWithSets", "sqwrl:element", 2, false, new VPATH(), new BAVNs("e", "notThirdLastL"), new UBA("e"), $notThirdLastL) 
then 
  invoker.invoke("AlphabeticallyAllExceptThirdLastNameWithSets", "sqwrl:select", 0, true, $e); 
  invoker.invoke("AlphabeticallyAllExceptThirdLastNameWithSets", "sqwrl:orderBy", 1, true, $e); 
end
Rule name: PersonsTreatedWith2ExactlyDrugs-makeCollection
rule "PersonsTreatedWith2ExactlyDrugs-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP($sp:a1, a2==$d, a3==$p) from invoker.invoke("PersonsTreatedWith2ExactlyDrugs", "sqwrl:makeSet", 0, false, new VPATH($t, $p), new BAVNs("sp", "d", "p"), new UBA("sp"), $d, $p) 
then 
  sqwrlInferrer.infer($sp); 
end
Rule name: PersonsTreatedWith2ExactlyDrugs-operateCollection
rule "PersonsTreatedWith2ExactlyDrugs-operateCollection" 
when 
  $sp:SQWRLC(queryName=="PersonsTreatedWith2ExactlyDrugs", collectionName=="sp")
  CAA(c=="Person", $p:i) 
  OPAA(s==$p, p.id=="hasTreatment", $t:o) 
  OPAA(s==$t, p.id=="hasDrug", $d:o) 
  BAP(a2==$sp, a3==$p) from invoker.invoke("PersonsTreatedWith2ExactlyDrugs", "sqwrl:size", 1, false, new VPATH(), new BAVNs("", "sp", "p"), new L("2", "xsd:integer"), $sp, $p) 
then 
  invoker.invoke("PersonsTreatedWith2ExactlyDrugs", "sqwrl:select", 0, true, $p); 
  invoker.invoke("PersonsTreatedWith2ExactlyDrugs", "sqwrl:orderBy", 1, true, $p); 
end
Rule name: DifferentCollectionsEqualTest-makeCollection
rule "DifferentCollectionsEqualTest-makeCollection" 
when 
  BAP($s1:a1) from invoker.invoke("DifferentCollectionsEqualTest", "sqwrl:makeSet", 0, false, new VPATH(), new BAVNs("s1", ""), new UBA("s1"), new I("AZT")) 
  BAP($s2:a1) from invoker.invoke("DifferentCollectionsEqualTest", "sqwrl:makeSet", 1, false, new VPATH(), new BAVNs("s2", ""), new UBA("s2"), new I("AZT")) 
then 
  sqwrlInferrer.infer($s1); 
  sqwrlInferrer.infer($s2); 
end
Rule name: DifferentCollectionsEqualTest-operateCollection
rule "DifferentCollectionsEqualTest-operateCollection" 
when 
  $s1:SQWRLC(queryName=="DifferentCollectionsEqualTest", collectionName=="s1")
  $s2:SQWRLC(queryName=="DifferentCollectionsEqualTest", collectionName=="s2")
  BAP(a1==$s1, a2==$s2) from invoker.invoke("DifferentCollectionsEqualTest", "sqwrl:equal", 2, false, new VPATH(), new BAVNs("s1", "s2"), $s1, $s2) 
then 
  invoker.invoke("DifferentCollectionsEqualTest", "sqwrl:select", 0, true, new L("Equal!", "xsd:string")); 
end
Rule name: AlphabeticallySecondNameWithSets-makeCollection
rule "AlphabeticallySecondNameWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallySecondNameWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallySecondNameWithSets-operateCollection
rule "AlphabeticallySecondNameWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallySecondNameWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($second:a1, a2==$s) from invoker.invoke("AlphabeticallySecondNameWithSets", "sqwrl:nth", 1, false, new VPATH(), new BAVNs("second", "s", ""), new UBA("second"), $s, new L("2", "xsd:integer")) 
then 
  invoker.invoke("AlphabeticallySecondNameWithSets", "sqwrl:select", 0, true, $second); 
end
Rule name: AlphabeticallyFirstAndLastNamesWithSets-makeCollection
rule "AlphabeticallyFirstAndLastNamesWithSets-makeCollection" 
when 
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($s:a1, a2==$name) from invoker.invoke("AlphabeticallyFirstAndLastNamesWithSets", "sqwrl:makeSet", 0, false, new VPATH($p), new BAVNs("s", "name"), new UBA("s"), $name) 
then 
  sqwrlInferrer.infer($s); 
end
Rule name: AlphabeticallyFirstAndLastNamesWithSets-operateCollection
rule "AlphabeticallyFirstAndLastNamesWithSets-operateCollection" 
when 
  $s:SQWRLC(queryName=="AlphabeticallyFirstAndLastNamesWithSets", collectionName=="s")
  CAA(c=="Person", $p:i) 
  DPAA(s==$p, p.id=="hasName", $name:o) 
  BAP($first:a1, a2==$s) from invoker.invoke("AlphabeticallyFirstAndLastNamesWithSets", "sqwrl:first", 1, false, new VPATH(), new BAVNs("first", "s"), new UBA("first"), $s) 
  BAP($last:a1, a2==$s) from invoker.invoke("AlphabeticallyFirstAndLastNamesWithSets", "sqwrl:last", 2, false, new VPATH(), new BAVNs("last", "s"), new UBA("last"), $s) 
then 
  invoker.invoke("AlphabeticallyFirstAndLastNamesWithSets", "sqwrl:select", 0, true, $first, $last); 
  invoker.invoke("AlphabeticallyFirstAndLastNamesWithSets", "sqwrl:orderBy", 1, true, $last, $first); 
end

