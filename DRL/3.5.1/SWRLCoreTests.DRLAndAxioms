Running tests with rule engine Drools
Running test test-different-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query...
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_SCO)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_INV2)
Axiom: CAA(Person, s9)
Axiom: DDPA(temporal:hasCount, temporal:Duration)
Axiom: CAA(temporal:Granularity, temporal:Milliseconds)
Axiom: OPDA(hasUncle)
Axiom: DPAA(s9, hasID, L("s9ID", xsd:string))
Axiom: DPAA(m10, hasID, L("m10ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXC2)
Axiom: FDPA(hasFirstAccessTime)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_FP)
Axiom: RDPA(isFrench, xsd:boolean)
Axiom: SIA(s8, s8)
Axiom: SIA(s8, s7)
Axiom: SIA(s7, s7)
Axiom: SIA(s7, s8)
Axiom: DPAA(p1, hasNumberOfCars, L(3, xsd:integer))
Axiom: DPAA(d16, hasID, L("d16ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_THING)
Axiom: CAA(Person, p6)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_HV)
Axiom: DPAA(d7, hasID, L("d7ID", xsd:string))
Axiom: DDPA(hasID, Person)
Axiom: DOPA(protege:FROM, protege:DIRECTED-BINARY-RELATION)
Axiom: DPAA(p1, hasAge, L(66, xsd:integer))
Axiom: CAA(Person, s2)
Axiom: DPAA(m2, hasID, L("m2ID", xsd:string))
Axiom: DPAA(p1, hasLastAccessTime, L("2011-11-11T23:21:00.0", xsd:dateTime))
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_TRP)
Axiom: FDPA(swrla:isRuleEnabled)
Rule name: test-temporal-built-in-add-and-after-with-now-rule
rule "test-temporal-built-in-add-and-after-with-now-rule" 
when 
   BAP($now:a1) from invoker.invoke("test-temporal-built-in-add-and-after-with-now-rule", "temporal:add", 0, false, new VPATH(), new BAVNs("now", "", "", ""), new UBA("now"), new L("now", "xsd:string"), new L("-2", "xsd:integer"), new I("temporal:Years")) 
then 
   DPAA dpaa0=new DPAA(new I("p14"), "hasLastAccessTime", new L($now)); inferrer.infer(dpaa0);  
end
Axiom: CAA(Person, d7)
Axiom: CDA(temporal:ValidTime)
Axiom: FDPA(temporal:hasTime)
Rule name: test-object-property-atom-with-named-subject-and-variable-object-rule
rule "test-object-property-atom-with-named-subject-and-variable-object-rule" 
when 
   CAA(c=="Male", $u:i) 
   OPAA(s.id=="m7", p.id=="hasFather", o.id=="m8") 
   DPAA(s==$u, p.id=="hasID", o==new L("m9ID", "xsd:string")) 
   OPAA(s.id=="m8", p.id=="hasBrother", o==$u) 
then 
   OPAA opaa0=new OPAA(new I("m7"), "hasUncle", new I($u)); inferrer.infer(opaa0);  
end
Axiom: DDPA(isFrench, Person)
Axiom: DPAA(m3, hasID, L("m3ID", xsd:string))
Axiom: DPAA(p7, hasID, L("p7ID", xsd:string))
Axiom: SCA(Female, Person)
Axiom: DPAA(s11, hasID, L("s11ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_REP_O)
Axiom: SIA(s6, s6)
Axiom: SIA(s6, s5)
Axiom: SIA(s5, s5)
Axiom: SIA(s5, s6)
Axiom: CAA(Person, d4)
Axiom: DDPA(swrla:isRuleEnabled, swrl:Imp)
Axiom: CAA(Person, d12)
Axiom: FDPA(swrla:isRuleGroupEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_OP)
Axiom: DPDA(isFrench)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_KEY)
Axiom: DPDA(rdfs:comment)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("p2"), "isFrench", new L(new L("true", "xsd:boolean"))); inferrer.infer(dpaa0);  
end
Axiom: CAA(Person, p14)
Axiom: DPAA(s1, hasID, L("s1ID", xsd:string))
Axiom: CAA(temporal:Granularity, temporal:Months)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_HV1)
Axiom: DPDA(hasAge)
Rule name: test-object-property-atom-with-variable-subject-and-variable-object-rule
rule "test-object-property-atom-with-variable-subject-and-variable-object-rule" 
when 
   CAA(c=="Male", $p:i) 
   CAA(c=="Male", $f:i) 
   CAA(c=="Male", $u:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("m4ID", "xsd:string")) 
   DPAA(s==$f, p.id=="hasID", o==new L("m5ID", "xsd:string")) 
   DPAA(s==$u, p.id=="hasID", o==new L("m6ID", "xsd:string")) 
   OPAA(s==$p, p.id=="hasFather", o==$f) 
   OPAA(s==$f, p.id=="hasBrother", o==$u) 
then 
   OPAA opaa0=new OPAA(new I($p), "hasUncle", new I($u)); inferrer.infer(opaa0);  
end
Axiom: CDA(Male)
Axiom: OPDA(temporal:hasGranularity)
Axiom: DPDA(protege:PAL-DESCRIPTION)
Axiom: SIA(s3, s3)
Axiom: SIA(s3, s4)
Axiom: SIA(s4, s4)
Axiom: SIA(s4, s3)
Axiom: CAA(temporal:Granularity, temporal:Minutes)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_SVF2)
Axiom: FDPA(swrla:isOWL2RLRuleEnabled)
Rule name: test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-rule
rule "test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-rule" 
when 
then 
   DIA dia0=new DIA(new I("d14"), new I("d15")); inferrer.infer(dia0);  
end
Axiom: DDPA(swrla:isRuleGroupEnabled, swrla:RuleGroup)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-rule" 
when 
   BAP($x:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-rule", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("22", "xsd:integer"), new L("0", "xsd:integer")) 
then 
   DPAA dpaa0=new DPAA(new I("p9"), "hasAge", new L($x)); inferrer.infer(dpaa0);  
end
Axiom: CDA(temporal:Entity)
Axiom: SCA(temporal:Duration, temporal:Entity)
Axiom: CAA(Person, d5)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_REF)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_EQ)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-rule" 
when 
   BAP($dt:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-rule", "swrlb:addDayTimeDurationToDateTime", 0, false, new VPATH(), new BAVNs("dt", "", ""), new UBA("dt"), new L("1999-01-01T12:12:12", "xsd:string"), new L("P1Y", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I("p13"), "hasLastAccessTime", new L($dt)); inferrer.infer(dpaa0);  
end
Axiom: DPAA(p3, hasDOB, L("2002-01-01", xsd:date))
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "isFrench", new L(new L("true", "xsd:boolean"))); inferrer.infer(dpaa0);  
end
Axiom: CAA(Person, d9)Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasFirstName", new L(new L("Angela", "xsd:string"))); inferrer.infer(dpaa0);  
end

Axiom: FDPA(hasDOB)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="isFrench", $f:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "isFrench", new L($f)); inferrer.infer(dpaa0);  
end
Axiom: DDPA(hasAge, Person)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="hasAge", $a:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "hasAge", new L($a)); inferrer.infer(dpaa0);  
end
Axiom: DOPA(hasUncle, Person)
Axiom: DPAA(m4, hasID, L("m4ID", xsd:string))
Axiom: DPAA(s12, hasID, L("s12ID", xsd:string))
Axiom: CAA(temporal:Granularity, temporal:Hours)
Axiom: ROPA(hasBrother, Male)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXQC3)
Axiom: DPDA(hasBMI)
Axiom: DPAA(s2, hasID, L("s2ID", xsd:string))
Axiom: DPAA(d2, hasID, L("d2ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_AVF2)
Axiom: CAA(Person, d1)
Axiom: CAA(Person, s6)
Axiom: DPAA(d5, hasID, L("d5ID", xsd:string))
Axiom: DIA(d7, d8)
Axiom: DIA(d8, d7)
Axiom: CAA(Person, d6)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_INT1)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_UNI)
Axiom: RDPA(temporal:hasTime, xsd:dateTime)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXC1)
Axiom: FDPA(hasLastAccessTime)
Axiom: DDPA(hasFirstAccessTime, Person)
Axiom: CAA(Person, s11)
Axiom: FDPA(hasNumberOfCars)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_COM)
Axiom: RDPA(swrla:isRuleEnabled, xsd:boolean)
Axiom: OPAA(m5, hasBrother, m6)
Axiom: DPAA(m1, hasID, L("m1ID", xsd:string))
Axiom: CAA(temporal:Granularity, temporal:Days)
Axiom: CDA(Female)
Axiom: RDPA(hasLastAccessTime, xsd:dateTime)
Axiom: DPDA(swrla:hasBuiltInPhrase)
Axiom: DPDA(swrla:hasBuiltInPhrase)
Axiom: DOPA(hasFather, Person)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_DIFF1)
Axiom: DPDA(swrla:hasPropertyPhrase)
Axiom: DPDA(swrla:hasPropertyPhrase)
Axiom: CAA(Person, s5)
Axiom: DDPA(isDiabetic, Person)
Axiom: RDPA(hasHeightInCM, xsd:double)
Axiom: DPAA(d13, hasID, L("d13ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_DOM2)
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_DW)
Axiom: CAA(Male, m9)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="hasFirstName", $fn:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "hasFirstName", new L($fn)); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-rule" 
when 
   CAA(c=="Person", $pA:i) 
   CAA(c=="Person", $pB:i) 
   DPAA(s==$pA, p.id=="hasID", o==new L("p5ID", "xsd:string")) 
   DPAA(s==$pB, p.id=="hasID", o==new L("p6ID", "xsd:string")) 
   DPAA(s==$pA, p.id=="hasHeightInCM", $h:o) 
then 
   DPAA dpaa0=new DPAA(new I($pB), "hasHeightInCM", new L($h)); inferrer.infer(dpaa0);  
end
Axiom: RDPA(rdfs:comment, xsd:string)
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-rule" 
when 
   CAA(c=="Person", $pA:i) 
   CAA(c=="Person", $pB:i) 
   DPAA(s==$pA, p.id=="hasID", o==new L("p5ID", "xsd:string")) 
   DPAA(s==$pB, p.id=="hasID", o==new L("p6ID", "xsd:string")) 
   DPAA(s==$pA, p.id=="isFrench", $f:o) 
then 
   DPAA dpaa0=new DPAA(new I($pB), "isFrench", new L($f)); inferrer.infer(dpaa0);  
end
Axiom: RDPA(swrla:isOWL2RLRuleEnabled, xsd:boolean)
Axiom: DPDA(hasID)
Axiom: DPDA(hasHeightInCM)
Axiom: CAA(Person, s12)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_AP)
Axiom: SCA(temporal:Proposition, temporal:Entity)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_IFP)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_NOTHING2)
Axiom: CDA(Person)
Axiom: CAA(Person, s14)
Axiom: DPAA(p3, hasFirstName, L("Andrew", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_SPO)
Axiom: DPAA(d3, hasID, L("d3ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_EQC1)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_NOT_TYPE)
Axiom: DDPA(protege:PAL-RANGE, protege:PAL-CONSTRAINT)
Axiom: DDPA(hasHeightInCM, Person)
Axiom: DPDA(isDiabetic)
Axiom: FOPA(hasUncle)
Rule name: test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-rule
rule "test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-rule" 
when 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i2, p.id=="hasID", o==new L("d13ID", "xsd:string")) 
then 
   DIA dia0=new DIA(new I("d12"), new I($i2)); inferrer.infer(dia0);  
end
Axiom: FOPA(hasFather)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_AVF)
Axiom: CAA(Male, m10)
Axiom: DPAA(p1, hasBMI, L(23.0, xsd:double))
Axiom: OPDA(hasBrother)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_SFV2)
Axiom: RDPA(hasSurname, xsd:string)
Axiom: DPDA(protege:PAL-NAME)
Axiom: CDA(temporal:ExtendedProposition)
Axiom: DPAA(m5, hasID, L("m5ID", xsd:string))
Axiom: DPAA(d9, hasID, L("d9ID", xsd:string))
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-rule" 
when 
   CAA(c=="Person", $pA:i) 
   CAA(c=="Person", $pB:i) 
   DPAA(s==$pA, p.id=="hasID", o==new L("p5ID", "xsd:string")) 
   DPAA(s==$pB, p.id=="hasID", o==new L("p6ID", "xsd:string")) 
   DPAA(s==$pA, p.id=="hasFirstName", $fn:o) 
then 
   DPAA dpaa0=new DPAA(new I($pB), "hasFirstName", new L($fn)); inferrer.infer(dpaa0);  
end
Axiom: CAA(Male, m1)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_EQC1)
Axiom: SCA(PersonNamedFred, Person)
Axiom: CDA(swrl:Imp)
Axiom: OPDA(protege:TO)
Axiom: RDPA(temporal:hasStartTime, xsd:dateTime)
Axiom: SCA(temporal:ValidPeriod, temporal:ValidTime)
Axiom: FDPA(temporal:hasStartTime)
Axiom: CAA(Male, m11)
Axiom: DPAA(d1, hasID, L("d1ID", xsd:string))
Axiom: DPAA(p1, isDiabetic, L(false, xsd:boolean))
Axiom: ROPA(temporal:hasValidTime, temporal:ValidTime)
Axiom: OPAA(m10, hasFather, m11)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_SCO)
Axiom: CAA(Person, s4)
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasLastAccessTime", new L(new L("2010-10-10T10:10:10", "xsd:dateTime"))); inferrer.infer(dpaa0);  
end
Axiom: CAA(Male, m7)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="hasDOB", $dob:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "hasDOB", new L($dob)); inferrer.infer(dpaa0);  
end
Axiom: CDA(owl:Thing)
Axiom: CAA(Male, m2)
Rule name: test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-rule
rule "test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-rule" 
when 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i2, p.id=="hasID", o==new L("s13ID", "xsd:string")) 
then 
   SIA sia0=new SIA(new I("s12"), new I($i2)); inferrer.infer(sia0);  
end
Axiom: DPAA(p5, hasFirstName, L("Pierre", xsd:string))
Axiom: ROPA(hasUncle, Male)
Axiom: DPDA(temporal:hasCount)
Axiom: DDPA(protege:PAL-NAME, protege:PAL-CONSTRAINT)
Axiom: FDPA(hasFirstName)
Axiom: DPDA(swrla:hasRuleCategory)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_NPA2)
Axiom: CAA(Person, p13)
Axiom: CAA(temporal:Granularity, temporal:Seconds)
Axiom: FDPA(hasBMI)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_UNI)
Axiom: CDA(temporal:Proposition)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_TRANS)
Axiom: CAA(Person, d2)
Axiom: CDA(temporal:Duration)
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_ADC)
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasHeightInCM", new L(new L("145.0", "xsd:double"))); inferrer.infer(dpaa0);  
end
Axiom: DPAA(d4, hasID, L("d4ID", xsd:string))
Axiom: SCA(swrla:RuleGroup, swrla:Entity)
Axiom: DPAA(p5, isFrench, L(true, xsd:boolean))
Axiom: OPDA(swrla:hasRuleGroup)
Axiom: CAA(Person, p3)
Axiom: DPDA(swrla:hasRuleGroup)
Axiom: DPDA(temporal:hasStartTime)
Axiom: CAA(Male, m6)
Axiom: SCA(temporal:ValidTime, temporal:Entity)
Axiom: OPAA(m1, hasFather, m2)
Axiom: RDPA(temporal:hasFinishTime, xsd:dateTime)
Axiom: CDA(PersonNamedFred)
Rule name: test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-rule
rule "test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-rule" 
when 
   CAA(c=="Person", $i1:i) 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("s8ID", "xsd:string")) 
   DPAA(s==$i2, p.id=="hasID", o==new L("s9ID", "xsd:string")) 
then 
   SIA sia0=new SIA(new I($i1), new I($i2)); inferrer.infer(sia0);  
end
Axiom: DPAA(s15, hasID, L("s15ID", xsd:string))
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("p2"), "hasHeightInCM", new L(new L("145.0", "xsd:double"))); inferrer.infer(dpaa0);  
end
Axiom: DDPA(protege:PAL-DESCRIPTION, protege:PAL-CONSTRAINT)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_IRP)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_SVF1)
Axiom: CDA(protege:PAL-CONSTRAINT)
Axiom: DDPA(hasDOB, Person)
Axiom: CAA(Person, p5)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-rule" 
when 
   BAP($bmi:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-rule", "swrlb:add", 0, false, new VPATH(), new BAVNs("bmi", "", ""), new UBA("bmi"), new L("25.0", "xsd:double"), new L("0.0", "xsd:double")) 
then 
   DPAA dpaa0=new DPAA(new I("p10"), "hasBMI", new L($bmi)); inferrer.infer(dpaa0);  
end
Axiom: SCA(Male, Person)
Axiom: CAA(Person, d13)
Axiom: CAA(Person, d16)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXQC4)
Axiom: DPAA(m2, hasFirstName, L("Joe", xsd:string))
Axiom: RDPA(hasFirstAccessTime, xsd:dateTime)
Axiom: FOPA(temporal:hasGranularity)
Axiom: DPAA(p1, hasHeightInCM, L(180.0, xsd:double))
Axiom: OPDA(temporal:hasValidTime)
Axiom: DDPA(temporal:hasStartTime, temporal:ValidPeriod)
Axiom: CAA(Male, m3)
Axiom: DDPA(hasNumberOfCars, Person)
Axiom: CAA(Person, p4)
Axiom: CAA(Person, s16)
Axiom: DPAA(p3, hasAge, L(23, xsd:integer))
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_REP_P)
Axiom: OPAA(m4, hasFather, m5)
Axiom: DPAA(p5, hasAge, L(44, xsd:integer))
Axiom: CAA(Person, s13)
Axiom: FDPA(hasSurname)
Axiom: DPAA(m1, hasFirstName, L("Bill", xsd:string))
Axiom: CDA(temporal:ValidPeriod)
Axiom: DOPA(protege:SLOT-CONSTRAINTS, owl:Thing)
Axiom: SCA(FrenchPerson, Person)
Axiom: DPDA(swrla:hasClassPhrase)
Axiom: SCA(swrla:OWL2RLRule, swrla:Entity)
Axiom: DPDA(swrla:hasClassPhrase)
Axiom: CAA(Person, s1)
Rule name: test-built-in-atom-create-owl-thing-rule
rule "test-built-in-atom-create-owl-thing-rule" 
when 
   BAP($i:a1) from invoker.invoke("test-built-in-atom-create-owl-thing-rule", "swrlx:makeOWLThing", 0, false, new VPATH(), new BAVNs("i", ""), new UBA("i"), new I("p15")) 
then 
   CAA caa0=new CAA("CreatedPerson", new I($i)); inferrer.infer(caa0);  
end
Axiom: DPAA(p6, hasID, L("p6ID", xsd:string))
Axiom: DDPA(hasLastAccessTime, Person)
Axiom: RDPA(hasFirstName, xsd:string)
Axiom: FDPA(hasAge)
Axiom: DPAA(p5, hasID, L("p5ID", xsd:string))
Axiom: DPAA(p1, isFrench, L(true, xsd:boolean))
Axiom: DPAA(s8, hasID, L("s8ID", xsd:string))
Axiom: DOPA(temporal:hasGranularity, CEID0)
Axiom: CDA(FrenchPerson)
Axiom: CAA(Female, f3)
Axiom: SCA(temporal:ValidInstant, temporal:ValidTime)
Rule name: test-object-property-atom-with-named-subject-and-named-object-rule
rule "test-object-property-atom-with-named-subject-and-named-object-rule" 
when 
   OPAA(s.id=="m1", p.id=="hasFather", o.id=="m2") 
   OPAA(s.id=="m2", p.id=="hasBrother", o.id=="m3") 
then 
   OPAA opaa0=new OPAA(new I("m1"), "hasUncle", new I("m3")); inferrer.infer(opaa0);  
end
Axiom: SCA(temporal:Granularity, temporal:Entity)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_CLS)
Axiom: DOPA(swrla:hasRuleGroup, swrl:Imp)
Axiom: DPDA(hasDOB)
Axiom: DIA(d4, d3)
Axiom: DIA(d3, d4)
Axiom: DPAA(p3, hasHeightInCM, L(157.0, xsd:double))
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_RNG2)
Axiom: OPAA(m8, hasBrother, m9)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_ADP)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_ASYP)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_DIFF3)
Axiom: RDPA(hasDOB, xsd:date)
Axiom: DPDA(swrla:isRuleEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_EQP2)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_NPA1)
Axiom: DPDA(swrla:isRuleEnabled)
Axiom: DPAA(s7, hasID, L("s7ID", xsd:string))
Axiom: CAA(Person, p1)
Axiom: CAA(Person, p11)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_DOM)
Axiom: OPDA(protege:SLOT-CONSTRAINTS)
Axiom: CAA(Person, p9)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_INV1)
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasAge", new L(new L("44", "xsd:integer"))); inferrer.infer(dpaa0);  
end
Axiom: DPAA(d10, hasID, L("d10ID", xsd:string))
Axiom: OPAA(m7, hasFather, m8)
Axiom: CAA(Person, d15)
Axiom: DPAA(s3, hasID, L("s3ID", xsd:string))
Axiom: CDA(temporal:Granularity)
Axiom: FDPA(temporal:hasCount)
Axiom: DPAA(p16, hasFirstAccessTime, L("2014-02-16T00:00:00", xsd:dateTime))
Axiom: DPAA(m9, hasID, L("m9ID", xsd:string))
Axiom: CAA(Person, d3)
Axiom: CAA(Person, d8)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-rule" 
when 
   BAP($name:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-rule", "swrlb:stringConcat", 0, false, new VPATH(), new BAVNs("name", "", ""), new UBA("name"), new L("Fr", "xsd:string"), new L("ed", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I("p11"), "hasFirstName", new L($name)); inferrer.infer(dpaa0);  
end
Axiom: RDPA(swrla:hasPropertyPhrase, xsd:string)
Rule name: test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-rule
rule "test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-rule" 
when 
   CAA(c=="Person", $i1:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("s10ID", "xsd:string")) 
then 
   SIA sia0=new SIA(new I($i1), new I("s11")); inferrer.infer(sia0);  
end
Axiom: DPAA(d8, hasID, L("d8ID", xsd:string))
Axiom: CAA(Person, p7)
Axiom: FDPA(isFrench)
Axiom: DDPA(hasBMI, Person)
Axiom: DPDA(swrla:isRuleGroupEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_DIFF2)
Axiom: DIA(d5, d6)
Axiom: DIA(d6, d5)
Axiom: SIA(s1, s1)
Axiom: SIA(s1, s2)
Axiom: SIA(s2, s2)
Axiom: SIA(s2, s1)
Axiom: OPDA(hasFather)
Axiom: CAA(Male, m8)
Axiom: DPDA(temporal:hasTime)
Axiom: CAA(Person, d14)
Axiom: DPAA(d6, hasID, L("d6ID", xsd:string))
Axiom: DPDA(temporal:hasFinishTime)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("p2"), "hasFirstName", new L(new L("Angela", "xsd:string"))); inferrer.infer(dpaa0);  
end
Axiom: CDA(temporal:ValidInstant)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="hasHeightInCM", $h:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "hasHeightInCM", new L($h)); inferrer.infer(dpaa0);  
end
Axiom: CAA(Person, s7)
Axiom: CAA(Female, f1)
Axiom: DDPA(temporal:hasTime, temporal:ValidInstant)
Axiom: DPAA(d12, hasID, L("d12ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_NOTHING1)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_DIFF)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXQC2)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_TYPE1)
Axiom: DPDA(swrla:isOWL2RLRuleEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_RNG1)
Axiom: DPDA(swrla:isOWL2RLRuleEnabled)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_EQC2)
Axiom: CAA(Person, s3)
Axiom: OPDA(protege:FROM)
Axiom: CAA(Person, p12)
Axiom: DDPA(temporal:hasFinishTime, temporal:ValidPeriod)
Axiom: FDPA(isDiabetic)
Axiom: CAA(Male, m4)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_RNG)
Axiom: DPAA(p3, isFrench, L(false, xsd:boolean))
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_OO)
Axiom: DPAA(m6, hasID, L("m6ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_EQP1)
Axiom: RDPA(temporal:hasCount, xsd:int)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-rule" 
when 
   BAP($date:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-rule", "swrlb:addDayTimeDurationToDate", 0, false, new VPATH(), new BAVNs("date", "", ""), new UBA("date"), new L("1970-01-01", "xsd:string"), new L("P1D", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I("p12"), "hasDOB", new L($date)); inferrer.infer(dpaa0);  
end
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_SFV1)
Axiom: CDA(CreatedPerson)
Axiom: OPAA(m11, hasBrother, m12)
Axiom: FDPA(hasHeightInCM)
Axiom: DPAA(s13, hasID, L("s13ID", xsd:string))
Axiom: RDPA(hasBMI, xsd:double)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_INT2)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_PDW)
Axiom: FOPA(hasBrother)
Axiom: DPAA(s16, hasID, L("s16ID", xsd:string))
Axiom: DPAA(m3, hasFirstName, L("Bob", xsd:string))
Axiom: RDPA(swrla:isRuleGroupEnabled, xsd:boolean)
Axiom: DPAA(p1, hasSurname, L("Gunderson", xsd:string))
Axiom: CDA(swrla:RuleGroup)
Axiom: CAA(Person, s10)
Axiom: DIA(d1, d2)
Axiom: DIA(d2, d1)
Axiom: CAA(swrla:OWL2RLRule, swrla:DT_TYPE2)
Axiom: DPAA(d14, hasID, L("d14ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:CAX_EQC2)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_EQP1)
Axiom: DOPA(hasBrother, Person)
Axiom: DPDA(hasFirstName)
Axiom: CDA(swrla:OWL2RLRule)
Axiom: DPAA(p1, hasFirstName, L("Fred", xsd:string))
Axiom: DDPA(protege:PAL-STATEMENT, protege:PAL-CONSTRAINT)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("p2"), "hasAge", new L(new L("34", "xsd:integer"))); inferrer.infer(dpaa0);  
end
Axiom: DDPA(hasSurname, Person)
Axiom: DPAA(d11, hasID, L("d11ID", xsd:string))
Axiom: CAA(Person, p2)
Axiom: CAA(Person, d10)
Axiom: CDA(swrla:Entity)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_SPO2)
Axiom: ROPA(temporal:hasGranularity, temporal:Granularity)
Rule name: test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-rule
rule "test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-rule" 
when 
   CAA(c=="Person", $i1:i) 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("d8ID", "xsd:string")) 
   DPAA(s==$i2, p.id=="hasID", o==new L("d9ID", "xsd:string")) 
then 
   DIA dia0=new DIA(new I($i1), new I($i2)); inferrer.infer(dia0);  
end
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_SPO1)
Axiom: ROPA(hasFather, Male)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_INT)
Axiom: DPDA(protege:PAL-RANGE)
Axiom: CAA(temporal:Granularity, temporal:Years)
Axiom: ROPA(swrla:hasRuleGroup, swrla:RuleGroup)
Axiom: SCA(temporal:ExtendedProposition, temporal:Proposition)
Axiom: DPAA(s14, hasID, L("s14ID", xsd:string))
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_EQP2)
Axiom: DPAA(p1, hasDOB, L("2000-01-05", xsd:date))
Axiom: OPAA(m2, hasBrother, m3)
Axiom: RDPA(isDiabetic, xsd:boolean)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_REP_S)
Axiom: CAA(swrla:OWL2RLRule, swrla:PRP_SYMP)
Axiom: CAA(Male, m12)
Axiom: DOPA(temporal:hasValidTime, temporal:ExtendedProposition)
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_MAXQC1)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_DOM1)
Rule name: test-object-property-atom-with-variable-subject-and-named-object-rule
rule "test-object-property-atom-with-variable-subject-and-named-object-rule" 
when 
   CAA(c=="Male", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("m10ID", "xsd:string")) 
   OPAA(s==$p, p.id=="hasFather", o.id=="m11") 
   OPAA(s.id=="m11", p.id=="hasBrother", o.id=="m12") 
then 
   OPAA opaa0=new OPAA(new I($p), "hasUncle", new I("m12")); inferrer.infer(opaa0);  
end
Axiom: CAA(Person, p15)
Rule name: test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-rule
rule "test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-rule" 
when 
then 
   SIA sia0=new SIA(new I("s14"), new I("s15")); inferrer.infer(sia0);  
end
Axiom: CAA(Female, f2)
Rule name: test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-rule
rule "test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-rule" 
when 
   CAA(c=="Person", $i1:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("d10ID", "xsd:string")) 
then 
   DIA dia0=new DIA(new I($i1), new I("d11")); inferrer.infer(dia0);  
end
Axiom: DPAA(d15, hasID, L("d15ID", xsd:string))
Axiom: CAA(Person, s8)
Axiom: CAA(Person, p8)
Axiom: CAA(Female, f4)
Axiom: DPDA(protege:PAL-STATEMENT)
Axiom: CAA(Person, p10)
Axiom: DPDA(hasFirstAccessTime)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_AVF1)
Axiom: CAA(swrla:OWL2RLRule, swrla:SCM_DP)
Axiom: FDPA(swrla:hasPropertyPhrase)
Axiom: DPAA(p5, hasHeightInCM, L(177.0, xsd:double))
Axiom: DPAA(s6, hasID, L("s6ID", xsd:string))
Axiom: DPDA(hasNumberOfCars)
Axiom: DPAA(s5, hasID, L("s5ID", xsd:string))
Axiom: RDPA(swrla:hasClassPhrase, xsd:string)
Axiom: FDPA(hasID)
Axiom: CDA(protege:DIRECTED-BINARY-RELATION)
Rule name: test-class-atom-in-consequent-with-variablel-rule
rule "test-class-atom-in-consequent-with-variablel-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasFirstName", o==new L("Fred", "xsd:string")) 
then 
   CAA caa0=new CAA("PersonNamedFred", new I($p)); inferrer.infer(caa0);  
end
Axiom: CAA(swrla:OWL2RLRule, swrla:CLS_HV2)Rule name: test-class-atom-in-consequent-with-named-individual-rule
rule "test-class-atom-in-consequent-with-named-individual-rule" 
when 
then 
   CAA caa0=new CAA("Male", new I("p1")); inferrer.infer(caa0);  
end

Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasDOB", new L(new L("2010-10-10", "xsd:date"))); inferrer.infer(dpaa0);  
end
Axiom: DPAA(s10, hasID, L("s10ID", xsd:string))
Axiom: SCA(CreatedPerson, Person)
Axiom: FDPA(swrla:hasBuiltInPhrase)
Axiom: DPAA(s4, hasID, L("s4ID", xsd:string))
Axiom: DPDA(hasLastAccessTime)
Axiom: FDPA(swrla:hasClassPhrase)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-rule" 
when 
   BAP($i:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-rule", "swrlb:booleanNot", 0, false, new VPATH(), new BAVNs("i", ""), new UBA("i"), new L("false", "xsd:boolean")) 
then 
   DPAA dpaa0=new DPAA(new I("p8"), "isFrench", new L($i)); inferrer.infer(dpaa0);  
end
Axiom: RDPA(hasID, xsd:string)
Axiom: CAA(Male, m5)
Axiom: DPDA(hasSurname)
Axiom: RDPA(hasNumberOfCars, xsd:integer)
Axiom: DOPA(protege:TO, protege:DIRECTED-BINARY-RELATION)
Axiom: DDPA(hasFirstName, Person)
Axiom: RDPA(swrla:hasBuiltInPhrase, xsd:string)
Axiom: CDA(owl:Nothing)
Axiom: RDPA(hasAge, xsd:integer)
Axiom: CAA(Person, s15)
Axiom: CAA(Person, d11)
Axiom: CAA(Person, p16)
Axiom: FDPA(temporal:hasFinishTime)
Axiom: CAA(swrla:OWL2RLRule, swrla:EQ_SYM)
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="hasDOB", o==new L("2002-01-01", "xsd:date")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query
rule "test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query" 
when 
   DIA(i1.id=="d8", i2.id=="d9") 
then 
   invoker.invoke("test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("d8"), new I("d9"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-query" 
when 
   DPAA(s.id=="p9", p.id=="hasAge", o==new L("22", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-query", "sqwrl:select", 0, true, new I("p9"), new L("22", "xsd:integer"));  
end
Rule name: test-class-atom-in-consequent-with-variablel-query
rule "test-class-atom-in-consequent-with-variablel-query" 
when 
   CAA(c=="PersonNamedFred", $fp:i) 
then 
   invoker.invoke("test-class-atom-in-consequent-with-variablel-query", "sqwrl:select", 0, true, $fp);  
   invoker.invoke("test-class-atom-in-consequent-with-variablel-query", "sqwrl:orderBy", 1, true, $fp);  
end
Rule name: test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query
rule "test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query" 
when 
   DIA(i1.id=="d10", i2.id=="d11") 
then 
   invoker.invoke("test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("d10"), new I("d11"));  
end
Rule name: test-different-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query
rule "test-different-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query" 
when 
   CAA(c=="Person", $i1:i) 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("d1ID", "xsd:string")) 
   DPAA(s==$i2, p.id=="hasID", o==new L("d2ID", "xsd:string")) 
   DIA(i1==$i1, i2==$i2) 
then 
   invoker.invoke("test-different-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, $i1, $i2);  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-double-variable-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-double-variable-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasHeightInCM", $h:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-double-variable-object-query", "sqwrl:select", 0, true, new I("p1"), $h);  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-integer-literal-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-integer-literal-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasNumberOfCars", o==new L("3", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-integer-literal-object-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-class-atom-in-antecedent-with-variable-query
rule "test-class-atom-in-antecedent-with-variable-query" 
when 
   CAA(c=="Male", $m:i) 
   SIA(i1==$m, i2.id=="p1") 
then 
   invoker.invoke("test-class-atom-in-antecedent-with-variable-query", "sqwrl:select", 0, true, $m);  
   invoker.invoke("test-class-atom-in-antecedent-with-variable-query", "sqwrl:orderBy", 1, true, $m);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query
rule "test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query" 
when 
   SIA(i1.id=="s14", i2.id=="s15") 
then 
   invoker.invoke("test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("s14"), new I("s15"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-query" 
when 
   DPAA(s.id=="p2", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-query", "sqwrl:select", 0, true, new I("p2"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasAge", o==new L("44", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-query", "sqwrl:select", 0, true, new I("p7"), new L("44", "xsd:integer"));  
end
Rule name: test-class-atom-in-antecedent-with-named-individual-query
rule "test-class-atom-in-antecedent-with-named-individual-query" 
when 
   CAA(c=="Male", i.id=="m1") 
then 
   invoker.invoke("test-class-atom-in-antecedent-with-named-individual-query", "sqwrl:select", 0, true, new I("m1"));  
end
Rule name: test-object-property-atom-with-named-subject-and-named-object-query
rule "test-object-property-atom-with-named-subject-and-named-object-query" 
when 
   OPAA(s.id=="m1", p.id=="hasUncle", o.id=="m3") 
then 
   invoker.invoke("test-object-property-atom-with-named-subject-and-named-object-query", "sqwrl:select", 0, true, new I("m1"), new I("m3"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-query" 
when 
   DPAA(s.id=="p2", p.id=="hasAge", o==new L("34", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-query", "sqwrl:select", 0, true, new I("p2"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-date-variable-subject-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-date-variable-subject-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasDOB", $dob:o) 
   SIA(i1==$p, i2.id=="p1") 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-date-variable-subject-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-built-in-atom-with-unbound-double-cascading-argument-query
rule "test-built-in-atom-with-unbound-double-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-double-cascading-argument-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("2.0", "xsd:double"), new L("2.0", "xsd:double")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-double-cascading-argument-query", "swrlb:multiply", 1, false, new VPATH(), new BAVNs("y", "x", ""), new UBA("y"), $x, new L("2.0", "xsd:double")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-double-cascading-argument-query", "sqwrl:select", 0, true, $y);  
end
Rule name: test-datatype-datetime-query
rule "test-datatype-datetime-query" 
when 
   DPAA(s.id=="p1", p.id=="hasLastAccessTime", o==new L("2011-11-11T23:21:00.0", "xsd:dateTime")) 
then 
   invoker.invoke("test-datatype-datetime-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-literal-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-literal-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="isDiabetic", o==new L("false", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-literal-object-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query
rule "test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query" 
when 
   SIA(i1.id=="s12", i2.id=="s13") 
then 
   invoker.invoke("test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("s12"), new I("s13"));  
end
Rule name: test-built-in-atom-with-unbound-boolean-cascading-argument-query
rule "test-built-in-atom-with-unbound-boolean-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-boolean-cascading-argument-query", "swrlb:booleanNot", 0, false, new VPATH(), new BAVNs("x", ""), new UBA("x"), new L("false", "xsd:boolean")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-boolean-cascading-argument-query", "swrlb:booleanNot", 1, false, new VPATH(), new BAVNs("y", "x"), new UBA("y"), $x) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-boolean-cascading-argument-query", "sqwrl:select", 0, true, $y);  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-integer-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-integer-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", o==new L("66", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-integer-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-datatype-boolean-query
rule "test-datatype-boolean-query" 
when 
   DPAA(s.id=="p1", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-datatype-boolean-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query
rule "test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query" 
when 
   SIA(i1.id=="s10", i2.id=="s11") 
then 
   invoker.invoke("test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("s10"), new I("s11"));  
end
Rule name: test-built-in-atom-with-unbound-boolean-argument-query
rule "test-built-in-atom-with-unbound-boolean-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-boolean-argument-query", "swrlb:booleanNot", 0, false, new VPATH(), new BAVNs("x", ""), new UBA("x"), new L("false", "xsd:boolean")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-boolean-argument-query", "sqwrl:select", 0, true, $x);  
end
Rule name: test-different-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query
rule "test-different-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query" 
when 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i2, p.id=="hasID", o==new L("d6ID", "xsd:string")) 
   DIA(i1.id=="d5", i2==$i2) 
then 
   invoker.invoke("test-different-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("d5"), $i2);  
end
Rule name: test-different-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query
rule "test-different-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query" 
when 
   CAA(c=="Person", $i1:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("d3ID", "xsd:string")) 
   DIA(i1==$i1, i2.id=="d4") 
then 
   invoker.invoke("test-different-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query", "sqwrl:select", 0, true, $i1, new I("d4"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-date-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-date-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasDOB", o==new L("2000-01-05", "xsd:date")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-date-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-datetime-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-datetime-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasLastAccessTime", o==new L("2011-11-11T23:21:00.0", "xsd:dateTime")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-datetime-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-datatype-date-query
rule "test-datatype-date-query" 
when 
   DPAA(s.id=="p1", p.id=="hasDOB", o==new L("2000-01-05", "xsd:date")) 
then 
   invoker.invoke("test-datatype-date-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-built-in-atom-create-owl-thing-query
rule "test-built-in-atom-create-owl-thing-query" 
when 
   CAA(c=="CreatedPerson", $p:i) 
then 
   invoker.invoke("test-built-in-atom-create-owl-thing-query", "sqwrl:count", 0, true, $p);  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-string-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-string-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasFirstName", o==new L("Fred", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-string-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-datatype-integer-query
rule "test-datatype-integer-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", o==new L("66", "xsd:integer")) 
then 
   invoker.invoke("test-datatype-integer-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-built-in-atom-with-datetime-arguments-query
rule "test-built-in-atom-with-datetime-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-datetime-arguments-query", "temporal:before", 0, false, new VPATH(), new BAVNs("", ""), new L("01-01-12T12:22", "xsd:string"), new L("01-01-12T12:23", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-datetime-arguments-query", "sqwrl:select", 0, true, new L("before", "xsd:string"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasDOB", o==new L("2010-10-10", "xsd:date")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasHeightInCM", o==new L("145.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-same-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query
rule "test-same-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query" 
when 
   CAA(c=="Person", $i1:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("s3ID", "xsd:string")) 
   SIA(i1==$i1, i2.id=="s4") 
then 
   invoker.invoke("test-same-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query", "sqwrl:selectDistinct", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query
rule "test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query" 
when 
   DIA(i1.id=="d14", i2.id=="d15") 
then 
   invoker.invoke("test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("d14"), new I("d15"));  
end
Rule name: test-object-property-atom-with-named-subject-and-variable-object-query
rule "test-object-property-atom-with-named-subject-and-variable-object-query" 
when 
   OPAA(s.id=="m7", p.id=="hasUncle", o.id=="m9") 
then 
   invoker.invoke("test-object-property-atom-with-named-subject-and-variable-object-query", "sqwrl:select", 0, true, new I("m7"), new I("m9"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-boolean-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-boolean-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-boolean-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-same-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query
rule "test-same-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query" 
when 
   SIA(i1.id=="s7", i2.id=="s8") 
then 
   invoker.invoke("test-same-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("s7"), new I("s8"));  
end
Rule name: test-datatype-string-query
rule "test-datatype-string-query" 
when 
   DPAA(s.id=="p1", p.id=="hasSurname", o==new L("Gunderson", "xsd:string")) 
then 
   invoker.invoke("test-datatype-string-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-built-in-atom-with-unbound-datetime-cascading-argument-query
rule "test-built-in-atom-with-unbound-datetime-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-datetime-cascading-argument-query", "temporal:add", 0, false, new VPATH(), new BAVNs("x", "", "", ""), new UBA("x"), new L("1999-11-01T10:00", "xsd:string"), new L("4", "xsd:integer"), new L("Years", "xsd:string")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-datetime-cascading-argument-query", "temporal:add", 1, false, new VPATH(), new BAVNs("y", "x", "", ""), new UBA("y"), $x, new L("1", "xsd:integer"), new I("temporal:Years")) 
   BAP(a1==$y) from invoker.invoke("test-built-in-atom-with-unbound-datetime-cascading-argument-query", "temporal:equals", 2, false, new VPATH($x), new BAVNs("y", ""), $y, new L("2004-11-01T10:00:00.0", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-datetime-cascading-argument-query", "sqwrl:select", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasBMI", $bmi:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query", "sqwrl:select", 0, true, $p, $bmi);  
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query", "sqwrl:orderBy", 1, true, $p);  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-double-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-double-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasHeightInCM", o==new L("180.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-double-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-query" 
when 
   DPAA(s.id=="p2", p.id=="hasHeightInCM", o==new L("145.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-query", "sqwrl:select", 0, true, new I("p2"));  
end
Rule name: test-object-property-atom-with-variable-subject-and-named-object-query
rule "test-object-property-atom-with-variable-subject-and-named-object-query" 
when 
   OPAA(s.id=="m10", p.id=="hasUncle", o.id=="m12") 
then 
   invoker.invoke("test-object-property-atom-with-variable-subject-and-named-object-query", "sqwrl:select", 0, true, new I("m10"), new I("m12"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-integer-variable-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-integer-variable-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", $age:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-integer-variable-object-query", "sqwrl:select", 0, true, new I("p1"), $age);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-query" 
when 
   DPAA(s.id=="p10", p.id=="hasBMI", $bmi:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-query", "sqwrl:select", 0, true, new I("p10"), $bmi);  
end
Rule name: test-same-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query
rule "test-same-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query" 
when 
   CAA(c=="Person", $i1:i) 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("s1ID", "xsd:string")) 
   DPAA(s==$i2, p.id=="hasID", o==new L("s2ID", "xsd:string")) 
   SIA(i1==$i1, i2==$i2) 
then 
   invoker.invoke("test-same-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query", "sqwrl:selectDistinct", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-same-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query
rule "test-same-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query" 
when 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i2, p.id=="hasID", o==new L("s6ID", "xsd:string")) 
   SIA(i1.id=="s5", i2==$i2) 
then 
   invoker.invoke("test-same-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query", "sqwrl:selectDistinct", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-built-in-atom-with-double-arguments-query
rule "test-built-in-atom-with-double-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-double-arguments-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("", "", ""), new L("4.0", "xsd:double"), new L("2.0", "xsd:double"), new L("2.0", "xsd:double")) 
then 
   invoker.invoke("test-built-in-atom-with-double-arguments-query", "sqwrl:select", 0, true, new L("4.0", "xsd:double"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="hasFirstName", o==new L("Andrew", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-built-in-atom-with-unbound-double-argument-query
rule "test-built-in-atom-with-unbound-double-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-double-argument-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("2.0", "xsd:double"), new L("2.0", "xsd:double")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-double-argument-query", "sqwrl:select", 0, true, $x);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasLastAccessTime", o==new L("2010-10-10T10:10:10", "xsd:dateTime")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="isFrench", o==new L("false", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-string-literal-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-string-literal-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasSurname", o==new L("Gunderson", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-string-literal-object-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-built-in-atom-with-integer-arguments-query
rule "test-built-in-atom-with-integer-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-integer-arguments-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("", "", ""), new L("4", "xsd:integer"), new L("2", "xsd:integer"), new L("2", "xsd:integer")) 
then 
   invoker.invoke("test-built-in-atom-with-integer-arguments-query", "sqwrl:select", 0, true, new L("4", "xsd:integer"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-query" 
when 
   DPAA(s.id=="p6", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-query", "sqwrl:select", 0, true, new I("p6"));  
end
Rule name: test-class-atom-in-consequent-with-named-individual-query
rule "test-class-atom-in-consequent-with-named-individual-query" 
when 
   CAA(c=="Male", i.id=="p1") 
then 
   invoker.invoke("test-class-atom-in-consequent-with-named-individual-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-query" 
when 
   DPAA(s.id=="p2", p.id=="hasFirstName", o==new L("Angela", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-query", "sqwrl:select", 0, true, new I("p2"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-query" 
when 
   DPAA(s.id=="p6", p.id=="hasFirstName", o==new L("Pierre", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-query", "sqwrl:select", 0, true, new I("p6"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-double-literal-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-double-literal-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasBMI", o==new L("23.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-double-literal-object-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-built-in-atom-with-variable-name-extraction-query
rule "test-built-in-atom-with-variable-name-extraction-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", $age:o) 
   BAP(a3==$age) from invoker.invoke("test-built-in-atom-with-variable-name-extraction-query", "swrlm:eval", 0, false, new VPATH(), new BAVNs("", "", "age"), new L("66", "xsd:integer"), new L("age + 0", "xsd:string"), $age) 
then 
   invoker.invoke("test-built-in-atom-with-variable-name-extraction-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-boolean-variable-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-boolean-variable-object-query" 
when 
   DPAA(s.id=="p1", p.id=="isFrench", $f:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-boolean-variable-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query
rule "test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query" 
when 
   SIA(i1.id=="s8", i2.id=="s9") 
then 
   invoker.invoke("test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("s8"), new I("s9"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-query" 
when 
   DPAA(s.id=="p6", p.id=="hasHeightInCM", o==new L("177.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-query", "sqwrl:select", 0, true, new I("p6"));  
end
Rule name: test-temporal-built-in-add-and-after-with-now-query
rule "test-temporal-built-in-add-and-after-with-now-query" 
when 
   DPAA(s.id=="p14", p.id=="hasLastAccessTime", $lat:o) 
   BAP(a2==$lat) from invoker.invoke("test-temporal-built-in-add-and-after-with-now-query", "temporal:after", 0, false, new VPATH(), new BAVNs("", "lat"), new L("now", "xsd:string"), $lat) 
then 
   invoker.invoke("test-temporal-built-in-add-and-after-with-now-query", "sqwrl:select", 0, true, new I("p14"));  
end
Rule name: test-different-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query
rule "test-different-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query" 
when 
   DIA(i1.id=="d7", i2.id=="d8") 
then 
   invoker.invoke("test-different-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("d7"), new I("d8"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-query" 
when 
   DPAA(s.id=="p13", p.id=="hasLastAccessTime", $lat:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-query", "sqwrl:select", 0, true, new I("p13"));  
end
Rule name: test-object-property-atom-with-variable-subject-and-variable-object-query
rule "test-object-property-atom-with-variable-subject-and-variable-object-query" 
when 
   OPAA(s.id=="m4", p.id=="hasUncle", o.id=="m6") 
then 
   invoker.invoke("test-object-property-atom-with-variable-subject-and-variable-object-query", "sqwrl:select", 0, true, new I("m4"), new I("m6"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-integer-variable-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-integer-variable-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasNumberOfCars", $nc:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-integer-variable-object-query", "sqwrl:select", 0, true, $p, $nc);  
end
Rule name: test-built-in-atom-with-unbound-integer-cascading-argument-query
rule "test-built-in-atom-with-unbound-integer-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-integer-cascading-argument-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("2", "xsd:integer"), new L("2", "xsd:integer")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-integer-cascading-argument-query", "swrlb:multiply", 1, false, new VPATH(), new BAVNs("y", "x", ""), new UBA("y"), $x, new L("2", "xsd:integer")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-integer-cascading-argument-query", "sqwrl:select", 0, true, $y);  
end
Rule name: test-built-in-atom-with-unbound-string-argument-query
rule "test-built-in-atom-with-unbound-string-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-string-argument-query", "swrlb:stringConcat", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("A", "xsd:string"), new L("B", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-string-argument-query", "sqwrl:select", 0, true, $x);  
end
Rule name: test-built-in-atom-with-unbound-datetime-argument-query
rule "test-built-in-atom-with-unbound-datetime-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-datetime-argument-query", "temporal:add", 0, false, new VPATH(), new BAVNs("x", "", "", ""), new UBA("x"), new L("1999-11-01T10:00", "xsd:string"), new L("4", "xsd:integer"), new L("Years", "xsd:string")) 
   BAP(a1==$x) from invoker.invoke("test-built-in-atom-with-unbound-datetime-argument-query", "temporal:equals", 1, false, new VPATH(), new BAVNs("x", ""), $x, new L("2003-11-01T10:00:00.0", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-datetime-argument-query", "sqwrl:select", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-datatype-double-query
rule "test-datatype-double-query" 
when 
   DPAA(s.id=="p1", p.id=="hasBMI", o==new L("23.0", "xsd:double")) 
then 
   invoker.invoke("test-datatype-double-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-query" 
when 
   DPAA(s.id=="p11", p.id=="hasFirstName", $name:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-query", "sqwrl:select", 0, true, new I("p11"), $name);  
end
Rule name: test-built-in-atom-with-boolean-arguments-query
rule "test-built-in-atom-with-boolean-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-boolean-arguments-query", "swrlb:booleanNot", 0, false, new VPATH(), new BAVNs("", ""), new L("true", "xsd:boolean"), new L("false", "xsd:boolean")) 
then 
   invoker.invoke("test-built-in-atom-with-boolean-arguments-query", "sqwrl:select", 0, true, new L("true", "xsd:boolean"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-query" 
when 
   DPAA(s.id=="p12", p.id=="hasDOB", $dob:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-query", "sqwrl:select", 0, true, new I("p12"));  
end
Rule name: test-built-in-atom-with-variable-date-argument-query
rule "test-built-in-atom-with-variable-date-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="hasDOB", $dob:o) 
   BAP(a1==$dob) from invoker.invoke("test-built-in-atom-with-variable-date-argument-query", "temporal:equals", 0, false, new VPATH(), new BAVNs("dob", ""), $dob, new L("2000-01-05", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-date-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-built-in-atom-with-date-arguments-query
rule "test-built-in-atom-with-date-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-date-arguments-query", "temporal:before", 0, false, new VPATH(), new BAVNs("", ""), new L("01-01-12", "xsd:string"), new L("01-01-13", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-date-arguments-query", "sqwrl:select", 0, true, new L("before", "xsd:string"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-string-variable-subject-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-string-variable-subject-query" 
when 
   DPAA(s.id=="p1", p.id=="hasFirstName", $fn:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-string-variable-subject-query", "sqwrl:select", 0, true, new I("p1"), $fn);  
end
Rule name: test-built-in-atom-with-string-arguments-query
rule "test-built-in-atom-with-string-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-string-arguments-query", "swrlb:stringConcat", 0, false, new VPATH(), new BAVNs("", "", ""), new L("AB", "xsd:string"), new L("A", "xsd:string"), new L("B", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-string-arguments-query", "sqwrl:select", 0, true, new L("AB", "xsd:string"));  
end
Rule name: test-built-in-atom-with-variable-integer-argument-query
rule "test-built-in-atom-with-variable-integer-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", $age:o) 
   BAP(a1==$age) from invoker.invoke("test-built-in-atom-with-variable-integer-argument-query", "swrlb:equal", 0, false, new VPATH(), new BAVNs("age", ""), $age, new L("66", "xsd:integer")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-integer-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-query" 
when 
   DPAA(s.id=="p8", p.id=="isFrench", $f:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-query", "sqwrl:select", 0, true, new I("p8"), $f);  
end
Rule name: test-built-in-atom-with-variable-boolean-argument-query
rule "test-built-in-atom-with-variable-boolean-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="isFrench", $f:o) 
   BAP(a1==$f) from invoker.invoke("test-built-in-atom-with-variable-boolean-argument-query", "swrlb:equal", 0, false, new VPATH(), new BAVNs("f", ""), $f, new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-boolean-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasFirstName", o==new L("Angela", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-built-in-atom-with-unbound-integer-argument-query
rule "test-built-in-atom-with-unbound-integer-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-integer-argument-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("2", "xsd:integer"), new L("2", "xsd:integer")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-integer-argument-query", "sqwrl:select", 0, true, $x);  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-string-variable-subject-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-string-variable-subject-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasSurname", $sn:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-string-variable-subject-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query
rule "test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query" 
when 
   DIA(i1.id=="d12", i2.id=="d13") 
then 
   invoker.invoke("test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("d12"), new I("d13"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-variable-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-variable-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="isDiabetic", $f:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-variable-object-query", "sqwrl:select", 0, true, $p, $f);  
end
Rule name: test-built-in-atom-with-unbound-string-cascading-argument-query
rule "test-built-in-atom-with-unbound-string-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-string-cascading-argument-query", "swrlb:stringConcat", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("A", "xsd:string"), new L("B", "xsd:string")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-string-cascading-argument-query", "swrlb:stringConcat", 1, false, new VPATH(), new BAVNs("y", "x", ""), new UBA("y"), $x, new L("C", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-string-cascading-argument-query", "sqwrl:select", 0, true, $y);  
end
Rule name: test-built-in-atom-with-variable-string-argument-query
rule "test-built-in-atom-with-variable-string-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="hasFirstName", $fn:o) 
   BAP(a1==$fn) from invoker.invoke("test-built-in-atom-with-variable-string-argument-query", "swrlb:equal", 0, false, new VPATH(), new BAVNs("fn", ""), $fn, new L("Fred", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-string-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="hasAge", o==new L("23", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-built-in-atom-with-variable-double-argument-query
rule "test-built-in-atom-with-variable-double-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="hasHeightInCM", $h:o) 
   BAP(a1==$h) from invoker.invoke("test-built-in-atom-with-variable-double-argument-query", "swrlb:equal", 0, false, new VPATH(), new BAVNs("h", ""), $h, new L("180.0", "xsd:double")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-double-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="hasHeightInCM", o==new L("157.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
