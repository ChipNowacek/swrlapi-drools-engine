rule scm_hv_dp when DHVCE($c1:ceid, $p1:p, $i:v) DHVCE($c2:ceid, $p2:p, v==$i) SDPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_spo1_dp
rule prp_spo1_dp when SDPA($p1:sub, $p2:sup) DPAA($x:s, p==$p1, $y:o) then DPAA dpaa=new DPAA($x, $p2, $y); inferrer.infer(dpaa); end
Rule name: eq_rep_s_dp
rule eq_rep_s_dp when SIA($s:i1, $sp:i2) DPAA(s==$s, $p:p, $o:o) then DPAA dpaa=new DPAA($sp, $p, $o); inferrer.infer(dpaa); end
Rule name: scm_dp
rule scm_dp when DPDA($p:p) then SDPA sdpa=new SDPA($p, $p); EDPA edpa=new EDPA($p, $p); inferrer.infer(sdpa, edpa); end
Rule name: prp_eqp2_op
rule prp_eqp2_op when EOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p2, $y:o) then OPAA opaa=new OPAA($x, $p1.id, $y); inferrer.infer(opaa); end
Rule name: prp_pdw
rule prp_pdw when DJOPA($p1:p1, $p2:p2) OPAA($u:s, p==$p1, $v:o) OPAA($u==s, p==$p2, o==$v)  then inferrer.inferFalse("PRP_PDW", $u.id, $v.id, $p1.id, $p2.id); end
Rule name: cls_int2
rule cls_int2 when OIOCE($c:ceid, $c1:c1) CAA(c==$c, $y:i) then CAA caa1=new CAA($c1, $y); inferrer.infer(caa1); end
Rule name: prp_dom_op
rule prp_dom_op when DOPA($p:p, $c:d) OPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $x); inferrer.infer(caa); end
Rule name: cls_uni
rule cls_uni when OUOCE($c:ceid, $c1:c1) CAA(c==$c1, $y:i) then CAA caa=new CAA($c, $y); inferrer.infer(caa); end
Rule name: prp_fp
rule prp_fp when FOPA($p:p) OPAA($x:s, p==$p, $y1:o) OPAA(s==$x, p==$p, $y2:o) then SIA sia=new SIA($y1, $y2); inferrer.infer(sia); end
Rule name: prp_inv2
rule prp_inv2 when IOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p2, $y:o) then OPAA opaa=new OPAA($y, $p1.id, $x); inferrer.infer(opaa); end
Rule name: cax_eqc1
rule cax_eqc1 when ECA($c1:c1, $c2:c2) CAA(c==$c1, $x:i) then CAA caa=new CAA($c2, $x); inferrer.infer(caa); end
Rule name: scm_dom2_op
rule scm_dom2_op when DOPA($p2:p, $c:d) SOPA($p1:sub, sup==$p2) then DOPA dopa=new DOPA($p1, $c); inferrer.infer(dopa); end
Rule name: prp_eqp1_dp
rule prp_eqp1_dp when EDPA($p1:p1, $p2:p2) DPAA($x:s, p==$p1, $y:o) then DPAA dpaa=new DPAA($x, $p2.id, $y); inferrer.infer(dpaa); end
Rule name: cls_maxc1_op
rule cls_maxc1_op when OMaxCCE($x:ceid, $p:p, card==0) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $y:o) then inferrer.inferFalse("CLS_MAXC1", $x, $p.id, $u.id, $y.id); end
Rule name: scm_cls
rule scm_cls when CDA($c:c) then SCA sca1=new SCA($c, $c); ECA eca=new ECA($c, $c); SCA sca2=new SCA($c, "owl:Thing"); SCA sca3=new SCA("owl:Nothing", $c); inferrer.infer(sca1, eca, sca2, sca3); end
Rule name: prp_spo1_op
rule prp_spo1_op when SOPA($p1:sub, $p2:sup) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($x, $p2, $y); inferrer.infer(opaa); end
Rule name: scm_sco
rule scm_sco when SCA($c1:sub, $c2:sup) SCA(sub==$c2, $c3:sup) then SCA sca=new SCA($c1, $c3); inferrer.infer(sca); end
Rule name: prp_ifp
rule prp_ifp_op when IPA($p:p) OPAA($x1:s, p==$p, $y:o) OPAA($x2:s, p==$p, o==$y) then SIA sia=new SIA($x1, $x2); inferrer.infer(sia); end
Rule name: eq_ref_c
rule eq_ref_c when CAA($s:c, $o:i) then SIA sia=new SIA($o, $o); inferrer.infer(sia); end
Rule name: cls_com
rule cls_com when OCOCE($c1:ceid, $c2:c) CAA(c==$c1, $x:i) CAA(c==$c2, i==$x) then inferrer.inferFalse("CLS_COM", $c2, $c2); end
Rule name: eq_rep_s_c
rule eq_rep_s_c when SIA($s:i1, $sp:i2) CAA($c:c, i==$s) then CAA caa=new CAA($c, $sp); inferrer.infer(caa); end
Rule name: scm_avf2_dop
rule scm_avf2_dp when DAVFCE($c1:ceid, $p1:p, $y:v) DAVFCE($c2:ceid, $p2:p, v==$y) SDPA(sub==$p1, sup==$p2)  then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_rng
rule prp_rng_op when ROPA($p:p, $c:r) OPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $y); inferrer.infer(caa); end
Rule name: prp_dom_dp
rule prp_dom_dp when DDPA($p:p, $c:d) DPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $x); inferrer.infer(caa); end
Rule name: scm_dom1_op
rule scm_dom1_op when DOPA($p:p, $c1:d) SCA(sub==$c1, $c2:sup) then DOPA dopa=new DOPA($p, $c2); inferrer.infer(dopa); end
Rule name: prp_trp
rule prp_trp when TPA($p:p) OPAA($x:s, p==$p, $y:o) OPAA(s==$y, p==$p, $z:o) then OPAA opaa=new OPAA($x, $p.id, $z); inferrer.infer(opaa); end
Rule name: prp_inv1
rule prp_inv1 when IOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($y, $p2.id, $x); inferrer.infer(opaa); end
Rule name: scm_op
rule scm_op when OPDA($p:p) then SOPA sopa=new SOPA($p, $p); EOPA eopa=new EOPA($p, $p); inferrer.infer(sopa, eopa); end
Rule name: scm_svf1
rule scm_svf1 when OSVFCE($c1:ceid, $p:p, $y1:v) OSVFCE($c2:ceid, p==$p, $y2:v) SCA(sub==$y1, sup==$y2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: cax_dw
rule cax_dw when DCA($c1:c1, $c2:c2) CAA(c==$c1, $x:i) CAA(c==$c2, i==$x) then inferrer.inferFalse("CAX_DW", $c1, $c2, $x.id); end
Rule name: prp_irp
rule prp_irp when IRPA($p:p) OPAA($s:s, p==$p, $x:o) then inferrer.inferFalse("PRP_IRP", $x.id, $p.id); end
Rule name: scm_eqp1_op
rule scm_eqp1_op when EOPA($p1:p1, $p2:p2) then SOPA sopa1=new SOPA($p1.id, $p2.id); SOPA sopa2=new SOPA($p2.id, $p1.id); inferrer.infer(sopa1, sopa2); end
Rule name: eq_sym
rule eq_sym when SIA($x:i1, $y:i2) then SIA sia=new SIA($y, $x); inferrer.infer(sia); end
Rule name: scm_eqc1
rule scm_eqc1 when ECA($c1:c1, $c2:c2) then SCA sca1=new SCA($c1, $c2); SCA sca2=new SCA($c2, $c1); inferrer.infer(sca1, sca2); end
Rule name: cls_maxc1_dp
rule cls_maxc1_dp when DMaxCCE($x:ceid, $p:p, card==0) CAA(c==$x, $u:i) DPAA(s==$u, p==$p, $y:o) then inferrer.inferFalse("CLS_MAXC1", $x, $p.id, $u.id, $y.value); end
Rule name: cax_eqc2
rule cax_eqc2 when ECA($c1:c1, $c2:c2) CAA(c==$c2, $x:i) then CAA caa=new CAA($c1, $x); inferrer.infer(caa); end
Rule name: prp_eqp1_op
rule prp_eqp1_op when EOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($x, $p2.id, $y); inferrer.infer(opaa); end
Rule name: cls_hv1_dp
rule cls_hv1_dp when DHVCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) then DPAA dpaa=new DPAA($u, $p.id, $y); inferrer.infer(dpaa); end
Rule name: prp_asyp
rule prp_asyp when APA($p:p) OPAA($x:s, p==$p, $y:o) OPAA(s==$y, p==$p, o==$x) then inferrer.inferFalse("PRP_ASYP", $x.id, $y.id, $p.id); end
Rule name: prp_symp
rule prp_symp when SPA($p:p) OPAA($x:s, p==$p, $y:o) then OPAA opaa=new OPAA($y, $p.id, $x); inferrer.infer(opaa); end
Rule name: scm_eqp2_op
rule scm_eqp2_op when SOPA($p1:sub, $p2:sup) SOPA(sub==$p2, sup==$p1) then EOPA eopa=new EOPA($p1, $p2); inferrer.infer(eopa); end
Rule name: cls_maxc2
rule cls_maxc2 when OMaxCCE($x:ceid, $p:p, card==1) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $y1:o) OPAA(s==$u, p==$p, $y2:o) then SIA sia=new SIA($y1, $y2); inferrer.infer(sia); end
Rule name: cls_int1
rule cls_int1 when OIOCE($x:ceid, $c1:c1) CAA(c==$c1, $y:i) forall ( OIOCE(ceid==$x, $cc:c1) CAA(c==$cc, i==$y)  ) then CAA caa=new CAA($x, $y); inferrer.infer(caa); end
Rule name: cls_oo
rule cls_oo when OOOCE($c:ceid, $y1:i1, $y2:i2) then CAA caa1=new CAA($c, $y1); CAA caa2=new CAA($c, $y2); inferrer.infer(caa1, caa2); end
Rule name: eq_rep_o
rule eq_rep_o when SIA($o:i1, $op:i2) OPAA($s:s, $p:p, o==$o) then OPAA opaa=new OPAA($s, $p, $op); inferrer.infer(opaa); end
Rule name: scm_spo_op
rule scm_spo_op when SOPA($p1:sub, $p2:sup) SOPA(sub==$p2, $p3:sup) then SOPA sopa=new SOPA($p1, $p3); inferrer.infer(sopa); end
Rule name: scm_spo_dp
rule scm_spo_dp when SDPA($p1:sub, $p2:sup) SDPA(sub==$p2, $p3:sup) then SDPA sdpa=new SDPA($p1, $p3); inferrer.infer(sdpa); end
Rule name: scm_svf2_op
rule scm_svf2_op when OSVFCE($c1:ceid, $p1:p, $y:v) OSVFCE($c2:ceid, $p2:p, v==$y) SOPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: eq_trans
rule eq_trans when SIA($s1:i1, $s2:i2) SIA(i1==$s2, $s3:i2) then SIA sia=new SIA($s1, $s3); inferrer.infer(sia); end
Rule name: eq_ref_op
rule eq_ref_op when OPAA($s:s, $p:p, $o:o) then SIA sia1=new SIA($s, $s); SIA sia2=new SIA($o, $o); inferrer.infer(sia1, sia2); end
Rule name: scm_rng2_op
rule scm_rng1_op when ROPA($p:p, $c1:r) SCA(sub==$c1, $c2:sup) then ROPA ropa=new ROPA($p, $c2); inferrer.infer(ropa); end
Rule name: eq_diff1
rule eq_diff1 when SIA($x:i1, $y:i2) DIA(i1==$x, i2==$y) then inferrer.inferFalse("EQ_DIFF1", $x.id, $y.id); end
Rule name: cls_hv1_op
rule cls_hv1_op when OHVCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) then OPAA opaa=new OPAA($u, $p.id, $y); inferrer.infer(opaa); end
Rule name: scm_dom1_dp
rule scm_dom1_dp when DDPA($p:p, $c1:d) SCA(sub==$c1, $c2:sup) then DDPA ddpa=new DDPA($p, $c2); inferrer.infer(ddpa); end
Rule name: scm_avf2_op
rule scm_avf2_op when OAVFCE($c1:ceid, $p1:p, $y:v) OAVFCE($c2:ceid, $p2:p, v==$y) SOPA(sub==$p1, sup==$p2)  then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: scm_hv_op
rule scm_hv_op when OHVCE($c1:ceid, $p1:p, $i:v) OHVCE($c2:ceid, $p2:p, v==$i) SOPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: scm_eqc2
rule scm_eqc2 when SCA($c1:sub, $c2:sup) SCA(sub==$c2, sup==$c1) then ECA eca=new ECA($c1, $c2); inferrer.infer(eca); end
Rule name: scm_int
rule scm_int when OIOCE($c:ceid, $c1:c1) then SCA sca1=new SCA($c, $c1); inferrer.infer(sca1); end
Rule name: prp_eqp2_dp
rule prp_eqp2_dp when EDPA($p1:p1, $p2:p2) DPAA($x:s, p==$p2, $y:o) then DPAA dpaa=new DPAA($x, $p1.id, $y); inferrer.infer(dpaa); end
Rule name: scm_svf2_dp
rule scm_svf2_dp when DSVFCE($c1:ceid, $p1:p, $y:v) DSVFCE($c2:ceid, $p2:p, v==$y) SDPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: scm_dom2_dp
rule scm_dom2_dp when DDPA($p2:p, $c:d) SDPA($p1:sub, sup==$p2) then DDPA ddpa=new DDPA($p1, $c); inferrer.infer(ddpa); end
Rule name: scm_rng2_op
rule scm_rng2_op when ROPA($p2:p, $c:r) SOPA($p1:sub, sup==$p2) then ROPA ropa=new ROPA($p1, $c); inferrer.infer(ropa); end
Rule name: cls_sfv2
rule cls_sfv2 when OSVFCE($x:ceid, $p:p, v=="owl:Thing") OPAA($u:s, p==$p, $v:o) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: rule cls_hv2_op when OHVCE($x:ceid, $p:p, $y:v) OPAA($u:s, p==$p, o==$y) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
rule cls_hv2_dp when DHVCE($x:ceid, $p:p, $y:v) DPAA($u:s, p==$p, o==$y) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: cls_sfv1
rule cls_sfv1_op when OSVFCE($x:ceid, $p:p, $y:v) OPAA($u:s, p==$p, $v:o) CAA(c==$y, i==$v) then CAA caa=new CAA($x, $u); inferrer.infer(caa); end
Rule name: scm_eqp2_dp
rule scm_eqp2_dp when SDPA($p1:sub, $p2:sup) SDPA(sub==$p2, sup==$p1) then EDPA edpa=new EDPA($p1, $p2); inferrer.infer(edpa); end
Rule name: cls_avf
rule cls_avf_op when OAVFCE($x:ceid, $p:p, $y:v) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $v:o) then CAA caa=new CAA($y, $v); inferrer.infer(caa); end
Rule name: scm_eqp1_dp
rule scm_eqp1_dp when EDPA($p1:p1, $p2:p2) then SDPA sdpa1=new SDPA($p1.id, $p2.id); SDPA sdpa2=new SDPA($p2.id, $p1.id); inferrer.infer(sdpa1, sdpa2); end
Rule name: scm_uni
rule scm_uni when OUOCE($c:ceid, $c1:c1) then SCA sca1=new SCA($c1, $c); inferrer.infer(sca1); end
Rule name: eq_ref_dp
rule eq_ref_dp when DPAA($s:s, $p:p, $o:o) then SIA sia=new SIA($s, $s); inferrer.infer(sia); end
Rule name: scm_afv1
rule scm_avf1 when OAVFCE($c1:ceid, $p:p, $y1:v) OAVFCE($c2:ceid, p==$p, $y2:v) SCA(sub==$y1, sup==$y2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: cax_sco
rule cax_sco  when SCA($c1:sub, $c2:sup) CAA(c==$c1, $x:i) then CAA caa=new CAA($c2, $x); inferrer.infer(caa); end
Rule name: eq_rep_s_op
rule eq_rep_s_op when SIA($s:i1, $sp:i2) OPAA(s==$s, $p:p, $o:o) then OPAA opaa=new OPAA($sp, $p, $o); inferrer.infer(opaa); end
Rule name: scm_hv_dp
rule scm_hv_dp when DHVCE($c1:ceid, $p1:p, $i:v) DHVCE($c2:ceid, $p2:p, v==$i) SDPA(sub==$p1, sup==$p2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_spo1_dp
rule prp_spo1_dp when SDPA($p1:sub, $p2:sup) DPAA($x:s, p==$p1, $y:o) then DPAA dpaa=new DPAA($x, $p2, $y); inferrer.infer(dpaa); end
Rule name: eq_rep_s_dp
rule eq_rep_s_dp when SIA($s:i1, $sp:i2) DPAA(s==$s, $p:p, $o:o) then DPAA dpaa=new DPAA($sp, $p, $o); inferrer.infer(dpaa); end
Rule name: scm_dp
rule scm_dp when DPDA($p:p) then SDPA sdpa=new SDPA($p, $p); EDPA edpa=new EDPA($p, $p); inferrer.infer(sdpa, edpa); end
Rule name: prp_eqp2_op
rule prp_eqp2_op when EOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p2, $y:o) then OPAA opaa=new OPAA($x, $p1.id, $y); inferrer.infer(opaa); end
Rule name: prp_pdw
rule prp_pdw when DJOPA($p1:p1, $p2:p2) OPAA($u:s, p==$p1, $v:o) OPAA($u==s, p==$p2, o==$v)  then inferrer.inferFalse("PRP_PDW", $u.id, $v.id, $p1.id, $p2.id); end
Rule name: cls_int2
rule cls_int2 when OIOCE($c:ceid, $c1:c1) CAA(c==$c, $y:i) then CAA caa1=new CAA($c1, $y); inferrer.infer(caa1); end
Rule name: prp_dom_op
rule prp_dom_op when DOPA($p:p, $c:d) OPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $x); inferrer.infer(caa); end
Rule name: cls_uni
rule cls_uni when OUOCE($c:ceid, $c1:c1) CAA(c==$c1, $y:i) then CAA caa=new CAA($c, $y); inferrer.infer(caa); end
Rule name: prp_fp
rule prp_fp when FOPA($p:p) OPAA($x:s, p==$p, $y1:o) OPAA(s==$x, p==$p, $y2:o) then SIA sia=new SIA($y1, $y2); inferrer.infer(sia); end
Rule name: prp_inv2
rule prp_inv2 when IOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p2, $y:o) then OPAA opaa=new OPAA($y, $p1.id, $x); inferrer.infer(opaa); end
Rule name: cax_eqc1
rule cax_eqc1 when ECA($c1:c1, $c2:c2) CAA(c==$c1, $x:i) then CAA caa=new CAA($c2, $x); inferrer.infer(caa); end
Rule name: scm_dom2_op
rule scm_dom2_op when DOPA($p2:p, $c:d) SOPA($p1:sub, sup==$p2) then DOPA dopa=new DOPA($p1, $c); inferrer.infer(dopa); end
Rule name: prp_eqp1_dp
rule prp_eqp1_dp when EDPA($p1:p1, $p2:p2) DPAA($x:s, p==$p1, $y:o) then DPAA dpaa=new DPAA($x, $p2.id, $y); inferrer.infer(dpaa); end
Rule name: cls_maxc1_op
rule cls_maxc1_op when OMaxCCE($x:ceid, $p:p, card==0) CAA(c==$x, $u:i) OPAA(s==$u, p==$p, $y:o) then inferrer.inferFalse("CLS_MAXC1", $x, $p.id, $u.id, $y.id); end
Rule name: scm_cls
rule scm_cls when CDA($c:c) then SCA sca1=new SCA($c, $c); ECA eca=new ECA($c, $c); SCA sca2=new SCA($c, "owl:Thing"); SCA sca3=new SCA("owl:Nothing", $c); inferrer.infer(sca1, eca, sca2, sca3); end
Rule name: prp_spo1_op
rule prp_spo1_op when SOPA($p1:sub, $p2:sup) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($x, $p2, $y); inferrer.infer(opaa); end
Rule name: scm_sco
rule scm_sco when SCA($c1:sub, $c2:sup) SCA(sub==$c2, $c3:sup) then SCA sca=new SCA($c1, $c3); inferrer.infer(sca); end
Rule name: prp_ifp
rule prp_ifp_op when IPA($p:p) OPAA($x1:s, p==$p, $y:o) OPAA($x2:s, p==$p, o==$y) then SIA sia=new SIA($x1, $x2); inferrer.infer(sia); end
Rule name: eq_ref_c
rule eq_ref_c when CAA($s:c, $o:i) then SIA sia=new SIA($o, $o); inferrer.infer(sia); end
Rule name: cls_com
rule cls_com when OCOCE($c1:ceid, $c2:c) CAA(c==$c1, $x:i) CAA(c==$c2, i==$x) then inferrer.inferFalse("CLS_COM", $c2, $c2); end
Rule name: eq_rep_s_c
rule eq_rep_s_c when SIA($s:i1, $sp:i2) CAA($c:c, i==$s) then CAA caa=new CAA($c, $sp); inferrer.infer(caa); end
Rule name: scm_avf2_dop
rule scm_avf2_dp when DAVFCE($c1:ceid, $p1:p, $y:v) DAVFCE($c2:ceid, $p2:p, v==$y) SDPA(sub==$p1, sup==$p2)  then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: prp_rng
rule prp_rng_op when ROPA($p:p, $c:r) OPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $y); inferrer.infer(caa); end
Rule name: prp_dom_dp
rule prp_dom_dp when DDPA($p:p, $c:d) DPAA($x:s, p==$p, $y:o) then CAA caa=new CAA($c, $x); inferrer.infer(caa); end
Rule name: scm_dom1_op
rule scm_dom1_op when DOPA($p:p, $c1:d) SCA(sub==$c1, $c2:sup) then DOPA dopa=new DOPA($p, $c2); inferrer.infer(dopa); end
Rule name: prp_trp
rule prp_trp when TPA($p:p) OPAA($x:s, p==$p, $y:o) OPAA(s==$y, p==$p, $z:o) then OPAA opaa=new OPAA($x, $p.id, $z); inferrer.infer(opaa); end
Rule name: prp_inv1
rule prp_inv1 when IOPA($p1:p1, $p2:p2) OPAA($x:s, p==$p1, $y:o) then OPAA opaa=new OPAA($y, $p2.id, $x); inferrer.infer(opaa); end
Rule name: scm_op
rule scm_op when OPDA($p:p) then SOPA sopa=new SOPA($p, $p); EOPA eopa=new EOPA($p, $p); inferrer.infer(sopa, eopa); end
Rule name: scm_svf1
rule scm_svf1 when OSVFCE($c1:ceid, $p:p, $y1:v) OSVFCE($c2:ceid, p==$p, $y2:v) SCA(sub==$y1, sup==$y2) then SCA sca=new SCA($c1, $c2); inferrer.infer(sca); end
Rule name: cax_dw
rule cax_dw when DCA($c1:c1, $c2:c2) CAA(c==$c1, $x:i) CAA(c==$c2, i==$x) then inferrer.inferFalse("CAX_DW", $c1, $c2, $x.id); end
Rule name: prp_irp
rule prp_irp when IRPA($p:p) OPAA($s:s, p==$p, $x:o) then inferrer.inferFalse("PRP_IRP", $x.id, $p.id); end
Rule name: scm_eqp1_op
rule scm_eqp1_op when EOPA($p1:p1, $p2:p2) then SOPA sopa1=new SOPA($p1.id, $p2.id); SOPA sopa2=new SOPA($p2.id, $p1.id); inferrer.infer(sopa1, sopa2); end
Rule name: eq_sym
rule eq_sym when SIA($x:i1, $y:i2) then SIA sia=new SIA($y, $x); inferrer.infer(sia); end
Running tests with rule engine Drools
Running test test-different-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query...Rule name: test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="isFrench", $f:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "isFrench", new L($f)); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "isFrench", new L(new L("true", "xsd:boolean"))); inferrer.infer(dpaa0);  
end
Rule name: test-temporal-built-in-add-and-after-with-now-rule
rule "test-temporal-built-in-add-and-after-with-now-rule" 
when 
   BAP($now:a1) from invoker.invoke("test-temporal-built-in-add-and-after-with-now-rule", "temporal:add", 0, false, new VPATH(), new BAVNs("now", "", "", ""), new UBA("now"), new L("now", "xsd:string"), new L("-2", "xsd:integer"), new I("temporal:Years")) 
then 
   DPAA dpaa0=new DPAA(new I("p14"), "hasLastAccessTime", new L($now)); inferrer.infer(dpaa0);  
end
Rule name: test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-rule
rule "test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-rule" 
when 
then 
   DIA dia0=new DIA(new I("d14"), new I("d15")); inferrer.infer(dia0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-rule" 
when 
   BAP($date:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-rule", "swrlb:addDayTimeDurationToDate", 0, false, new VPATH(), new BAVNs("date", "", ""), new UBA("date"), new L("1970-01-01", "xsd:string"), new L("P1D", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I("p12"), "hasDOB", new L($date)); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="hasDOB", $dob:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "hasDOB", new L($dob)); inferrer.infer(dpaa0);  
end
Rule name: test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-rule
rule "test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-rule" 
when 
   CAA(c=="Person", $i1:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("d10ID", "xsd:string")) 
then 
   DIA dia0=new DIA(new I($i1), new I("d11")); inferrer.infer(dia0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-rule" 
when 
   BAP($dt:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-rule", "swrlb:addDayTimeDurationToDateTime", 0, false, new VPATH(), new BAVNs("dt", "", ""), new UBA("dt"), new L("1999-01-01T12:12:12", "xsd:string"), new L("P1Y", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I("p13"), "hasLastAccessTime", new L($dt)); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasAge", new L(new L("44", "xsd:integer"))); inferrer.infer(dpaa0);  
end
Rule name: test-object-property-atom-with-variable-subject-and-variable-object-rule
rule "test-object-property-atom-with-variable-subject-and-variable-object-rule" 
when 
   CAA(c=="Male", $p:i) 
   CAA(c=="Male", $f:i) 
   CAA(c=="Male", $u:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("m4ID", "xsd:string")) 
   DPAA(s==$f, p.id=="hasID", o==new L("m5ID", "xsd:string")) 
   DPAA(s==$u, p.id=="hasID", o==new L("m6ID", "xsd:string")) 
   OPAA(s==$p, p.id=="hasFather", o==$f) 
   OPAA(s==$f, p.id=="hasBrother", o==$u) 
then 
   OPAA opaa0=new OPAA(new I($p), "hasUncle", new I($u)); inferrer.infer(opaa0);  
end
Rule name: test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-rule
rule "test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-rule" 
when 
   CAA(c=="Person", $i1:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("s10ID", "xsd:string")) 
then 
   SIA sia0=new SIA(new I($i1), new I("s11")); inferrer.infer(sia0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasDOB", new L(new L("2010-10-10", "xsd:date"))); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("p2"), "hasFirstName", new L(new L("Angela", "xsd:string"))); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="hasFirstName", $fn:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "hasFirstName", new L($fn)); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-rule" 
when 
   BAP($bmi:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-rule", "swrlb:add", 0, false, new VPATH(), new BAVNs("bmi", "", ""), new UBA("bmi"), new L("25.0", "xsd:double"), new L("0.0", "xsd:double")) 
then 
   DPAA dpaa0=new DPAA(new I("p10"), "hasBMI", new L($bmi)); inferrer.infer(dpaa0);  
end
Rule name: test-class-atom-in-consequent-with-named-individual-rule
rule "test-class-atom-in-consequent-with-named-individual-rule" 
when 
then 
   CAA caa0=new CAA("Male", new I("p1")); inferrer.infer(caa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-rule" 
when 
   BAP($x:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-rule", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("22", "xsd:integer"), new L("0", "xsd:integer")) 
then 
   DPAA dpaa0=new DPAA(new I("p9"), "hasAge", new L($x)); inferrer.infer(dpaa0);  
end
Rule name: test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-rule
rule "test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-rule" 
when 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i2, p.id=="hasID", o==new L("d13ID", "xsd:string")) 
then 
   DIA dia0=new DIA(new I("d12"), new I($i2)); inferrer.infer(dia0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="hasAge", $a:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "hasAge", new L($a)); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("p2"), "hasHeightInCM", new L(new L("145.0", "xsd:double"))); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-rule" 
when 
   BAP($name:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-rule", "swrlb:stringConcat", 0, false, new VPATH(), new BAVNs("name", "", ""), new UBA("name"), new L("Fr", "xsd:string"), new L("ed", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I("p11"), "hasFirstName", new L($name)); inferrer.infer(dpaa0);  
end
Rule name: test-object-property-atom-with-named-subject-and-variable-object-rule
rule "test-object-property-atom-with-named-subject-and-variable-object-rule" 
when 
   CAA(c=="Male", $u:i) 
   OPAA(s.id=="m7", p.id=="hasFather", o.id=="m8") 
   DPAA(s==$u, p.id=="hasID", o==new L("m9ID", "xsd:string")) 
   OPAA(s.id=="m8", p.id=="hasBrother", o==$u) 
then 
   OPAA opaa0=new OPAA(new I("m7"), "hasUncle", new I($u)); inferrer.infer(opaa0);  
end
Rule name: test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-rule
rule "test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-rule" 
when 
   CAA(c=="Person", $i1:i) 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("d8ID", "xsd:string")) 
   DPAA(s==$i2, p.id=="hasID", o==new L("d9ID", "xsd:string")) 
then 
   DIA dia0=new DIA(new I($i1), new I($i2)); inferrer.infer(dia0);  
end
Rule name: test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-rule
rule "test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-rule" 
when 
   CAA(c=="Person", $i1:i) 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("s8ID", "xsd:string")) 
   DPAA(s==$i2, p.id=="hasID", o==new L("s9ID", "xsd:string")) 
then 
   SIA sia0=new SIA(new I($i1), new I($i2)); inferrer.infer(sia0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-rule" 
when 
   BAP($i:a1) from invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-rule", "swrlb:booleanNot", 0, false, new VPATH(), new BAVNs("i", ""), new UBA("i"), new L("false", "xsd:boolean")) 
then 
   DPAA dpaa0=new DPAA(new I("p8"), "isFrench", new L($i)); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasFirstName", new L(new L("Angela", "xsd:string"))); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("p2"), "hasAge", new L(new L("34", "xsd:integer"))); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-rule" 
when 
then 
   DPAA dpaa0=new DPAA(new I("p2"), "isFrench", new L(new L("true", "xsd:boolean"))); inferrer.infer(dpaa0);  
end
Rule name: test-object-property-atom-with-variable-subject-and-named-object-rule
rule "test-object-property-atom-with-variable-subject-and-named-object-rule" 
when 
   CAA(c=="Male", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("m10ID", "xsd:string")) 
   OPAA(s==$p, p.id=="hasFather", o.id=="m11") 
   OPAA(s.id=="m11", p.id=="hasBrother", o.id=="m12") 
then 
   OPAA opaa0=new OPAA(new I($p), "hasUncle", new I("m12")); inferrer.infer(opaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-rule" 
when 
   CAA(c=="Person", $pA:i) 
   CAA(c=="Person", $pB:i) 
   DPAA(s==$pA, p.id=="hasID", o==new L("p5ID", "xsd:string")) 
   DPAA(s==$pB, p.id=="hasID", o==new L("p6ID", "xsd:string")) 
   DPAA(s==$pA, p.id=="hasFirstName", $fn:o) 
then 
   DPAA dpaa0=new DPAA(new I($pB), "hasFirstName", new L($fn)); inferrer.infer(dpaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-rule" 
when 
   CAA(c=="Person", $pA:i) 
   CAA(c=="Person", $pB:i) 
   DPAA(s==$pA, p.id=="hasID", o==new L("p5ID", "xsd:string")) 
   DPAA(s==$pB, p.id=="hasID", o==new L("p6ID", "xsd:string")) 
   DPAA(s==$pA, p.id=="hasHeightInCM", $h:o) 
then 
   DPAA dpaa0=new DPAA(new I($pB), "hasHeightInCM", new L($h)); inferrer.infer(dpaa0);  
end
Rule name: test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-rule
rule "test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-rule" 
when 
then 
   SIA sia0=new SIA(new I("s14"), new I("s15")); inferrer.infer(sia0);  
end
Rule name: test-built-in-atom-create-owl-thing-rule
rule "test-built-in-atom-create-owl-thing-rule" 
when 
   BAP($i:a1) from invoker.invoke("test-built-in-atom-create-owl-thing-rule", "swrlx:makeOWLThing", 0, false, new VPATH(), new BAVNs("i", ""), new UBA("i"), new I("p15")) 
then 
   CAA caa0=new CAA("CreatedPerson", new I($i)); inferrer.infer(caa0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-rule" 
when 
   CAA(c=="Person", $pA:i) 
   CAA(c=="Person", $pB:i) 
   DPAA(s==$pA, p.id=="hasID", o==new L("p5ID", "xsd:string")) 
   DPAA(s==$pB, p.id=="hasID", o==new L("p6ID", "xsd:string")) 
   DPAA(s==$pA, p.id=="isFrench", $f:o) 
then 
   DPAA dpaa0=new DPAA(new I($pB), "isFrench", new L($f)); inferrer.infer(dpaa0);  
end
Rule name: test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-rule
rule "test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-rule" 
when 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i2, p.id=="hasID", o==new L("s13ID", "xsd:string")) 
then 
   SIA sia0=new SIA(new I("s12"), new I($i2)); inferrer.infer(sia0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasLastAccessTime", new L(new L("2010-10-10T10:10:10", "xsd:dateTime"))); inferrer.infer(dpaa0);  
end
Rule name: test-object-property-atom-with-named-subject-and-named-object-rule
rule "test-object-property-atom-with-named-subject-and-named-object-rule" 
when 
   OPAA(s.id=="m1", p.id=="hasFather", o.id=="m2") 
   OPAA(s.id=="m2", p.id=="hasBrother", o.id=="m3") 
then 
   OPAA opaa0=new OPAA(new I("m1"), "hasUncle", new I("m3")); inferrer.infer(opaa0);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-rule
rule "test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasID", o==new L("p7ID", "xsd:string")) 
then 
   DPAA dpaa0=new DPAA(new I($p), "hasHeightInCM", new L(new L("145.0", "xsd:double"))); inferrer.infer(dpaa0);  
end
Rule name: test-class-atom-in-consequent-with-variablel-rule
rule "test-class-atom-in-consequent-with-variablel-rule" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasFirstName", o==new L("Fred", "xsd:string")) 
then 
   CAA caa0=new CAA("PersonNamedFred", new I($p)); inferrer.infer(caa0);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-rule
rule "test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-rule" 
when 
   DPAA(s.id=="p3", p.id=="hasHeightInCM", $h:o) 
then 
   DPAA dpaa0=new DPAA(new I("p4"), "hasHeightInCM", new L($h)); inferrer.infer(dpaa0);  
end
Rule name: test-built-in-atom-with-unbound-boolean-cascading-argument-query
rule "test-built-in-atom-with-unbound-boolean-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-boolean-cascading-argument-query", "swrlb:booleanNot", 0, false, new VPATH(), new BAVNs("x", ""), new UBA("x"), new L("false", "xsd:boolean")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-boolean-cascading-argument-query", "swrlb:booleanNot", 1, false, new VPATH(), new BAVNs("y", "x"), new UBA("y"), $x) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-boolean-cascading-argument-query", "sqwrl:select", 0, true, $y);  
end
Rule name: test-temporal-built-in-add-and-after-with-now-query
rule "test-temporal-built-in-add-and-after-with-now-query" 
when 
   DPAA(s.id=="p14", p.id=="hasLastAccessTime", $lat:o) 
   BAP(a2==$lat) from invoker.invoke("test-temporal-built-in-add-and-after-with-now-query", "temporal:after", 0, false, new VPATH(), new BAVNs("", "lat"), new L("now", "xsd:string"), $lat) 
then 
   invoker.invoke("test-temporal-built-in-add-and-after-with-now-query", "sqwrl:select", 0, true, new I("p14"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-date-variable-subject-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-date-variable-subject-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasDOB", $dob:o) 
   SIA(i1==$p, i2.id=="p1") 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-date-variable-subject-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-built-in-atom-with-integer-arguments-query
rule "test-built-in-atom-with-integer-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-integer-arguments-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("", "", ""), new L("4", "xsd:integer"), new L("2", "xsd:integer"), new L("2", "xsd:integer")) 
then 
   invoker.invoke("test-built-in-atom-with-integer-arguments-query", "sqwrl:select", 0, true, new L("4", "xsd:integer"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasFirstName", o==new L("Angela", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-object-property-atom-with-named-subject-and-named-object-query
rule "test-object-property-atom-with-named-subject-and-named-object-query" 
when 
   OPAA(s.id=="m1", p.id=="hasUncle", o.id=="m3") 
then 
   invoker.invoke("test-object-property-atom-with-named-subject-and-named-object-query", "sqwrl:select", 0, true, new I("m1"), new I("m3"));  
end
Rule name: test-different-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query
rule "test-different-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query" 
when 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i2, p.id=="hasID", o==new L("d6ID", "xsd:string")) 
   DIA(i1.id=="d5", i2==$i2) 
then 
   invoker.invoke("test-different-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("d5"), $i2);  
end
Rule name: test-class-atom-in-antecedent-with-named-individual-query
rule "test-class-atom-in-antecedent-with-named-individual-query" 
when 
   CAA(c=="Male", i.id=="m1") 
then 
   invoker.invoke("test-class-atom-in-antecedent-with-named-individual-query", "sqwrl:select", 0, true, new I("m1"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasDOB", o==new L("2010-10-10", "xsd:date")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-class-atom-in-consequent-with-named-individual-query
rule "test-class-atom-in-consequent-with-named-individual-query" 
when 
   CAA(c=="Male", i.id=="p1") 
then 
   invoker.invoke("test-class-atom-in-consequent-with-named-individual-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-different-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query
rule "test-different-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query" 
when 
   CAA(c=="Person", $i1:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("d3ID", "xsd:string")) 
   DIA(i1==$i1, i2.id=="d4") 
then 
   invoker.invoke("test-different-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query", "sqwrl:select", 0, true, $i1, new I("d4"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-datetime-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-datetime-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasLastAccessTime", o==new L("2011-11-11T23:21:00.0", "xsd:dateTime")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-datetime-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-built-in-atom-with-unbound-double-cascading-argument-query
rule "test-built-in-atom-with-unbound-double-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-double-cascading-argument-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("2.0", "xsd:double"), new L("2.0", "xsd:double")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-double-cascading-argument-query", "swrlb:multiply", 1, false, new VPATH(), new BAVNs("y", "x", ""), new UBA("y"), $x, new L("2.0", "xsd:double")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-double-cascading-argument-query", "sqwrl:select", 0, true, $y);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-query" 
when 
   DPAA(s.id=="p6", p.id=="hasHeightInCM", o==new L("177.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-query", "sqwrl:select", 0, true, new I("p6"));  
end
Rule name: test-built-in-atom-create-owl-thing-query
rule "test-built-in-atom-create-owl-thing-query" 
when 
   CAA(c=="CreatedPerson", $p:i) 
then 
   invoker.invoke("test-built-in-atom-create-owl-thing-query", "sqwrl:count", 0, true, $p);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-query" 
when 
   DPAA(s.id=="p2", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-query", "sqwrl:select", 0, true, new I("p2"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-query" 
when 
   DPAA(s.id=="p6", p.id=="hasFirstName", o==new L("Pierre", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-query", "sqwrl:select", 0, true, new I("p6"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasBMI", $bmi:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query", "sqwrl:select", 0, true, $p, $bmi);  
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query", "sqwrl:orderBy", 1, true, $p);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasLastAccessTime", o==new L("2010-10-10T10:10:10", "xsd:dateTime")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-class-atom-in-consequent-with-variablel-query
rule "test-class-atom-in-consequent-with-variablel-query" 
when 
   CAA(c=="PersonNamedFred", $fp:i) 
then 
   invoker.invoke("test-class-atom-in-consequent-with-variablel-query", "sqwrl:select", 0, true, $fp);  
   invoker.invoke("test-class-atom-in-consequent-with-variablel-query", "sqwrl:orderBy", 1, true, $fp);  
end
Rule name: test-built-in-atom-with-unbound-integer-argument-query
rule "test-built-in-atom-with-unbound-integer-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-integer-argument-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("2", "xsd:integer"), new L("2", "xsd:integer")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-integer-argument-query", "sqwrl:select", 0, true, $x);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-query" 
when 
   DPAA(s.id=="p10", p.id=="hasBMI", $bmi:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-query", "sqwrl:select", 0, true, new I("p10"), $bmi);  
end
Rule name: test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query
rule "test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query" 
when 
   DIA(i1.id=="d14", i2.id=="d15") 
then 
   invoker.invoke("test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("d14"), new I("d15"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-query" 
when 
   DPAA(s.id=="p11", p.id=="hasFirstName", $name:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-query", "sqwrl:select", 0, true, new I("p11"), $name);  
end
Rule name: test-same-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query
rule "test-same-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query" 
when 
   CAA(c=="Person", $i1:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("s3ID", "xsd:string")) 
   SIA(i1==$i1, i2.id=="s4") 
then 
   invoker.invoke("test-same-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query", "sqwrl:selectDistinct", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-query" 
when 
   DPAA(s.id=="p2", p.id=="hasAge", o==new L("34", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-query", "sqwrl:select", 0, true, new I("p2"));  
end
Rule name: test-datatype-date-query
rule "test-datatype-date-query" 
when 
   DPAA(s.id=="p1", p.id=="hasDOB", o==new L("2000-01-05", "xsd:date")) 
then 
   invoker.invoke("test-datatype-date-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query
rule "test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query" 
when 
   SIA(i1.id=="s12", i2.id=="s13") 
then 
   invoker.invoke("test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("s12"), new I("s13"));  
end
Rule name: test-built-in-atom-with-double-arguments-query
rule "test-built-in-atom-with-double-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-double-arguments-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("", "", ""), new L("4.0", "xsd:double"), new L("2.0", "xsd:double"), new L("2.0", "xsd:double")) 
then 
   invoker.invoke("test-built-in-atom-with-double-arguments-query", "sqwrl:select", 0, true, new L("4.0", "xsd:double"));  
end
Rule name: test-built-in-atom-with-unbound-string-cascading-argument-query
rule "test-built-in-atom-with-unbound-string-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-string-cascading-argument-query", "swrlb:stringConcat", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("A", "xsd:string"), new L("B", "xsd:string")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-string-cascading-argument-query", "swrlb:stringConcat", 1, false, new VPATH(), new BAVNs("y", "x", ""), new UBA("y"), $x, new L("C", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-string-cascading-argument-query", "sqwrl:select", 0, true, $y);  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-double-literal-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-double-literal-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasBMI", o==new L("23.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-double-literal-object-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-built-in-atom-with-unbound-string-argument-query
rule "test-built-in-atom-with-unbound-string-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-string-argument-query", "swrlb:stringConcat", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("A", "xsd:string"), new L("B", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-string-argument-query", "sqwrl:select", 0, true, $x);  
end
Rule name: test-datatype-integer-query
rule "test-datatype-integer-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", o==new L("66", "xsd:integer")) 
then 
   invoker.invoke("test-datatype-integer-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-datatype-datetime-query
rule "test-datatype-datetime-query" 
when 
   DPAA(s.id=="p1", p.id=="hasLastAccessTime", o==new L("2011-11-11T23:21:00.0", "xsd:dateTime")) 
then 
   invoker.invoke("test-datatype-datetime-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-integer-literal-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-integer-literal-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasNumberOfCars", o==new L("3", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-integer-literal-object-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-query" 
when 
   DPAA(s.id=="p13", p.id=="hasLastAccessTime", $lat:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-query", "sqwrl:select", 0, true, new I("p13"));  
end
Rule name: test-datatype-string-query
rule "test-datatype-string-query" 
when 
   DPAA(s.id=="p1", p.id=="hasSurname", o==new L("Gunderson", "xsd:string")) 
then 
   invoker.invoke("test-datatype-string-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-built-in-atom-with-unbound-boolean-argument-query
rule "test-built-in-atom-with-unbound-boolean-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-boolean-argument-query", "swrlb:booleanNot", 0, false, new VPATH(), new BAVNs("x", ""), new UBA("x"), new L("false", "xsd:boolean")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-boolean-argument-query", "sqwrl:select", 0, true, $x);  
end
Rule name: test-different-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query
rule "test-different-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query" 
when 
   DIA(i1.id=="d7", i2.id=="d8") 
then 
   invoker.invoke("test-different-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("d7"), new I("d8"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-boolean-variable-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-boolean-variable-object-query" 
when 
   DPAA(s.id=="p1", p.id=="isFrench", $f:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-boolean-variable-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-same-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query
rule "test-same-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query" 
when 
   SIA(i1.id=="s7", i2.id=="s8") 
then 
   invoker.invoke("test-same-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("s7"), new I("s8"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-integer-variable-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-integer-variable-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasNumberOfCars", $nc:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-integer-variable-object-query", "sqwrl:select", 0, true, $p, $nc);  
end
Rule name: test-datatype-double-query
rule "test-datatype-double-query" 
when 
   DPAA(s.id=="p1", p.id=="hasBMI", o==new L("23.0", "xsd:double")) 
then 
   invoker.invoke("test-datatype-double-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-literal-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-literal-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="isDiabetic", o==new L("false", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-literal-object-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-built-in-atom-with-boolean-arguments-query
rule "test-built-in-atom-with-boolean-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-boolean-arguments-query", "swrlb:booleanNot", 0, false, new VPATH(), new BAVNs("", ""), new L("true", "xsd:boolean"), new L("false", "xsd:boolean")) 
then 
   invoker.invoke("test-built-in-atom-with-boolean-arguments-query", "sqwrl:select", 0, true, new L("true", "xsd:boolean"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="hasAge", o==new L("23", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query
rule "test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query" 
when 
   SIA(i1.id=="s14", i2.id=="s15") 
then 
   invoker.invoke("test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("s14"), new I("s15"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-variable-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-variable-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="isDiabetic", $f:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-variable-object-query", "sqwrl:select", 0, true, $p, $f);  
end
Rule name: test-built-in-atom-with-variable-boolean-argument-query
rule "test-built-in-atom-with-variable-boolean-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="isFrench", $f:o) 
   BAP(a1==$f) from invoker.invoke("test-built-in-atom-with-variable-boolean-argument-query", "swrlb:equal", 0, false, new VPATH(), new BAVNs("f", ""), $f, new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-boolean-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-integer-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-integer-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", o==new L("66", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-integer-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-string-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-string-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasFirstName", o==new L("Fred", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-string-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-same-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query
rule "test-same-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query" 
when 
   CAA(c=="Person", $i1:i) 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("s1ID", "xsd:string")) 
   DPAA(s==$i2, p.id=="hasID", o==new L("s2ID", "xsd:string")) 
   SIA(i1==$i1, i2==$i2) 
then 
   invoker.invoke("test-same-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query", "sqwrl:selectDistinct", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-built-in-atom-with-variable-name-extraction-query
rule "test-built-in-atom-with-variable-name-extraction-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", $age:o) 
   BAP(a3==$age) from invoker.invoke("test-built-in-atom-with-variable-name-extraction-query", "swrlm:eval", 0, false, new VPATH(), new BAVNs("", "", "age"), new L("66", "xsd:integer"), new L("age + 0", "xsd:string"), $age) 
then 
   invoker.invoke("test-built-in-atom-with-variable-name-extraction-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-double-variable-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-double-variable-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasHeightInCM", $h:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-double-variable-object-query", "sqwrl:select", 0, true, new I("p1"), $h);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="hasFirstName", o==new L("Andrew", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-built-in-atom-with-string-arguments-query
rule "test-built-in-atom-with-string-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-string-arguments-query", "swrlb:stringConcat", 0, false, new VPATH(), new BAVNs("", "", ""), new L("AB", "xsd:string"), new L("A", "xsd:string"), new L("B", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-string-arguments-query", "sqwrl:select", 0, true, new L("AB", "xsd:string"));  
end
Rule name: test-built-in-atom-with-variable-date-argument-query
rule "test-built-in-atom-with-variable-date-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="hasDOB", $dob:o) 
   BAP(a1==$dob) from invoker.invoke("test-built-in-atom-with-variable-date-argument-query", "temporal:equals", 0, false, new VPATH(), new BAVNs("dob", ""), $dob, new L("2000-01-05", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-date-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-object-property-atom-with-variable-subject-and-variable-object-query
rule "test-object-property-atom-with-variable-subject-and-variable-object-query" 
when 
   OPAA(s.id=="m4", p.id=="hasUncle", o.id=="m6") 
then 
   invoker.invoke("test-object-property-atom-with-variable-subject-and-variable-object-query", "sqwrl:select", 0, true, new I("m4"), new I("m6"));  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-string-variable-subject-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-string-variable-subject-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasSurname", $sn:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-string-variable-subject-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasAge", o==new L("44", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-query", "sqwrl:select", 0, true, new I("p7"), new L("44", "xsd:integer"));  
end
Rule name: test-built-in-atom-with-unbound-datetime-argument-query
rule "test-built-in-atom-with-unbound-datetime-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-datetime-argument-query", "temporal:add", 0, false, new VPATH(), new BAVNs("x", "", "", ""), new UBA("x"), new L("1999-11-01T10:00", "xsd:string"), new L("4", "xsd:integer"), new L("Years", "xsd:string")) 
   BAP(a1==$x) from invoker.invoke("test-built-in-atom-with-unbound-datetime-argument-query", "temporal:equals", 1, false, new VPATH(), new BAVNs("x", ""), $x, new L("2003-11-01T10:00:00.0", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-datetime-argument-query", "sqwrl:select", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-boolean-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-boolean-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-boolean-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="hasHeightInCM", o==new L("157.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-class-atom-in-antecedent-with-variable-query
rule "test-class-atom-in-antecedent-with-variable-query" 
when 
   CAA(c=="Male", $m:i) 
   SIA(i1==$m, i2.id=="p1") 
then 
   invoker.invoke("test-class-atom-in-antecedent-with-variable-query", "sqwrl:select", 0, true, $m);  
   invoker.invoke("test-class-atom-in-antecedent-with-variable-query", "sqwrl:orderBy", 1, true, $m);  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-query" 
when 
   DPAA(s.id=="p2", p.id=="hasHeightInCM", o==new L("145.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-query", "sqwrl:select", 0, true, new I("p2"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-query" 
when 
   DPAA(s.id=="p8", p.id=="isFrench", $f:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-query", "sqwrl:select", 0, true, new I("p8"), $f);  
end
Rule name: test-different-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query
rule "test-different-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query" 
when 
   CAA(c=="Person", $i1:i) 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i1, p.id=="hasID", o==new L("d1ID", "xsd:string")) 
   DPAA(s==$i2, p.id=="hasID", o==new L("d2ID", "xsd:string")) 
   DIA(i1==$i1, i2==$i2) 
then 
   invoker.invoke("test-different-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, $i1, $i2);  
end
Rule name: test-built-in-atom-with-variable-integer-argument-query
rule "test-built-in-atom-with-variable-integer-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", $age:o) 
   BAP(a1==$age) from invoker.invoke("test-built-in-atom-with-variable-integer-argument-query", "swrlb:equal", 0, false, new VPATH(), new BAVNs("age", ""), $age, new L("66", "xsd:integer")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-integer-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-built-in-atom-with-variable-string-argument-query
rule "test-built-in-atom-with-variable-string-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="hasFirstName", $fn:o) 
   BAP(a1==$fn) from invoker.invoke("test-built-in-atom-with-variable-string-argument-query", "swrlb:equal", 0, false, new VPATH(), new BAVNs("fn", ""), $fn, new L("Fred", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-string-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query
rule "test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query" 
when 
   SIA(i1.id=="s10", i2.id=="s11") 
then 
   invoker.invoke("test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("s10"), new I("s11"));  
end
Rule name: test-built-in-atom-with-variable-double-argument-query
rule "test-built-in-atom-with-variable-double-argument-query" 
when 
   DPAA(s.id=="p1", p.id=="hasHeightInCM", $h:o) 
   BAP(a1==$h) from invoker.invoke("test-built-in-atom-with-variable-double-argument-query", "swrlb:equal", 0, false, new VPATH(), new BAVNs("h", ""), $h, new L("180.0", "xsd:double")) 
then 
   invoker.invoke("test-built-in-atom-with-variable-double-argument-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-string-variable-subject-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-string-variable-subject-query" 
when 
   DPAA(s.id=="p1", p.id=="hasFirstName", $fn:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-string-variable-subject-query", "sqwrl:select", 0, true, new I("p1"), $fn);  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="isFrench", o==new L("false", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-query" 
when 
   DPAA(s.id=="p7", p.id=="hasHeightInCM", o==new L("145.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-query", "sqwrl:select", 0, true, new I("p7"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-query" 
when 
   DPAA(s.id=="p12", p.id=="hasDOB", $dob:o) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-query", "sqwrl:select", 0, true, new I("p12"));  
end
Rule name: test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query
rule "test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query" 
when 
   DIA(i1.id=="d12", i2.id=="d13") 
then 
   invoker.invoke("test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("d12"), new I("d13"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-integer-variable-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-integer-variable-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasAge", $age:o) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-integer-variable-object-query", "sqwrl:select", 0, true, new I("p1"), $age);  
end
Rule name: test-built-in-atom-with-date-arguments-query
rule "test-built-in-atom-with-date-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-date-arguments-query", "temporal:before", 0, false, new VPATH(), new BAVNs("", ""), new L("01-01-12", "xsd:string"), new L("01-01-13", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-date-arguments-query", "sqwrl:select", 0, true, new L("before", "xsd:string"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-query" 
when 
   DPAA(s.id=="p2", p.id=="hasFirstName", o==new L("Angela", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-query", "sqwrl:select", 0, true, new I("p2"));  
end
Rule name: test-built-in-atom-with-unbound-integer-cascading-argument-query
rule "test-built-in-atom-with-unbound-integer-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-integer-cascading-argument-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("2", "xsd:integer"), new L("2", "xsd:integer")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-integer-cascading-argument-query", "swrlb:multiply", 1, false, new VPATH(), new BAVNs("y", "x", ""), new UBA("y"), $x, new L("2", "xsd:integer")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-integer-cascading-argument-query", "sqwrl:select", 0, true, $y);  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-date-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-date-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasDOB", o==new L("2000-01-05", "xsd:date")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-date-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-object-property-atom-with-named-subject-and-variable-object-query
rule "test-object-property-atom-with-named-subject-and-variable-object-query" 
when 
   OPAA(s.id=="m7", p.id=="hasUncle", o.id=="m9") 
then 
   invoker.invoke("test-object-property-atom-with-named-subject-and-variable-object-query", "sqwrl:select", 0, true, new I("m7"), new I("m9"));  
end
Rule name: test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query
rule "test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query" 
when 
   DIA(i1.id=="d8", i2.id=="d9") 
then 
   invoker.invoke("test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("d8"), new I("d9"));  
end
Rule name: test-same-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query
rule "test-same-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query" 
when 
   CAA(c=="Person", $i2:i) 
   DPAA(s==$i2, p.id=="hasID", o==new L("s6ID", "xsd:string")) 
   SIA(i1.id=="s5", i2==$i2) 
then 
   invoker.invoke("test-same-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query", "sqwrl:selectDistinct", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-query
rule "test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-query" 
when 
   DPAA(s.id=="p6", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-query", "sqwrl:select", 0, true, new I("p6"));  
end
Rule name: test-object-property-atom-with-variable-subject-and-named-object-query
rule "test-object-property-atom-with-variable-subject-and-named-object-query" 
when 
   OPAA(s.id=="m10", p.id=="hasUncle", o.id=="m12") 
then 
   invoker.invoke("test-object-property-atom-with-variable-subject-and-named-object-query", "sqwrl:select", 0, true, new I("m10"), new I("m12"));  
end
Rule name: test-built-in-atom-with-unbound-double-argument-query
rule "test-built-in-atom-with-unbound-double-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-double-argument-query", "swrlb:add", 0, false, new VPATH(), new BAVNs("x", "", ""), new UBA("x"), new L("2.0", "xsd:double"), new L("2.0", "xsd:double")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-double-argument-query", "sqwrl:select", 0, true, $x);  
end
Rule name: test-data-property-atom-in-antecedent-with-variable-subject-and-string-literal-object-query
rule "test-data-property-atom-in-antecedent-with-variable-subject-and-string-literal-object-query" 
when 
   CAA(c=="Person", $p:i) 
   DPAA(s==$p, p.id=="hasSurname", o==new L("Gunderson", "xsd:string")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-variable-subject-and-string-literal-object-query", "sqwrl:select", 0, true, $p);  
end
Rule name: test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query
rule "test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query" 
when 
   SIA(i1.id=="s8", i2.id=="s9") 
then 
   invoker.invoke("test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query", "sqwrl:select", 0, true, new I("s8"), new I("s9"));  
end
Rule name: test-built-in-atom-with-datetime-arguments-query
rule "test-built-in-atom-with-datetime-arguments-query" 
when 
   BAP() from invoker.invoke("test-built-in-atom-with-datetime-arguments-query", "temporal:before", 0, false, new VPATH(), new BAVNs("", ""), new L("01-01-12T12:22", "xsd:string"), new L("01-01-12T12:23", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-datetime-arguments-query", "sqwrl:select", 0, true, new L("before", "xsd:string"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-query" 
when 
   DPAA(s.id=="p4", p.id=="hasDOB", o==new L("2002-01-01", "xsd:date")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-query", "sqwrl:select", 0, true, new I("p4"));  
end
Rule name: test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query
rule "test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query" 
when 
   DIA(i1.id=="d10", i2.id=="d11") 
then 
   invoker.invoke("test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query", "sqwrl:select", 0, true, new I("d10"), new I("d11"));  
end
Rule name: test-built-in-atom-with-unbound-datetime-cascading-argument-query
rule "test-built-in-atom-with-unbound-datetime-cascading-argument-query" 
when 
   BAP($x:a1) from invoker.invoke("test-built-in-atom-with-unbound-datetime-cascading-argument-query", "temporal:add", 0, false, new VPATH(), new BAVNs("x", "", "", ""), new UBA("x"), new L("1999-11-01T10:00", "xsd:string"), new L("4", "xsd:integer"), new L("Years", "xsd:string")) 
   BAP($y:a1, a2==$x) from invoker.invoke("test-built-in-atom-with-unbound-datetime-cascading-argument-query", "temporal:add", 1, false, new VPATH(), new BAVNs("y", "x", "", ""), new UBA("y"), $x, new L("1", "xsd:integer"), new I("temporal:Years")) 
   BAP(a1==$y) from invoker.invoke("test-built-in-atom-with-unbound-datetime-cascading-argument-query", "temporal:equals", 2, false, new VPATH($x), new BAVNs("y", ""), $y, new L("2004-11-01T10:00:00.0", "xsd:string")) 
then 
   invoker.invoke("test-built-in-atom-with-unbound-datetime-cascading-argument-query", "sqwrl:select", 0, true, new L("Yes!", "xsd:string"));  
end
Rule name: test-data-property-atom-in-antecedent-with-named-subject-and-double-literal-object-query
rule "test-data-property-atom-in-antecedent-with-named-subject-and-double-literal-object-query" 
when 
   DPAA(s.id=="p1", p.id=="hasHeightInCM", o==new L("180.0", "xsd:double")) 
then 
   invoker.invoke("test-data-property-atom-in-antecedent-with-named-subject-and-double-literal-object-query", "sqwrl:select", 0, true, new I("p1"));  
end
Rule name: test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-query
rule "test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-query" 
when 
   DPAA(s.id=="p9", p.id=="hasAge", o==new L("22", "xsd:integer")) 
then 
   invoker.invoke("test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-query", "sqwrl:select", 0, true, new I("p9"), new L("22", "xsd:integer"));  
end
Rule name: test-datatype-boolean-query
rule "test-datatype-boolean-query" 
when 
   DPAA(s.id=="p1", p.id=="isFrench", o==new L("true", "xsd:boolean")) 
then 
   invoker.invoke("test-datatype-boolean-query", "sqwrl:select", 0, true, new I("p1"));  
end
PASSED
Running test test-built-in-atom-with-unbound-datetime-argument-query...PASSED
Running test test-built-in-atom-with-integer-arguments-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-literal-object-query...PASSED
Running test test-object-property-atom-with-named-subject-and-variable-object-query...PASSED
Running test test-datatype-integer-query...PASSED
Running test test-built-in-atom-with-unbound-string-cascading-argument-query...PASSED
Running test test-object-property-atom-with-variable-subject-and-variable-object-query...PASSED
Running test test-built-in-atom-with-unbound-integer-argument-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-int-object-query...PASSED
Running test test-built-in-atom-with-unbound-string-argument-query...PASSED
Running test test-class-atom-in-antecedent-with-named-individual-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-integer-literal-object-query...PASSED
Running test test-different-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-date-literal-object-query...PASSED
Running test test-built-in-atom-with-unbound-boolean-argument-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-string-literal-object-query...PASSED
Running test test-same-individual-atom-in-antecedent-with-variable-individual1-and-variable-individual2-query...PASSED
Running test test-datatype-double-query...PASSED
Running test test-built-in-atom-with-variable-name-extraction-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-string-variable-subject-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-double-variable-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-double-literal-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-double-object-query...PASSED
Running test test-datatype-datetime-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-boolean-variable-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-double-literal-object-query...PASSED
Running test test-built-in-atom-create-owl-thing-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-integer-literal-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-string-literal-object-query...PASSED
Running test test-built-in-atom-with-unbound-double-cascading-argument-query...PASSED
Running test test-different-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query...PASSED
Running test test-built-in-atom-with-variable-boolean-argument-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-datetime-literal-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-boolean-literal-object-query...PASSED
Running test test-built-in-atom-with-variable-date-argument-query...PASSED
Running test test-class-atom-in-consequent-with-variablel-query...PASSED
Running test test-temporal-built-in-add-and-after-with-now-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-string-variable-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-string-literal-object-query...PASSED
Running test test-different-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-integer-literal-object-query...PASSED
Running test test-different-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query...PASSED
Running test test-same-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-boolean-literal-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-double-literal-object-query...PASSED
Running test test-built-in-atom-with-unbound-boolean-cascading-argument-query...PASSED
Running test test-datatype-string-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-double-variable-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-datetime-literal-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-date-literal-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-integer-variable-object-query...PASSED
Running test test-same-individual-atom-in-antecedent-with-named-individual1-and-named-individual2-query...PASSED
Running test test-built-in-atom-with-variable-double-argument-query...PASSED
Running test test-built-in-atom-with-variable-string-argument-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-datetime-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-string-variable-subject-query...PASSED
Running test test-different-individual-atom-in-consequent-with-named-individual1-and-named-individual2-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-integer-variable-object-query...PASSED
Running test test-different-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-boolean-object-query...PASSED
Running test test-built-in-atom-with-boolean-arguments-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-boolean-variable-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-double-variable-object-query...PASSED
Running test test-same-individual-atom-in-consequent-with-variable-individual1-and-named-individual2-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-integer-literal-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-boolean-literal-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-date-variable-subject-query...PASSED
Running test test-object-property-atom-with-variable-subject-and-named-object-query...PASSED
Running test test-same-individual-atom-in-consequent-with-named-individual1-and-variable-individual2-query...PASSED
Running test test-built-in-atom-with-double-arguments-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-boolean-variable-object-query...PASSED
Running test test-class-atom-in-antecedent-with-variable-query...PASSED
Running test test-datatype-boolean-query...PASSED
Running test test-built-in-atom-with-string-arguments-query...PASSED
Running test test-same-individual-atom-in-antecedent-with-named-individual1-and-variable-individual2-query...PASSED
Running test test-class-atom-in-consequent-with-named-individual-query...PASSED
Running test test-built-in-atom-with-unbound-datetime-cascading-argument-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-boolean-variable-object-query...PASSED
Running test test-built-in-atom-with-variable-integer-argument-query...PASSED
Running test test-different-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query...PASSED
Running test test-built-in-atom-with-date-arguments-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-double-variable-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-variable-subject-and-double-literal-object-query...PASSED
Running test test-datatype-date-query...PASSED
Running test test-same-individual-atom-in-consequent-with-variable-individual1-and-variable-individual2-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-string-variable-object-query...PASSED
Running test test-built-in-atom-with-unbound-double-argument-query...PASSED
Running test test-same-individual-atom-in-antecedent-with-variable-individual1-and-named-individual2-query...PASSED
Running test test-built-in-atom-with-datetime-arguments-query...PASSED
Running test test-object-property-atom-with-named-subject-and-named-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-date-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-built-in-bound-string-object-query...PASSED
Running test test-data-property-atom-in-consequent-with-named-subject-and-date-variable-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-named-subject-and-integer-variable-object-query...PASSED
Running test test-data-property-atom-in-antecedent-with-variable-subject-and-string-literal-object-query...PASSED
Running test test-built-in-atom-with-unbound-integer-cascading-argument-query...PASSED
Number of tests: 97
Passed 97 test(s)!

